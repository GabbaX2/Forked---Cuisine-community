import {
  twJoin,
  twMerge
} from "./chunk-YCMJBG7T.js";
import {
  ce
} from "./chunk-KVVV4NOD.js";
import {
  require_cjs
} from "./chunk-YGYLQOZH.js";
import {
  arrow,
  autoUpdate,
  computePosition,
  flip,
  offset,
  shift
} from "./chunk-IBKQXHYK.js";
import {
  getOppositePlacement,
  getSide,
  getSideAxis
} from "./chunk-RMNOHYDY.js";
import {
  Tween
} from "./chunk-H4IG4T2R.js";
import "./chunk-MNSWLKPA.js";
import {
  fade,
  fly,
  slide
} from "./chunk-WL25RBHX.js";
import "./chunk-NZTLVUMK.js";
import "./chunk-MPCSGXTG.js";
import "./chunk-7RQDXF5S.js";
import "./chunk-IHXKLMDG.js";
import {
  cubicOut,
  sineIn
} from "./chunk-YERFD2CZ.js";
import {
  CLASS,
  action,
  add_locations,
  append_styles,
  bind_checked,
  bind_files,
  bind_group,
  bind_select_value,
  bind_this,
  bind_value,
  bind_window_size,
  check_target,
  cleanup_styles,
  clsx as clsx2,
  component,
  create_ownership_validator,
  each,
  element,
  hmr,
  html,
  if_block,
  index,
  init_select,
  key_block,
  legacy_api,
  log_if_contains_state,
  onMount,
  prop,
  remove_input_defaults,
  rest_props,
  select_option,
  set_attribute,
  set_attributes,
  set_class,
  set_style,
  set_value,
  setup_stores,
  snippet,
  spread_props,
  store_get,
  store_set,
  transition,
  validate_dynamic_element_tag,
  validate_each_keys,
  validate_snippet_args,
  validate_store,
  validate_void_dynamic_element,
  wrap_snippet,
  writable
} from "./chunk-VOYJ3SK6.js";
import {
  clsx,
  clsx_default
} from "./chunk-U7P2NEEE.js";
import {
  append,
  comment,
  from_html,
  from_svg,
  head,
  set_text,
  text,
  with_script
} from "./chunk-2ELJ2S42.js";
import {
  $document,
  FILENAME,
  HMR,
  apply,
  child,
  delegate,
  derived_safe_equal,
  effect,
  equals,
  event as event2,
  first_child,
  get,
  getContext,
  next,
  noop,
  pop,
  proxy,
  push,
  remove_textarea_child,
  replay_events,
  reset,
  set,
  setContext,
  sibling,
  state,
  strict_equals,
  template_effect,
  user_derived,
  user_effect
} from "./chunk-L47DFKLK.js";
import "./chunk-NXGWPDOQ.js";
import "./chunk-HNWPC2PS.js";
import "./chunk-TZZ7LK5Y.js";
import "./chunk-RVAV4ZRS.js";
import {
  __toESM
} from "./chunk-NNIHVWYK.js";

// node_modules/flowbite-svelte/dist/uiHelpers.svelte.js
function uiHelpers() {
  let isOpen = state(false);
  function toggle2() {
    set(isOpen, !get(isOpen));
  }
  function close() {
    set(isOpen, false);
  }
  function open() {
    set(isOpen, true);
  }
  return {
    get isOpen() {
      return get(isOpen);
    },
    set isOpen(value) {
      set(isOpen, value, true);
    },
    toggle: toggle2,
    close,
    open
  };
}
function clickOutside(element2, callbackFunction) {
  const onClick = (event3) => {
    if (strict_equals(typeof callbackFunction, "function")) {
      const targetNode = event3.target;
      if (!element2.contains(targetNode)) {
        callbackFunction(event3);
      }
    } else {
      console.error("Callback function is not a function");
    }
  };
  element2.ownerDocument.body.addEventListener("click", onClick);
  return {
    update(newCallbackFunction) {
      if (strict_equals(typeof newCallbackFunction, "function")) {
        callbackFunction = newCallbackFunction;
      } else {
        console.error("New callback function is not a function");
      }
    },
    destroy() {
      element2.ownerDocument.body.removeEventListener("click", onClick);
    }
  };
}
var n = Date.now();
function idGenerator() {
  return (++n).toString(36);
}

// node_modules/flowbite-svelte/dist/accordion/Accordion.svelte
Accordion[FILENAME] = "node_modules/flowbite-svelte/dist/accordion/Accordion.svelte";
var root = add_locations(from_html(`<div><!></div>`), Accordion[FILENAME], [[27, 0]]);
function Accordion($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Accordion);
  let multiple = prop($$props, "multiple", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "flush",
      "activeClass",
      "inactiveClass",
      "multiple",
      "class",
      "transitionType"
    ],
    "restProps"
  );
  const context = getContext("themeConfig");
  const accordionTheme = (context == null ? void 0 : context.accordion) || accordion;
  const ctx = {
    flush: $$props.flush,
    activeClass: $$props.activeClass,
    inactiveClass: $$props.inactiveClass,
    selected: multiple() ? void 0 : writable()
  };
  setContext("ctx", ctx);
  setContext("ctxTransitionType", $$props.transitionType);
  const base = user_derived(() => accordionTheme({
    flush: $$props.flush,
    class: clsx_default($$props.class)
  }));
  var div = root();
  let attributes;
  var node = child(div);
  snippet(node, () => $$props.children);
  reset(div);
  template_effect(() => attributes = set_attributes(div, attributes, { ...restProps, class: get(base) }));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Accordion = hmr(Accordion, () => Accordion[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Accordion[HMR].source;
    set(Accordion[HMR].source, module.default[HMR].original);
  });
}
var Accordion_default = Accordion;

// node_modules/flowbite-svelte/dist/accordion/AccordionItem.svelte
AccordionItem[FILENAME] = "node_modules/flowbite-svelte/dist/accordion/AccordionItem.svelte";
var handleToggle = (_, selected, open, self) => selected.set(open() ? {} : self);
var root_3 = add_locations(from_svg(`<svg class="h-3 w-3 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5"></path></svg>`), AccordionItem[FILENAME], [[45, 10, [[46, 12]]]]);
var root_6 = add_locations(from_svg(`<svg class="h-3 w-3 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"></path></svg>`), AccordionItem[FILENAME], [[52, 8, [[53, 10]]]]);
var root_1 = add_locations(from_html(`<!> <!>`, 1), AccordionItem[FILENAME], []);
var root_9 = add_locations(from_html(`<div><div><!></div></div>`), AccordionItem[FILENAME], [[64, 4, [[65, 6]]]]);
var root_10 = add_locations(from_html(`<div><div><!></div></div>`), AccordionItem[FILENAME], [[71, 2, [[72, 4]]]]);
var root2 = add_locations(from_html(`<h2><button type="button"><!></button></h2> <!>`, 1), AccordionItem[FILENAME], [[39, 0, [[40, 2]]]]);
function AccordionItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, AccordionItem);
  let open = prop($$props, "open", 15, false), transitionType = prop($$props, "transitionType", 3, slide);
  const ctxTransitionType = getContext("ctxTransitionType");
  const useTransition = strict_equals(transitionType(), "none") ? false : strict_equals(ctxTransitionType, "none") ? false : true;
  const context = getContext("themeConfig");
  const accordionitemTheme = (context == null ? void 0 : context.accordionitem) || accordionitem;
  const ctx = getContext("ctx") ?? {};
  const self = {};
  const selected = ctx.selected ?? writable();
  if (open()) selected.set(self);
  selected.subscribe((x) => open(strict_equals(x, self)));
  const $$d = user_derived(() => accordionitemTheme({ flush: ctx.flush, open: open() })), base = user_derived(() => {
    let {
      base: $$1,
      button: $$2,
      content: $$3,
      active: $$4,
      inactive: $$5
    } = get($$d);
    return $$1;
  }), button2 = user_derived(() => {
    let {
      base: $$1,
      button: $$2,
      content: $$3,
      active: $$4,
      inactive: $$5
    } = get($$d);
    return $$2;
  }), content = user_derived(() => {
    let {
      base: $$1,
      button: $$2,
      content: $$3,
      active: $$4,
      inactive: $$5
    } = get($$d);
    return $$3;
  }), active = user_derived(() => {
    let {
      base: $$1,
      button: $$2,
      content: $$3,
      active: $$4,
      inactive: $$5
    } = get($$d);
    return $$4;
  }), inactive = user_derived(() => {
    let {
      base: $$1,
      button: $$2,
      content: $$3,
      active: $$4,
      inactive: $$5
    } = get($$d);
    return $$5;
  });
  let buttonClass = user_derived(() => twMerge(get(button2)(), open() && !ctx.flush && ($$props.activeClass || ctx.activeClass || get(active)()), !open() && !ctx.flush && ($$props.inactiveClass || ctx.inactiveClass || get(inactive)()), clsx_default($$props.class)));
  var fragment = root2();
  var h2 = first_child(fragment);
  var button_1 = child(h2);
  button_1.__click = [handleToggle, selected, open, self];
  var node = child(button_1);
  {
    var consequent_3 = ($$anchor2) => {
      var fragment_1 = root_1();
      var node_1 = first_child(fragment_1);
      snippet(node_1, () => $$props.header);
      var node_2 = sibling(node_1, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_3 = first_child(fragment_2);
          {
            var consequent = ($$anchor4) => {
              var svg = root_3();
              append($$anchor4, svg);
            };
            var alternate = ($$anchor4) => {
              var fragment_3 = comment();
              var node_4 = first_child(fragment_3);
              snippet(node_4, () => $$props.arrowup);
              append($$anchor4, fragment_3);
            };
            if_block(node_3, ($$render) => {
              if (!$$props.arrowup) $$render(consequent);
              else $$render(alternate, false);
            });
          }
          append($$anchor3, fragment_2);
        };
        var alternate_1 = ($$anchor3, $$elseif) => {
          {
            var consequent_2 = ($$anchor4) => {
              var svg_1 = root_6();
              append($$anchor4, svg_1);
            };
            var alternate_2 = ($$anchor4) => {
              var fragment_4 = comment();
              var node_5 = first_child(fragment_4);
              snippet(node_5, () => $$props.arrowdown);
              append($$anchor4, fragment_4);
            };
            if_block(
              $$anchor3,
              ($$render) => {
                if (!$$props.arrowdown) $$render(consequent_2);
                else $$render(alternate_2, false);
              },
              $$elseif
            );
          }
        };
        if_block(node_2, ($$render) => {
          if (open()) $$render(consequent_1);
          else $$render(alternate_1, false);
        });
      }
      append($$anchor2, fragment_1);
    };
    if_block(node, ($$render) => {
      if ($$props.header) $$render(consequent_3);
    });
  }
  reset(button_1);
  reset(h2);
  var node_6 = sibling(h2, 2);
  {
    var consequent_5 = ($$anchor2) => {
      var fragment_5 = comment();
      var node_7 = first_child(fragment_5);
      {
        var consequent_4 = ($$anchor3) => {
          var div = root_9();
          var div_1 = child(div);
          var node_8 = child(div_1);
          snippet(node_8, () => $$props.children);
          reset(div_1);
          reset(div);
          template_effect(($0) => set_class(div_1, 1, $0), [
            () => clsx2(get(content)({ class: $$props.contentClass }))
          ]);
          transition(3, div, transitionType, () => $$props.transitionParams);
          append($$anchor3, div);
        };
        if_block(node_7, ($$render) => {
          if (open() && strict_equals(transitionType(), "none", false)) $$render(consequent_4);
        });
      }
      append($$anchor2, fragment_5);
    };
    var alternate_3 = ($$anchor2) => {
      var div_2 = root_10();
      var div_3 = child(div_2);
      var node_9 = child(div_3);
      snippet(node_9, () => $$props.children);
      reset(div_3);
      reset(div_2);
      template_effect(
        ($0) => {
          set_class(div_2, 1, clsx2(open() ? "block" : "hidden"));
          set_class(div_3, 1, $0);
        },
        [
          () => clsx2(get(content)({ class: $$props.contentClass }))
        ]
      );
      append($$anchor2, div_2);
    };
    if_block(node_6, ($$render) => {
      if (useTransition) $$render(consequent_5);
      else $$render(alternate_3, false);
    });
  }
  template_effect(
    ($0) => {
      set_class(h2, 1, $0);
      set_class(button_1, 1, clsx2(get(buttonClass)));
      set_attribute(button_1, "aria-expanded", open());
    },
    [
      () => clsx2(get(base)({ class: $$props.headerClass }))
    ]
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AccordionItem = hmr(AccordionItem, () => AccordionItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AccordionItem[HMR].source;
    set(AccordionItem[HMR].source, module.default[HMR].original);
  });
}
var AccordionItem_default = AccordionItem;
delegate(["click"]);

// node_modules/flowbite-svelte/dist/accordion/theme.js
var accordion = ce({
  base: "w-full text-gray-500 dark:text-gray-400",
  variants: {
    flush: {
      true: "",
      false: "border border-gray-200 dark:border-gray-700 rounded-t-xl"
    }
  }
});
var accordionitem = ce({
  slots: {
    base: "group",
    button: "flex items-center justify-between w-full font-medium text-left group-first:rounded-t-xl border-gray-200 dark:border-gray-700 border-b",
    content: "border-b border-gray-200 dark:border-gray-700",
    active: "bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-800",
    inactive: "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800"
  },
  variants: {
    flush: {
      true: {
        button: "py-5",
        content: "py-5"
      },
      false: {
        button: "p-5 border-s border-e group-first:border-t",
        content: "p-5 border-s border-e"
      }
    },
    open: {
      true: {},
      false: {}
    }
  },
  compoundVariants: [
    {
      flush: true,
      open: true,
      class: {
        button: "text-gray-900 dark:text-white"
      }
    },
    {
      flush: true,
      open: false,
      class: {
        button: "text-gray-500 dark:text-gray-400"
      }
    }
  ],
  defaultVariants: {
    flush: false,
    open: false
  }
});

// node_modules/flowbite-svelte/dist/alert/Alert.svelte
Alert[FILENAME] = "node_modules/flowbite-svelte/dist/alert/Alert.svelte";
var root_32 = add_locations(from_html(`<div><!></div>`), Alert[FILENAME], [[37, 6]]);
var root_12 = add_locations(from_html(`<div><!> <!> <!></div>`), Alert[FILENAME], [[31, 2]]);
function Alert($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Alert);
  let alertStatus = prop($$props, "alertStatus", 15, true), color = prop($$props, "color", 3, "primary"), rounded = prop($$props, "rounded", 3, true), transition2 = prop($$props, "transition", 3, fade), onclick = prop($$props, "onclick", 3, () => alertStatus(false)), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "icon",
      "alertStatus",
      "closeIcon",
      "color",
      "rounded",
      "border",
      "class",
      "dismissable",
      "transition",
      "params",
      "onclick"
    ],
    "restProps"
  );
  const context = getContext("themeConfig");
  const alertTheme = (context == null ? void 0 : context.alert) || alert;
  let divCls = user_derived(() => alertTheme({
    color: color(),
    rounded: rounded(),
    border: $$props.border,
    icon: !!$$props.icon,
    dismissable: $$props.dismissable,
    class: clsx_default($$props.class)
  }));
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_4 = ($$anchor2) => {
      var div = root_12();
      let attributes;
      var node_1 = child(div);
      {
        var consequent = ($$anchor3) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          snippet(node_2, () => $$props.icon);
          append($$anchor3, fragment_1);
        };
        if_block(node_1, ($$render) => {
          if ($$props.icon) $$render(consequent);
        });
      }
      var node_3 = sibling(node_1, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var div_1 = root_32();
          var node_4 = child(div_1);
          snippet(node_4, () => $$props.children);
          reset(div_1);
          append($$anchor3, div_1);
        };
        var alternate = ($$anchor3) => {
          var fragment_2 = comment();
          var node_5 = first_child(fragment_2);
          snippet(node_5, () => $$props.children);
          append($$anchor3, fragment_2);
        };
        if_block(node_3, ($$render) => {
          if ($$props.icon || $$props.dismissable) $$render(consequent_1);
          else $$render(alternate, false);
        });
      }
      var node_6 = sibling(node_3, 2);
      {
        var consequent_3 = ($$anchor3) => {
          var fragment_3 = comment();
          var node_7 = first_child(fragment_3);
          {
            var consequent_2 = ($$anchor4) => {
              var fragment_4 = comment();
              var node_8 = first_child(fragment_4);
              CloseButton_default(node_8, {
                class: "-my-1.5 ms-auto -me-1.5 dark:hover:bg-gray-700",
                get color() {
                  return color();
                },
                ariaLabel: "Remove alert",
                get onclick() {
                  return onclick();
                },
                children: wrap_snippet(Alert, ($$anchor5, $$slotProps) => {
                  var fragment_5 = comment();
                  var node_9 = first_child(fragment_5);
                  component(node_9, () => $$props.closeIcon, ($$anchor6, $$component) => {
                    $$component($$anchor6, {});
                  });
                  append($$anchor5, fragment_5);
                }),
                $$slots: { default: true }
              });
              append($$anchor4, fragment_4);
            };
            var alternate_1 = ($$anchor4) => {
              var fragment_6 = comment();
              var node_10 = first_child(fragment_6);
              CloseButton_default(node_10, {
                class: "-my-1.5 ms-auto -me-1.5 dark:hover:bg-gray-700",
                get color() {
                  return color();
                },
                ariaLabel: "Remove alert",
                get onclick() {
                  return onclick();
                }
              });
              append($$anchor4, fragment_6);
            };
            if_block(node_7, ($$render) => {
              if ($$props.closeIcon) $$render(consequent_2);
              else $$render(alternate_1, false);
            });
          }
          append($$anchor3, fragment_3);
        };
        if_block(node_6, ($$render) => {
          if ($$props.dismissable) $$render(consequent_3);
        });
      }
      reset(div);
      template_effect(() => attributes = set_attributes(div, attributes, {
        role: "alert",
        ...restProps,
        class: get(divCls)
      }));
      transition(3, div, transition2, () => $$props.params);
      append($$anchor2, div);
    };
    if_block(node, ($$render) => {
      if (alertStatus()) $$render(consequent_4);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Alert = hmr(Alert, () => Alert[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Alert[HMR].source;
    set(Alert[HMR].source, module.default[HMR].original);
  });
}
var Alert_default = Alert;

// node_modules/flowbite-svelte/dist/alert/theme.js
var alert = ce({
  base: "p-4 gap-3 text-sm",
  variants: {
    color: {
      // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      primary: "bg-primary-50 dark:bg-gray-800 text-primary-800 dark:text-primary-400",
      secondary: "bg-secondary-50 dark:bg-secondary-800 text-secondary-800 dark:text-secondary-400",
      gray: "bg-gray-100 text-gray-500 focus:ring-gray-400 dark:bg-gray-700 dark:text-gray-300",
      red: "bg-red-100 text-red-500 focus:ring-red-400 dark:bg-red-200 dark:text-red-600",
      orange: "bg-orange-100 text-orange-500 focus:ring-orange-400 dark:bg-orange-200 dark:text-orange-600",
      amber: "bg-amber-100 text-amber-500 focus:ring-amber-400 dark:bg-amber-200 dark:text-amber-600",
      yellow: "bg-yellow-100 text-yellow-500 focus:ring-yellow-400 dark:bg-yellow-200 dark:text-yellow-600",
      lime: "bg-lime-100 text-lime-500 focus:ring-lime-400 dark:bg-lime-200 dark:text-lime-600",
      green: "bg-green-100 text-green-500 focus:ring-green-400 dark:bg-green-200 dark:text-green-600",
      emerald: "bg-emerald-100 text-emerald-500 focus:ring-emerald-400 dark:bg-emerald-200 dark:text-emerald-600",
      teal: "bg-teal-100 text-teal-500 focus:ring-teal-400 dark:bg-teal-200 dark:text-teal-600",
      cyan: "bg-cyan-100 text-cyan-500 focus:ring-cyan-400 dark:bg-cyan-200 dark:text-cyan-600",
      sky: "bg-sky-100 text-sky-500 focus:ring-sky-400 dark:bg-sky-200 dark:text-sky-600",
      blue: "bg-blue-100 text-blue-500 focus:ring-blue-400 dark:bg-blue-200 dark:text-blue-600",
      indigo: "bg-indigo-100 text-indigo-500 focus:ring-indigo-400 dark:bg-indigo-200 dark:text-indigo-600",
      violet: "bg-violet-100 text-violet-500 focus:ring-violet-400 dark:bg-violet-200 dark:text-violet-600",
      purple: "bg-purple-100 text-purple-500 focus:ring-purple-400 dark:bg-purple-200 dark:text-purple-600",
      fuchsia: "bg-fuchsia-100 text-fuchsia-500 focus:ring-fuchsia-400 dark:bg-fuchsia-200 dark:text-fuchsia-600",
      pink: "bg-pink-100 text-pink-500 focus:ring-pink-400 dark:bg-pink-200 dark:text-pink-600",
      rose: "bg-rose-100 text-rose-500 focus:ring-rose-400 dark:bg-rose-200 dark:text-rose-600"
    },
    rounded: {
      true: "rounded-lg"
    },
    border: {
      true: "border"
    },
    icon: {
      true: "flex items-center"
    },
    dismissable: {
      true: "flex items-center"
    }
  },
  compoundVariants: [
    // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
    {
      border: true,
      color: "primary",
      class: "border-primary-500 dark:border-primary-200 divide-primary-500 dark:divide-primary-200"
    },
    {
      border: true,
      color: "secondary",
      class: "border-secondary-500 dark:border-secondary-200 divide-secondary-500 dark:divide-secondary-200"
    },
    {
      border: true,
      color: "gray",
      class: "border-gray-300 dark:border-gray-800 divide-gray-300 dark:divide-gray-800"
    },
    {
      border: true,
      color: "red",
      class: "border-red-300 dark:border-red-800 divide-red-300 dark:divide-red-800"
    },
    {
      border: true,
      color: "orange",
      class: "border-orange-300 dark:border-orange-800 divide-orange-300 dark:divide-orange-800"
    },
    {
      border: true,
      color: "amber",
      class: "border-amber-300 dark:border-amber-800 divide-amber-300 dark:divide-amber-800"
    },
    {
      border: true,
      color: "yellow",
      class: "border-yellow-300 dark:border-yellow-800 divide-yellow-300 dark:divide-yellow-800"
    },
    {
      border: true,
      color: "lime",
      class: "border-lime-300 dark:border-lime-800 divide-lime-300 dark:divide-lime-800"
    },
    {
      border: true,
      color: "green",
      class: "border-green-300 dark:border-green-800 divide-green-300 dark:divide-green-800"
    },
    {
      border: true,
      color: "emerald",
      class: "border-emerald-300 dark:border-emerald-800 divide-emerald-300 dark:divide-emerald-800"
    },
    {
      border: true,
      color: "teal",
      class: "border-teal-300 dark:border-teal-800 divide-teal-300 dark:divide-teal-800"
    },
    {
      border: true,
      color: "cyan",
      class: "border-cyan-300 dark:border-cyan-800 divide-cyan-300 dark:divide-cyan-800"
    },
    {
      border: true,
      color: "sky",
      class: "border-sky-300 dark:border-sky-800 divide-sky-300 dark:divide-sky-800"
    },
    {
      border: true,
      color: "blue",
      class: "border-blue-300 dark:border-blue-800 divide-blue-300 dark:divide-blue-800"
    },
    {
      border: true,
      color: "indigo",
      class: "border-indigo-300 dark:border-indigo-800 divide-indigo-300 dark:divide-indigo-800"
    },
    //  violet, purple, fuchsia, pink, rose
    {
      border: true,
      color: "violet",
      class: "border-violet-300 dark:border-violet-800 divide-violet-300 dark:divide-violet-800"
    },
    {
      border: true,
      color: "purple",
      class: "border-purple-300 dark:border-purple-800 divide-purple-300 dark:divide-purple-800"
    },
    {
      border: true,
      color: "fuchsia",
      class: "border-fuchsia-300 dark:border-fuchsia-800 divide-fuchsia-300 dark:divide-fuchsia-800"
    },
    {
      border: true,
      color: "pink",
      class: "border-pink-300 dark:border-pink-800 divide-pink-300 dark:divide-pink-800"
    },
    {
      border: true,
      color: "rose",
      class: "border-rose-300 dark:border-rose-800 divide-rose-300 dark:divide-rose-800"
    }
  ],
  defaultVariants: {
    color: "primary",
    rounded: true
  }
});

// node_modules/flowbite-svelte/dist/avatar/Avatar.svelte
Avatar[FILENAME] = "node_modules/flowbite-svelte/dist/avatar/Avatar.svelte";
var root_33 = add_locations(from_html(`<img/>`), Avatar[FILENAME], [[31, 6]]);
var root_62 = add_locations(from_svg(`<svg fill="currentColor" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path></svg>`), Avatar[FILENAME], [[35, 6, [[36, 8]]]]);
var root_2 = add_locations(from_html(`<!> <!> <!>`, 1), Avatar[FILENAME], []);
var root_92 = add_locations(from_html(`<img/>`), Avatar[FILENAME], [[47, 2]]);
function Avatar($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Avatar);
  let cornerStyle = prop($$props, "cornerStyle", 3, "circular"), border = prop($$props, "border", 3, false), stacked = prop($$props, "stacked", 3, false), dot = prop($$props, "dot", 7), size = prop($$props, "size", 3, "md"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "indicator",
      "src",
      "href",
      "target",
      "cornerStyle",
      "border",
      "stacked",
      "dot",
      "class",
      "alt",
      "size",
      "onclick"
    ],
    "restProps"
  );
  const context = getContext("themeConfig");
  const avatarTheme = (context == null ? void 0 : context.avatar) || avatar;
  dot(dot() && {
    placement: "top-right",
    color: "gray",
    size: "lg",
    ...dot()
  });
  let avatarClass = user_derived(() => avatarTheme({
    cornerStyle: cornerStyle(),
    border: border(),
    stacked: stacked(),
    size: size(),
    class: clsx_default($$props.class)
  }));
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_4 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      validate_void_dynamic_element(() => $$props.href ? "a" : "div");
      validate_dynamic_element_tag(() => $$props.href ? "a" : "div");
      element(
        node_1,
        () => $$props.href ? "a" : "div",
        false,
        ($$element, $$anchor3) => {
          let attributes;
          template_effect(() => attributes = set_attributes($$element, attributes, {
            role: $$props.href ? void 0 : "button",
            onclick: $$props.onclick,
            href: $$props.href,
            target: $$props.target,
            ...restProps,
            class: get(avatarClass)
          }));
          var fragment_2 = root_2();
          var node_2 = first_child(fragment_2);
          {
            var consequent = ($$anchor4) => {
              var img2 = root_33();
              template_effect(() => {
                set_attribute(img2, "alt", $$props.alt);
                set_attribute(img2, "src", $$props.src);
                set_class(img2, 1, clsx2(strict_equals(cornerStyle(), "circular") ? "rounded-full" : "rounded-sm"));
              });
              append($$anchor4, img2);
            };
            var alternate = ($$anchor4, $$elseif) => {
              {
                var consequent_1 = ($$anchor5) => {
                  var fragment_3 = comment();
                  var node_3 = first_child(fragment_3);
                  snippet(node_3, () => $$props.children);
                  append($$anchor5, fragment_3);
                };
                var alternate_1 = ($$anchor5) => {
                  var svg = root_62();
                  template_effect(() => set_class(svg, 0, `h-full w-full ${strict_equals(cornerStyle(), "circular") ? "rounded-full" : "rounded-sm"}`));
                  append($$anchor5, svg);
                };
                if_block(
                  $$anchor4,
                  ($$render) => {
                    if ($$props.children) $$render(consequent_1);
                    else $$render(alternate_1, false);
                  },
                  $$elseif
                );
              }
            };
            if_block(node_2, ($$render) => {
              if ($$props.src) $$render(consequent);
              else $$render(alternate, false);
            });
          }
          var node_4 = sibling(node_2, 2);
          {
            var consequent_2 = ($$anchor4) => {
              var fragment_4 = comment();
              var node_5 = first_child(fragment_4);
              const expression = user_derived(() => strict_equals(cornerStyle(), "circular") ? true : false);
              Indicator_default(node_5, spread_props(
                {
                  border: true,
                  get offset() {
                    return get(expression);
                  }
                },
                dot
              ));
              append($$anchor4, fragment_4);
            };
            if_block(node_4, ($$render) => {
              if (dot()) $$render(consequent_2);
            });
          }
          var node_6 = sibling(node_4, 2);
          {
            var consequent_3 = ($$anchor4) => {
              var fragment_5 = comment();
              var node_7 = first_child(fragment_5);
              snippet(node_7, () => $$props.indicator);
              append($$anchor4, fragment_5);
            };
            if_block(node_6, ($$render) => {
              if ($$props.indicator) $$render(consequent_3);
            });
          }
          append($$anchor3, fragment_2);
        },
        void 0,
        [29, 2]
      );
      append($$anchor2, fragment_1);
    };
    var alternate_2 = ($$anchor2) => {
      var img_1 = root_92();
      let attributes_1;
      template_effect(() => attributes_1 = set_attributes(img_1, attributes_1, {
        alt: $$props.alt,
        src: $$props.src,
        ...restProps,
        onclick: $$props.onclick,
        class: get(avatarClass)
      }));
      replay_events(img_1);
      append($$anchor2, img_1);
    };
    if_block(node, ($$render) => {
      if (!$$props.src || !!$$props.href || $$props.children || dot() || $$props.indicator) $$render(consequent_4);
      else $$render(alternate_2, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Avatar = hmr(Avatar, () => Avatar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Avatar[HMR].source;
    set(Avatar[HMR].source, module.default[HMR].original);
  });
}
var Avatar_default = Avatar;

// node_modules/flowbite-svelte/dist/avatar/theme.js
var avatar = ce({
  base: "relative flex items-center justify-center bg-gray-100 dark:bg-gray-600 text-gray-600 dark:text-gray-300",
  variants: {
    cornerStyle: {
      rounded: "rounded-sm",
      circular: "rounded-full"
    },
    border: {
      true: "p-1 ring-2 ring-gray-300 dark:ring-gray-500",
      false: ""
    },
    stacked: {
      true: "border-2 -ms-4 border-white dark:border-gray-800",
      false: ""
    },
    size: {
      xs: "w-6 h-6",
      sm: "w-8 h-8",
      md: "w-10 h-10",
      lg: "w-20 h-20",
      xl: "w-36 h-36"
    }
  },
  defaultVariants: {
    cornerStyle: "circular",
    border: false,
    stacked: false,
    size: "md"
  }
});

// node_modules/flowbite-svelte/dist/badge/Badge.svelte
Badge[FILENAME] = "node_modules/flowbite-svelte/dist/badge/Badge.svelte";
var root_22 = add_locations(from_html(`<a><!></a>`), Badge[FILENAME], [[28, 6]]);
var root_5 = add_locations(from_html(`<button type="button" class="text-primary-500 hover:bg-primary-200 focus:ring-primary-400 dark:hover:bg-primary-800 dark:hover:text-primary-300 m-0.5 ms-1.5 -me-1.5 rounded-sm p-0.5 whitespace-normal focus:ring-1 focus:outline-hidden" aria-label="Remove badge"><span class="sr-only">Remove badge</span> <!></button>`), Badge[FILENAME], [[37, 8, [[38, 10]]]]);
var root_13 = add_locations(from_html(`<div><!> <!></div>`), Badge[FILENAME], [[26, 2]]);
function Badge($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Badge);
  let badgeStatus = prop($$props, "badgeStatus", 15, true), color = prop($$props, "color", 3, "primary"), large = prop($$props, "large", 3, false), dismissable = prop($$props, "dismissable", 3, false), transition2 = prop($$props, "transition", 3, fade), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "icon",
      "badgeStatus",
      "color",
      "large",
      "dismissable",
      "class",
      "border",
      "href",
      "target",
      "rounded",
      "transition",
      "params",
      "aClass",
      "onclose"
    ],
    "restProps"
  );
  const context = getContext("themeConfig");
  const badgeTheme = (context == null ? void 0 : context.badge) || badge;
  const $$d = user_derived(() => badgeTheme({
    color: color(),
    size: large() ? "large" : "small",
    rounded: $$props.rounded,
    border: $$props.border
  })), base = user_derived(() => {
    let { base: $$1, hrefClass: $$2 } = get($$d);
    return $$1;
  }), hrefClass = user_derived(() => {
    let { base: $$1, hrefClass: $$2 } = get($$d);
    return $$2;
  });
  const close = (ev) => {
    var _a;
    (_a = $$props.onclose) == null ? void 0 : _a.call($$props, ev);
    if (!ev.defaultPrevented) badgeStatus(false);
  };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_3 = ($$anchor2) => {
      var div = root_13();
      let attributes;
      var node_1 = child(div);
      {
        var consequent = ($$anchor3) => {
          var a = root_22();
          var node_2 = child(a);
          snippet(node_2, () => $$props.children);
          reset(a);
          template_effect(
            ($0) => {
              set_attribute(a, "href", $$props.href);
              set_attribute(a, "target", $$props.target);
              set_class(a, 1, $0);
            },
            [
              () => clsx2(get(hrefClass)({ class: $$props.aClass }))
            ]
          );
          append($$anchor3, a);
        };
        var alternate = ($$anchor3) => {
          var fragment_1 = comment();
          var node_3 = first_child(fragment_1);
          snippet(node_3, () => $$props.children);
          append($$anchor3, fragment_1);
        };
        if_block(node_1, ($$render) => {
          if ($$props.href) $$render(consequent);
          else $$render(alternate, false);
        });
      }
      var node_4 = sibling(node_1, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_5 = first_child(fragment_2);
          {
            var consequent_1 = ($$anchor4) => {
              var button2 = root_5();
              button2.__click = close;
              var node_6 = sibling(child(button2), 2);
              snippet(node_6, () => $$props.icon);
              reset(button2);
              append($$anchor4, button2);
            };
            var alternate_1 = ($$anchor4) => {
              var fragment_3 = comment();
              var node_7 = first_child(fragment_3);
              const expression = user_derived(() => large() ? "sm" : "xs");
              CloseButton_default(node_7, {
                class: "ms-1.5 -me-1.5",
                get color() {
                  return color();
                },
                get size() {
                  return get(expression);
                },
                ariaLabel: "Remove badge",
                onclick: close
              });
              append($$anchor4, fragment_3);
            };
            if_block(node_5, ($$render) => {
              if ($$props.icon) $$render(consequent_1);
              else $$render(alternate_1, false);
            });
          }
          append($$anchor3, fragment_2);
        };
        if_block(node_4, ($$render) => {
          if (dismissable()) $$render(consequent_2);
        });
      }
      reset(div);
      template_effect(($0) => attributes = set_attributes(div, attributes, { ...restProps, class: $0 }), [
        () => get(base)({ class: clsx_default($$props.class) })
      ]);
      transition(3, div, transition2, () => $$props.params);
      append($$anchor2, div);
    };
    if_block(node, ($$render) => {
      if (badgeStatus()) $$render(consequent_3);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge = hmr(Badge, () => Badge[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge[HMR].source;
    set(Badge[HMR].source, module.default[HMR].original);
  });
}
var Badge_default = Badge;
delegate(["click"]);

// node_modules/flowbite-svelte/dist/badge/theme.js
var badge = ce({
  slots: {
    hrefClass: "flex align-middle",
    base: "font-medium inline-flex items-center justify-center px-2.5 py-0.5"
  },
  variants: {
    color: {
      // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      primary: { base: "bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-300" },
      secondary: { base: "bg-secondary-100 text-secondary-800 dark:bg-secondary-900 dark:text-secondary-300" },
      gray: { base: "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300" },
      red: { base: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300" },
      orange: { base: "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300" },
      amber: { base: "bg-amber-100 text-amber-800 dark:bg-amber-900 dark:text-amber-300" },
      yellow: { base: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300" },
      lime: { base: "bg-lime-100 text-lime-800 dark:bg-lime-900 dark:text-lime-300" },
      green: { base: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300" },
      emerald: { base: "bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-300" },
      teal: { base: "bg-teal-100 text-teal-800 dark:bg-teal-900 dark:text-teal-300" },
      cyan: { base: "bg-cyan-100 text-cyan-800 dark:bg-cyan-900 dark:text-cyan-300" },
      sky: { base: "bg-sky-100 text-sky-800 dark:bg-sky-900 dark:text-sky-300" },
      blue: { base: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300" },
      indigo: { base: "bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-300" },
      violet: { base: "bg-violet-100 text-violet-800 dark:bg-violet-900 dark:text-violet-300" },
      fuchsia: { base: "bg-fuchsia-100 text-fuchsia-800 dark:bg-fuchsia-900 dark:text-fuchsia-300" },
      purple: { base: "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300" },
      pink: { base: "bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-300" },
      rose: { base: "bg-rose-100 text-rose-800 dark:bg-rose-900 dark:text-rose-300" }
    },
    size: {
      small: "text-xs",
      large: "text-sm"
    },
    border: {
      true: { base: "border" }
    },
    rounded: {
      true: { base: "rounded-full" },
      false: "rounded-sm"
    }
  },
  compoundVariants: [
    {
      border: true,
      color: "primary",
      class: "dark:bg-transparent dark:text-primary-400 border-primary-400 dark:border-primary-400"
    },
    {
      border: true,
      color: "secondary",
      class: "dark:bg-transparent dark:text-secondary-400 border-secondary-400 dark:border-secondary-400"
    },
    {
      border: true,
      color: "gray",
      class: "dark:bg-transparent dark:text-gray-400 border-gray-400 dark:border-gray-400"
    },
    {
      border: true,
      color: "red",
      class: "dark:bg-transparent dark:text-red-400 border-red-400 dark:border-red-400"
    },
    {
      border: true,
      color: "orange",
      class: "dark:bg-transparent dark:text-orange-400 border-orange-400 dark:border-orange-400"
    },
    {
      border: true,
      color: "amber",
      class: "dark:bg-transparent dark:text-amber-400 border-amber-400 dark:border-amber-400"
    },
    {
      border: true,
      color: "yellow",
      class: "dark:bg-transparent dark:text-yellow-300 border-yellow-300 dark:border-yellow-300"
    },
    {
      border: true,
      color: "lime",
      class: "dark:bg-transparent dark:text-lime-400 border-lime-400 dark:border-lime-400"
    },
    {
      border: true,
      color: "green",
      class: "dark:bg-transparent dark:text-green-400 border-green-400 dark:border-green-400"
    },
    {
      border: true,
      color: "emerald",
      class: "dark:bg-transparent dark:text-emerald-400 border-emerald-400 dark:border-emerald-400"
    },
    {
      border: true,
      color: "teal",
      class: "dark:bg-transparent dark:text-teal-400 border-teal-400 dark:border-teal-400"
    },
    {
      border: true,
      color: "cyan",
      class: "dark:bg-transparent dark:text-cyan-400 border-cyan-400 dark:border-cyan-400"
    },
    {
      border: true,
      color: "sky",
      class: "dark:bg-transparent dark:text-sky-400 border-sky-400 dark:border-sky-400"
    },
    {
      border: true,
      color: "blue",
      class: "dark:bg-transparent dark:text-blue-400 border-blue-400 dark:border-blue-400"
    },
    {
      border: true,
      color: "indigo",
      class: "dark:bg-transparent dark:text-indigo-400 border-indigo-400 dark:border-indigo-400"
    },
    {
      border: true,
      color: "violet",
      class: "dark:bg-transparent dark:text-violet-400 border-violet-400 dark:border-violet-400"
    },
    {
      border: true,
      color: "purple",
      class: "dark:bg-transparent dark:text-purple-400 border-purple-400 dark:border-purple-400"
    },
    {
      border: true,
      color: "fuchsia",
      class: "dark:bg-transparent dark:text-fuchsia-400 border-fuchsia-400 dark:border-fuchsia-400"
    },
    {
      border: true,
      color: "pink",
      class: "dark:bg-transparent dark:text-pink-400 border-pink-400 dark:border-pink-400"
    },
    {
      border: true,
      color: "rose",
      class: "dark:bg-transparent dark:text-rose-400 border-rose-400 dark:border-rose-400"
    },
    {
      href: true,
      color: "primary",
      class: "hover:bg-primary-200"
    },
    {
      href: true,
      color: "secondary",
      class: "hover:bg-secondary-200"
    },
    {
      href: true,
      color: "gray",
      class: "hover:bg-gray-200"
    },
    {
      href: true,
      color: "red",
      class: "hover:bg-red-200"
    },
    {
      href: true,
      color: "orange",
      class: "hover:bg-orange-200"
    },
    {
      href: true,
      color: "amber",
      class: "hover:bg-amber-200"
    },
    {
      href: true,
      color: "yellow",
      class: "hover:bg-yellow-200"
    },
    {
      href: true,
      color: "lime",
      class: "hover:bg-lime-200"
    },
    {
      href: true,
      color: "green",
      class: "hover:bg-green-200"
    },
    {
      href: true,
      color: "emerald",
      class: "hover:bg-emerald-200"
    },
    {
      href: true,
      color: "teal",
      class: "hover:bg-teal-200"
    },
    {
      href: true,
      color: "cyan",
      class: "hover:bg-cyan-200"
    },
    {
      href: true,
      color: "sky",
      class: "hover:bg-sky-200"
    },
    {
      href: true,
      color: "blue",
      class: "hover:bg-blue-200"
    },
    {
      href: true,
      color: "indigo",
      class: "hover:bg-indigo-200"
    },
    {
      href: true,
      color: "violet",
      class: "hover:bg-violet-200"
    },
    {
      href: true,
      color: "purple",
      class: "hover:bg-purple-200"
    },
    {
      href: true,
      color: "fuchsia",
      class: "hover:bg-fuchsia-200"
    },
    {
      href: true,
      color: "pink",
      class: "hover:bg-pink-200"
    },
    {
      href: true,
      color: "rose",
      class: "hover:bg-rose-200"
    }
  ],
  defaultVariants: {
    color: "primary",
    size: "small",
    rounded: false
  }
});

// node_modules/flowbite-svelte/dist/banner/Banner.svelte
Banner[FILENAME] = "node_modules/flowbite-svelte/dist/banner/Banner.svelte";
var root_23 = add_locations(from_html(`<div class="flex items-center justify-end"><!></div>`), Banner[FILENAME], [[20, 6]]);
var root_14 = add_locations(from_html(`<div><div><!></div> <!></div>`), Banner[FILENAME], [[14, 2, [[15, 4]]]]);
function Banner($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Banner);
  let open = prop($$props, "open", 15, true), dismissable = prop($$props, "dismissable", 3, true), color = prop($$props, "color", 3, "gray"), transition2 = prop($$props, "transition", 3, fade), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "header",
      "open",
      "dismissable",
      "color",
      "type",
      "class",
      "innerClass",
      "transition",
      "params"
    ],
    "restProps"
  );
  const $$d = user_derived(() => banner({ type: $$props.type, color: color() })), base = user_derived(() => {
    let { base: $$1, insideDiv: $$2, dismissable: $$3 } = get($$d);
    return $$1;
  }), insideDiv = user_derived(() => {
    let { base: $$1, insideDiv: $$2, dismissable: $$3 } = get($$d);
    return $$2;
  }), dismissableClass = user_derived(() => {
    let { base: $$1, insideDiv: $$2, dismissable: $$3 } = get($$d);
    return $$3;
  });
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var div = root_14();
      let attributes;
      var div_1 = child(div);
      var node_1 = child(div_1);
      snippet(node_1, () => $$props.children ?? noop);
      reset(div_1);
      var node_2 = sibling(div_1, 2);
      {
        var consequent = ($$anchor3) => {
          var div_2 = root_23();
          var node_3 = child(div_2);
          const expression = user_derived(() => get(dismissableClass)());
          CloseButton_default(node_3, {
            get class() {
              return get(expression);
            },
            get color() {
              return color();
            },
            ariaLabel: "Remove banner",
            onclick: () => {
              open(false);
            }
          });
          reset(div_2);
          append($$anchor3, div_2);
        };
        if_block(node_2, ($$render) => {
          if (dismissable()) $$render(consequent);
        });
      }
      reset(div);
      template_effect(
        ($0, $1) => {
          attributes = set_attributes(div, attributes, { tabindex: "-1", class: $0, ...restProps });
          set_class(div_1, 1, $1);
        },
        [
          () => get(base)({ class: clsx_default($$props.class) }),
          () => clsx2(get(insideDiv)({ class: $$props.innerClass }))
        ]
      );
      transition(3, div, transition2, () => $$props.params);
      append($$anchor2, div);
    };
    if_block(node, ($$render) => {
      if (open()) $$render(consequent_1);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Banner = hmr(Banner, () => Banner[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Banner[HMR].source;
    set(Banner[HMR].source, module.default[HMR].original);
  });
}
var Banner_default = Banner;

// node_modules/flowbite-svelte/dist/banner/theme.js
var banner = ce({
  slots: {
    base: "fixed z-50 flex justify-between p-4 mx-auto dark:bg-gray-700 dark:border-gray-600",
    insideDiv: "flex flex-col md:flex-row md:items-center gap-2 mx-auto",
    dismissable: "absolute end-2.5 top-2.5 md:static md:end-auto md:top-auto"
  },
  variants: {
    type: {
      top: {
        base: "top-0 start-0 w-full border-b border-gray-200 bg-gray-50"
      },
      bottom: {
        base: "bottom-0 start-0 w-full border-t border-gray-200 bg-gray-50"
      }
    },
    color: {
      // 'primary' secondary, | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose'
      primary: { base: "bg-primary-50 dark:bg-primary-900" },
      secondary: { base: "bg-secondary-50 dark:bg-secondary-900" },
      gray: { base: "bg-gray-50 dark:bg-gray-700" },
      red: { base: "bg-red-50 dark:bg-red-900" },
      orange: { base: "bg-orange-50 dark:bg-orange-900" },
      amber: { base: "bg-amber-50 dark:bg-amber-900" },
      yellow: { base: "bg-yellow-50 dark:bg-yellow-900" },
      lime: { base: "bg-lime-50 dark:bg-lime-900" },
      green: { base: "bg-green-50 dark:bg-green-900" },
      emerald: { base: "bg-emerald-50 dark:bg-emerald-900" },
      teal: { base: "bg-teal-50 dark:bg-teal-900" },
      cyan: { base: "bg-cyan-50 dark:bg-cyan-900" },
      sky: { base: "bg-sky-50 dark:bg-sky-900" },
      blue: { base: "bg-blue-50 dark:bg-blue-900" },
      indigo: { base: "bg-indigo-50 dark:bg-indigo-900" },
      violet: { base: "bg-violet-50 dark:bg-violet-900" },
      purple: { base: "bg-purple-50 dark:bg-purple-900" },
      fuchsia: { base: "bg-fuchsia-50 dark:bg-fuchsia-900" },
      pink: { base: "bg-pink-50 dark:bg-pink-900" },
      rose: { base: "bg-rose-50 dark:bg-rose-900" }
    }
  },
  defaultVariants: {
    type: "top",
    multiline: true
  }
});

// node_modules/flowbite-svelte/dist/bottom-navigation/BottomNav.svelte
BottomNav[FILENAME] = "node_modules/flowbite-svelte/dist/bottom-navigation/BottomNav.svelte";
var root3 = add_locations(from_html(`<div><!> <div><!></div></div>`), BottomNav[FILENAME], [[26, 0, [[31, 2]]]]);
function BottomNav($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, BottomNav);
  let position = prop($$props, "position", 3, "fixed"), navType = prop($$props, "navType", 3, "default"), activeUrl = prop($$props, "activeUrl", 3, ""), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "header",
      "position",
      "navType",
      "outerClass",
      "innerClass",
      "activeClass",
      "activeUrl"
    ],
    "restProps"
  );
  const activeCls = twMerge("text-primary-700 dark:text-primary-700 hover:text-primary-900 dark:hover:text-primary-900", $$props.activeClass);
  const activeUrlStore = writable("");
  setContext("activeUrl", activeUrlStore);
  setContext("navType", navType());
  setContext("bottomNavType", { activeClass: activeCls });
  const { outer, inner } = bottomNav({
    position: position(),
    navType: navType()
  });
  const outerCls = user_derived(() => outer({ class: $$props.outerClass }));
  const innerCls = user_derived(() => inner({ class: $$props.innerClass }));
  user_effect(() => {
    activeUrlStore.set(activeUrl());
  });
  var div = root3();
  let attributes;
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.header);
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if ($$props.header) $$render(consequent);
    });
  }
  var div_1 = sibling(node, 2);
  var node_2 = child(div_1);
  snippet(node_2, () => $$props.children);
  reset(div_1);
  reset(div);
  template_effect(() => {
    attributes = set_attributes(div, attributes, { ...restProps, class: get(outerCls) });
    set_class(div_1, 1, clsx2(get(innerCls)));
  });
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BottomNav = hmr(BottomNav, () => BottomNav[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BottomNav[HMR].source;
    set(BottomNav[HMR].source, module.default[HMR].original);
  });
}
var BottomNav_default = BottomNav;

// node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavItem.svelte
BottomNavItem[FILENAME] = "node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavItem.svelte";
var root_15 = add_locations(from_html(`<a><!> <span> </span></a>`), BottomNavItem[FILENAME], [[53, 2, [[55, 4]]]]);
var root_24 = add_locations(from_html(`<button><!> <span> </span></button>`), BottomNavItem[FILENAME], [[58, 2, [[60, 4]]]]);
function BottomNavItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, BottomNavItem);
  let appBtnPosition = prop($$props, "appBtnPosition", 3, "middle"), href = prop($$props, "href", 3, ""), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "btnName",
      "appBtnPosition",
      "target",
      "activeClass",
      "href",
      "btnClass",
      "spanClass",
      "active"
    ],
    "restProps"
  );
  const navType = getContext("navType");
  const context = getContext("bottomNavType") ?? {};
  const activeUrlStore = getContext("activeUrl");
  let navUrl = state("");
  activeUrlStore.subscribe((value) => {
    set(navUrl, value, true);
  });
  const { base, span: span2 } = bottomNavItem({ navType, appBtnPosition: appBtnPosition() });
  let isActive = user_derived(() => strict_equals($$props.active, void 0, false) ? !!$$props.active : get(navUrl) ? strict_equals(href(), "/") ? strict_equals(get(navUrl), "/") : href() && (strict_equals(get(navUrl), href()) || get(navUrl).startsWith(href() + "/") || strict_equals(href(), "/", false) && get(navUrl).replace(/^https?:\/\/[^/]+/, "").startsWith(href())) : false);
  function getCommonClass() {
    return twMerge(base({ class: $$props.btnClass }), get(isActive) && ($$props.activeClass ?? context.activeClass));
  }
  function getSpanClass() {
    return twMerge(span2({ class: $$props.spanClass }), get(isActive) && ($$props.activeClass ?? context.activeClass));
  }
  const commonProps = user_derived(() => ({
    "aria-label": $$props.btnName,
    class: getCommonClass(),
    ...restProps
  }));
  const anchorProps = user_derived(() => ({
    ...get(commonProps),
    href: href(),
    target: $$props.target
  }));
  const buttonProps = user_derived(() => ({ ...get(commonProps), type: "button" }));
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var a = root_15();
      let attributes;
      var node_1 = child(a);
      snippet(node_1, () => $$props.children);
      var span_1 = sibling(node_1, 2);
      var text2 = child(span_1, true);
      reset(span_1);
      reset(a);
      template_effect(
        ($0) => {
          attributes = set_attributes(a, attributes, { ...get(anchorProps) });
          set_class(span_1, 1, $0);
          set_text(text2, $$props.btnName);
        },
        [() => clsx2(getSpanClass())]
      );
      append($$anchor2, a);
    };
    var alternate = ($$anchor2) => {
      var button2 = root_24();
      let attributes_1;
      var node_2 = child(button2);
      snippet(node_2, () => $$props.children);
      var span_2 = sibling(node_2, 2);
      var text_1 = child(span_2, true);
      reset(span_2);
      reset(button2);
      template_effect(
        ($0) => {
          attributes_1 = set_attributes(button2, attributes_1, { ...get(buttonProps) });
          set_class(span_2, 1, $0);
          set_text(text_1, $$props.btnName);
        },
        [() => clsx2(getSpanClass())]
      );
      append($$anchor2, button2);
    };
    if_block(node, ($$render) => {
      if (strict_equals(typeof href(), "string") && href().length > 0) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BottomNavItem = hmr(BottomNavItem, () => BottomNavItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BottomNavItem[HMR].source;
    set(BottomNavItem[HMR].source, module.default[HMR].original);
  });
}
var BottomNavItem_default = BottomNavItem;

// node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavHeaderItem.svelte
BottomNavHeaderItem[FILENAME] = "node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavHeaderItem.svelte";
var root4 = add_locations(from_html(`<button> </button>`), BottomNavHeaderItem[FILENAME], [[10, 0]]);
function BottomNavHeaderItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, BottomNavHeaderItem);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "itemName",
      "active",
      "class"
    ],
    "restProps"
  );
  let base = user_derived(() => bottomnavheaderitem({
    active: $$props.active,
    class: clsx_default($$props.class)
  }));
  var button2 = root4();
  let attributes;
  var text2 = child(button2, true);
  reset(button2);
  template_effect(() => {
    attributes = set_attributes(button2, attributes, { ...restProps, class: get(base) });
    set_text(text2, $$props.itemName);
  });
  append($$anchor, button2);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BottomNavHeaderItem = hmr(BottomNavHeaderItem, () => BottomNavHeaderItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BottomNavHeaderItem[HMR].source;
    set(BottomNavHeaderItem[HMR].source, module.default[HMR].original);
  });
}
var BottomNavHeaderItem_default = BottomNavHeaderItem;

// node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavHeader.svelte
BottomNavHeader[FILENAME] = "node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavHeader.svelte";
var root5 = add_locations(from_html(`<div><div role="group"><!></div></div>`), BottomNavHeader[FILENAME], [[9, 0, [[10, 2]]]]);
function BottomNavHeader($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, BottomNavHeader);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "outerClass",
      "innerClass"
    ],
    "restProps"
  );
  const $$d = user_derived(bottomnavheader), innerDiv = user_derived(() => {
    let { innerDiv: $$1, outerDiv: $$2 } = get($$d);
    return $$1;
  }), outerDiv = user_derived(() => {
    let { innerDiv: $$1, outerDiv: $$2 } = get($$d);
    return $$2;
  });
  var div = root5();
  let attributes;
  var div_1 = child(div);
  var node = child(div_1);
  snippet(node, () => $$props.children);
  reset(div_1);
  reset(div);
  template_effect(
    ($0, $1) => {
      attributes = set_attributes(div, attributes, { ...restProps, class: $0 });
      set_class(div_1, 1, $1);
    },
    [
      () => get(outerDiv)({ class: $$props.outerClass }),
      () => clsx2(get(innerDiv)({ class: $$props.innerClass }))
    ]
  );
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BottomNavHeader = hmr(BottomNavHeader, () => BottomNavHeader[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BottomNavHeader[HMR].source;
    set(BottomNavHeader[HMR].source, module.default[HMR].original);
  });
}
var BottomNavHeader_default = BottomNavHeader;

// node_modules/flowbite-svelte/dist/bottom-navigation/theme.js
var bottomNav = ce({
  slots: {
    outer: "w-full z-30 border-gray-200 dark:bg-gray-700 dark:border-gray-600",
    inner: "grid h-full max-w-lg mx-auto"
  },
  variants: {
    position: {
      static: { outer: "static" },
      fixed: { outer: "fixed" },
      absolute: { outer: "absolute" },
      relative: { outer: "relative" },
      sticky: { outer: "sticky" }
    },
    navType: {
      default: { outer: "bottom-0 start-0 h-16 bg-white border-t" },
      border: { outer: "bottom-0 start-0 h-16 bg-white border-t" },
      application: {
        outer: "h-16 max-w-lg -translate-x-1/2 rtl:translate-x-1/2 bg-white border rounded-full bottom-4 start-1/2"
      },
      pagination: {
        outer: "bottom-0 h-16 -translate-x-1/2 rtl:translate-x-1/2 bg-white border-t start-1/2"
      },
      group: {
        outer: "bottom-0 -translate-x-1/2 rtl:translate-x-1/2 bg-white border-t start-1/2"
      },
      card: { outer: "bottom-0 start-0 h-16 bg-white border-t" },
      meeting: {
        outer: "bottom-0 start-0 grid h-16 grid-cols-1 px-8 bg-white border-t md:grid-cols-3",
        inner: "flex items-center justify-center mx-auto"
      },
      video: {
        outer: "bottom-0 start-0 grid h-24 grid-cols-1 px-8 bg-white border-t md:grid-cols-3",
        inner: "flex items-center w-full"
      }
    }
  },
  defaultVariants: {
    position: "fixed",
    navType: "default"
  }
});
var bottomNavItem = ce({
  slots: {
    base: "inline-flex flex-col items-center justify-center",
    span: "text-sm"
  },
  variants: {
    navType: {
      default: {
        base: "px-5 hover:bg-gray-50 dark:hover:bg-gray-800 group",
        span: "text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-500"
      },
      border: {
        base: "px-5 border-gray-200 border-x hover:bg-gray-50 dark:hover:bg-gray-800 group dark:border-gray-600",
        span: "text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-500"
      },
      application: {
        base: "",
        span: "sr-only"
      },
      pagination: {
        base: "px-5 hover:bg-gray-50 dark:hover:bg-gray-800 group",
        span: "sr-only"
      },
      group: {
        base: "p-4 hover:bg-gray-50 dark:hover:bg-gray-800 group",
        span: "sr-only"
      },
      card: {
        base: "px-5 hover:bg-gray-50 dark:hover:bg-gray-800 group",
        span: "text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-500"
      },
      meeting: {
        base: "",
        span: ""
      },
      video: {
        base: "",
        span: ""
      }
    },
    appBtnPosition: {
      left: {
        base: "px-5 rounded-s-full hover:bg-gray-50 dark:hover:bg-gray-800 group"
      },
      middle: { base: "px-5 hover:bg-gray-50 dark:hover:bg-gray-800 group" },
      right: {
        base: "px-5 rounded-e-full hover:bg-gray-50 dark:hover:bg-gray-800 group"
      }
    }
  },
  defaultVariants: {
    navType: "default",
    appBtnPosition: "middle",
    active: false
  }
});
var bottomnavheader = ce({
  slots: {
    innerDiv: "grid max-w-xs grid-cols-3 gap-1 p-1 mx-auto my-2 bg-gray-100 rounded-lg dark:bg-gray-600",
    outerDiv: "w-full"
  }
});
var bottomnavheaderitem = ce({
  base: "px-5 py-1.5 text-xs font-medium rounded-lg",
  variants: {
    active: {
      true: "text-white bg-gray-900 dark:bg-gray-300 dark:text-gray-900",
      false: "text-gray-900 hover:bg-gray-200 dark:text-white dark:hover:bg-gray-700"
    }
  }
});

// node_modules/flowbite-svelte/dist/breadcrumb/Breadcrumb.svelte
Breadcrumb[FILENAME] = "node_modules/flowbite-svelte/dist/breadcrumb/Breadcrumb.svelte";
var root6 = add_locations(from_html(`<nav><ol><!></ol></nav>`), Breadcrumb[FILENAME], [[19, 0, [[20, 2]]]]);
function Breadcrumb($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Breadcrumb);
  let solid = prop($$props, "solid", 3, false), ariaLabel = prop($$props, "ariaLabel", 3, "Breadcrumb"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "solid",
      "class",
      "olClass",
      "ariaLabel"
    ],
    "restProps"
  );
  const context = getContext("themeConfig");
  const breadcrumbTheme = (context == null ? void 0 : context.breadcrumb) || breadcrumb;
  const { nav, list: list2 } = breadcrumbTheme({ solid: solid() });
  let classNav = user_derived(() => nav({ class: clsx_default($$props.class) }));
  let classList = user_derived(() => list2({ class: $$props.olClass }));
  var nav_1 = root6();
  let attributes;
  var ol = child(nav_1);
  var node = child(ol);
  snippet(node, () => $$props.children);
  reset(ol);
  reset(nav_1);
  template_effect(() => {
    attributes = set_attributes(nav_1, attributes, {
      "aria-label": ariaLabel(),
      ...restProps,
      class: get(classNav)
    });
    set_class(ol, 1, clsx2(get(classList)));
  });
  append($$anchor, nav_1);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Breadcrumb = hmr(Breadcrumb, () => Breadcrumb[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Breadcrumb[HMR].source;
    set(Breadcrumb[HMR].source, module.default[HMR].original);
  });
}
var Breadcrumb_default = Breadcrumb;

// node_modules/flowbite-svelte/dist/breadcrumb/BreadcrumbItem.svelte
BreadcrumbItem[FILENAME] = "node_modules/flowbite-svelte/dist/breadcrumb/BreadcrumbItem.svelte";
var root_34 = add_locations(from_svg(`<svg class="me-2 h-4 w-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path></svg>`), BreadcrumbItem[FILENAME], [[22, 8, [[23, 10]]]]);
var root_16 = add_locations(from_html(`<a><!> <!></a>`), BreadcrumbItem[FILENAME], [[18, 4]]);
var root_63 = add_locations(from_svg(`<svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>`), BreadcrumbItem[FILENAME], [[33, 6, [[34, 8]]]]);
var root_7 = add_locations(from_html(`<a><!></a>`), BreadcrumbItem[FILENAME], [[39, 6]]);
var root_8 = add_locations(from_html(`<span><!></span>`), BreadcrumbItem[FILENAME], [[43, 6]]);
var root_4 = add_locations(from_html(`<!> <!>`, 1), BreadcrumbItem[FILENAME], []);
var root7 = add_locations(from_html(`<li><!></li>`), BreadcrumbItem[FILENAME], [[16, 0]]);
function BreadcrumbItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, BreadcrumbItem);
  let home = prop($$props, "home", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "icon",
      "home",
      "href",
      "linkClass",
      "spanClass",
      "homeClass",
      "class"
    ],
    "restProps"
  );
  const { item, icon: breacrumbIcon } = breadcrumb({
    home: home(),
    hasHref: !!$$props.href,
    class: clsx_default($$props.class)
  });
  var li = root7();
  let attributes;
  var node = child(li);
  {
    var consequent_1 = ($$anchor2) => {
      var a = root_16();
      var node_1 = child(a);
      {
        var consequent = ($$anchor3) => {
          var fragment = comment();
          var node_2 = first_child(fragment);
          snippet(node_2, () => $$props.icon);
          append($$anchor3, fragment);
        };
        var alternate = ($$anchor3) => {
          var svg = root_34();
          append($$anchor3, svg);
        };
        if_block(node_1, ($$render) => {
          if ($$props.icon) $$render(consequent);
          else $$render(alternate, false);
        });
      }
      var node_3 = sibling(node_1, 2);
      snippet(node_3, () => $$props.children);
      reset(a);
      template_effect(
        ($0) => {
          set_class(a, 1, $0);
          set_attribute(a, "href", $$props.href);
        },
        [
          () => clsx2(item({ home: true, class: $$props.homeClass }))
        ]
      );
      append($$anchor2, a);
    };
    var alternate_1 = ($$anchor2) => {
      var fragment_1 = root_4();
      var node_4 = first_child(fragment_1);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_5 = first_child(fragment_2);
          snippet(node_5, () => $$props.icon);
          append($$anchor3, fragment_2);
        };
        var alternate_2 = ($$anchor3) => {
          var svg_1 = root_63();
          template_effect(($0) => set_class(svg_1, 0, $0), [() => clsx2(breacrumbIcon())]);
          append($$anchor3, svg_1);
        };
        if_block(node_4, ($$render) => {
          if ($$props.icon) $$render(consequent_2);
          else $$render(alternate_2, false);
        });
      }
      var node_6 = sibling(node_4, 2);
      {
        var consequent_3 = ($$anchor3) => {
          var a_1 = root_7();
          var node_7 = child(a_1);
          snippet(node_7, () => $$props.children);
          reset(a_1);
          template_effect(
            ($0) => {
              set_class(a_1, 1, $0);
              set_attribute(a_1, "href", $$props.href);
            },
            [
              () => clsx2(twMerge(item({ home: false, hasHref: true }), $$props.linkClass))
            ]
          );
          append($$anchor3, a_1);
        };
        var alternate_3 = ($$anchor3) => {
          var span2 = root_8();
          var node_8 = child(span2);
          snippet(node_8, () => $$props.children);
          reset(span2);
          template_effect(($0) => set_class(span2, 1, $0), [
            () => clsx2(twMerge(item({ home: false, hasHref: false }), $$props.spanClass))
          ]);
          append($$anchor3, span2);
        };
        if_block(node_6, ($$render) => {
          if ($$props.href) $$render(consequent_3);
          else $$render(alternate_3, false);
        });
      }
      append($$anchor2, fragment_1);
    };
    if_block(node, ($$render) => {
      if (home()) $$render(consequent_1);
      else $$render(alternate_1, false);
    });
  }
  reset(li);
  template_effect(($0) => attributes = set_attributes(li, attributes, { ...restProps, class: $0 }), [item]);
  append($$anchor, li);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BreadcrumbItem = hmr(BreadcrumbItem, () => BreadcrumbItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BreadcrumbItem[HMR].source;
    set(BreadcrumbItem[HMR].source, module.default[HMR].original);
  });
}
var BreadcrumbItem_default = BreadcrumbItem;

// node_modules/flowbite-svelte/dist/breadcrumb/theme.js
var breadcrumb = ce({
  slots: {
    nav: "flex",
    list: "inline-flex items-center space-x-1 rtl:space-x-reverse md:space-x-3 rtl:space-x-reverse",
    item: "inline-flex items-center",
    icon: "h-6 w-6 text-gray-400 rtl:-scale-x-100"
  },
  variants: {
    solid: {
      true: {
        nav: "px-5 py-3 text-gray-700 border border-gray-200 rounded-lg bg-gray-50 dark:bg-gray-800 dark:border-gray-700"
      },
      false: ""
    },
    home: {
      true: "",
      false: ""
    },
    hasHref: {
      true: "",
      false: ""
    }
  },
  compoundVariants: [
    {
      home: true,
      class: {
        item: "inline-flex items-center text-sm font-medium text-gray-700 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white",
        icon: "me-2 h-4 w-4"
      }
    },
    {
      home: false,
      hasHref: true,
      class: {
        item: "ms-1 text-sm font-medium text-gray-700 hover:text-gray-900 md:ms-2 dark:text-gray-400 dark:hover:text-white"
      }
    },
    {
      home: false,
      hasHref: false,
      class: {
        item: "ms-1 text-sm font-medium text-gray-500 md:ms-2 dark:text-gray-400"
      }
    }
  ],
  defaultVariants: {
    solid: false
  }
});

// node_modules/flowbite-svelte/dist/button-group/ButtonGroup.svelte
ButtonGroup[FILENAME] = "node_modules/flowbite-svelte/dist/button-group/ButtonGroup.svelte";
var root8 = add_locations(from_html(`<div><!></div>`), ButtonGroup[FILENAME], [[13, 0]]);
function ButtonGroup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ButtonGroup);
  let size = prop($$props, "size", 3, "md"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "size",
      "disabled",
      "class"
    ],
    "restProps"
  );
  let groupClass = user_derived(() => buttonGroup({ size: size(), className: $$props.class }));
  setContext("group", size());
  setContext("disabled", $$props.disabled);
  var div = root8();
  let attributes;
  var node = child(div);
  snippet(node, () => $$props.children);
  reset(div);
  template_effect(() => attributes = set_attributes(div, attributes, {
    ...restProps,
    class: get(groupClass),
    role: "group"
  }));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ButtonGroup = hmr(ButtonGroup, () => ButtonGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ButtonGroup[HMR].source;
    set(ButtonGroup[HMR].source, module.default[HMR].original);
  });
}
var ButtonGroup_default = ButtonGroup;

// node_modules/flowbite-svelte/dist/button-group/theme.js
var buttonGroup = ce({
  base: "inline-flex rounded-lg shadow-xs",
  variants: {
    size: {
      sm: "scale-90",
      md: "scale-100",
      lg: "scale-110"
    }
  },
  defaultVariants: {
    size: "md"
  }
});

// node_modules/flowbite-svelte/dist/buttons/Button.svelte
Button[FILENAME] = "node_modules/flowbite-svelte/dist/buttons/Button.svelte";
var root_17 = add_locations(from_html(`<button><!></button>`), Button[FILENAME], [[22, 2]]);
var root_35 = add_locations(from_html(`<a><!></a>`), Button[FILENAME], [[26, 2]]);
function Button($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Button);
  const group2 = getContext("group");
  const ctxDisabled = getContext("disabled");
  let outline = prop($$props, "outline", 3, false), size = prop($$props, "size", 3, "md"), color = prop($$props, "color", 3, "primary"), shadow = prop($$props, "shadow", 3, false), tag = prop($$props, "tag", 3, "button"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "onclick",
      "pill",
      "outline",
      "size",
      "color",
      "shadow",
      "tag",
      "disabled",
      "class"
    ],
    "restProps"
  );
  let actualSize = user_derived(() => group2 ? "sm" : size());
  let actualColor = user_derived(() => group2 ? outline() ? "dark" : "alternative" : color());
  let isDisabled = user_derived(() => Boolean(ctxDisabled) || Boolean($$props.disabled));
  const $$d = user_derived(() => button({
    color: get(actualColor),
    size: get(actualSize),
    disabled: get(isDisabled),
    pill: $$props.pill,
    group: !!group2
  })), base = user_derived(() => {
    let { base: $$1, outline: $$2, shadow: $$3 } = get($$d);
    return $$1;
  }), outline_ = user_derived(() => {
    let { base: $$1, outline: $$2, shadow: $$3 } = get($$d);
    return $$2;
  }), shadow_ = user_derived(() => {
    let { base: $$1, outline: $$2, shadow: $$3 } = get($$d);
    return $$3;
  });
  let btnCls = user_derived(() => twMerge(get(base)(), outline() && get(outline_)(), shadow() && get(shadow_)(), clsx_default($$props.class)));
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var button_1 = root_17();
      let attributes;
      var node_1 = child(button_1);
      snippet(node_1, () => $$props.children ?? noop);
      reset(button_1);
      template_effect(() => attributes = set_attributes(button_1, attributes, {
        type: "button",
        ...restProps,
        class: get(btnCls),
        disabled: get(isDisabled),
        onclick: $$props.onclick
      }));
      append($$anchor2, button_1);
    };
    var alternate = ($$anchor2, $$elseif) => {
      {
        var consequent_1 = ($$anchor3) => {
          var a = root_35();
          let attributes_1;
          var node_2 = child(a);
          snippet(node_2, () => $$props.children ?? noop);
          reset(a);
          template_effect(() => attributes_1 = set_attributes(a, attributes_1, {
            ...restProps,
            class: get(btnCls),
            role: "button"
          }));
          append($$anchor3, a);
        };
        var alternate_1 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_3 = first_child(fragment_1);
          validate_void_dynamic_element(tag);
          validate_dynamic_element_tag(tag);
          element(
            node_3,
            tag,
            false,
            ($$element, $$anchor4) => {
              let attributes_2;
              template_effect(() => attributes_2 = set_attributes($$element, attributes_2, { ...restProps, class: get(btnCls) }));
              var fragment_2 = comment();
              var node_4 = first_child(fragment_2);
              snippet(node_4, () => $$props.children ?? noop);
              append($$anchor4, fragment_2);
            },
            void 0,
            [30, 2]
          );
          append($$anchor3, fragment_1);
        };
        if_block(
          $$anchor2,
          ($$render) => {
            if ($$props.href) $$render(consequent_1);
            else $$render(alternate_1, false);
          },
          $$elseif
        );
      }
    };
    if_block(node, ($$render) => {
      if (strict_equals($$props.href, void 0)) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Button = hmr(Button, () => Button[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Button[HMR].source;
    set(Button[HMR].source, module.default[HMR].original);
  });
}
var Button_default = Button;

// node_modules/flowbite-svelte/dist/buttons/GradientButton.svelte
GradientButton[FILENAME] = "node_modules/flowbite-svelte/dist/buttons/GradientButton.svelte";
var root_18 = add_locations(from_html(`<div><!></div>`), GradientButton[FILENAME], [[17, 2]]);
function GradientButton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, GradientButton);
  const group2 = getContext("group");
  let color = prop($$props, "color", 3, "blue"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "outline",
      "pill",
      "color",
      "shadow",
      "class",
      "href",
      "disabled",
      "size"
    ],
    "restProps"
  );
  const $$d = user_derived(() => gradientButton({
    color: color(),
    outline: $$props.outline,
    pill: $$props.pill,
    shadow: $$props.shadow,
    disabled: $$props.disabled,
    size: $$props.size,
    group: !!group2
  })), base = user_derived(() => {
    let { base: $$1, outlineWrapper: $$2 } = get($$d);
    return $$1;
  }), outlineWrapper = user_derived(() => {
    let { base: $$1, outlineWrapper: $$2 } = get($$d);
    return $$2;
  });
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_18();
      var node_1 = child(div);
      const expression = user_derived(() => get(outlineWrapper)());
      Button_default(node_1, spread_props(() => restProps, {
        get class() {
          return get(expression);
        },
        get disabled() {
          return $$props.disabled;
        },
        get href() {
          return $$props.href;
        },
        get size() {
          return $$props.size;
        },
        children: wrap_snippet(GradientButton, ($$anchor3, $$slotProps) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          snippet(node_2, () => $$props.children ?? noop);
          append($$anchor3, fragment_1);
        }),
        $$slots: { default: true }
      }));
      reset(div);
      template_effect(($0) => set_class(div, 1, $0), [
        () => clsx2(get(base)({ class: clsx_default($$props.class) }))
      ]);
      append($$anchor2, div);
    };
    var alternate = ($$anchor2) => {
      var fragment_2 = comment();
      var node_3 = first_child(fragment_2);
      const expression_1 = user_derived(() => get(base)({ class: clsx_default($$props.class) }));
      Button_default(node_3, spread_props(() => restProps, {
        get class() {
          return get(expression_1);
        },
        get disabled() {
          return $$props.disabled;
        },
        get href() {
          return $$props.href;
        },
        get size() {
          return $$props.size;
        },
        children: wrap_snippet(GradientButton, ($$anchor3, $$slotProps) => {
          var fragment_3 = comment();
          var node_4 = first_child(fragment_3);
          snippet(node_4, () => $$props.children ?? noop);
          append($$anchor3, fragment_3);
        }),
        $$slots: { default: true }
      }));
      append($$anchor2, fragment_2);
    };
    if_block(node, ($$render) => {
      if ($$props.outline) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GradientButton = hmr(GradientButton, () => GradientButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GradientButton[HMR].source;
    set(GradientButton[HMR].source, module.default[HMR].original);
  });
}
var GradientButton_default = GradientButton;

// node_modules/flowbite-svelte/dist/buttons/theme.js
var button = ce({
  slots: {
    base: "text-center font-medium inline-flex items-center justify-center",
    outline: "bg-transparent border hover:text-white dark:bg-transparent dark:hover-text-white",
    shadow: "shadow-lg"
  },
  variants: {
    color: {
      // "primary" | "dark" | "alternative" | "light" | "secondary" | "gray" | "red" | "orange" | "amber" | "yellow" | "lime" | "green" | "emerald" | "teal" | "cyan" | "sky" | "blue" | "indigo" | "violet" | "purple" | "fuchsia" | "pink" | "rose"
      primary: {
        base: "text-white bg-primary-700 hover:bg-primary-800 dark:bg-primary-600 dark:hover:bg-primary-700 focus-within:ring-primary-300 dark:focus-within:ring-primary-800",
        outline: "text-primary-700 border-primary-700 hover:bg-primary-800 dark:border-primary-500 dark:text-primary-500 dark:hover:bg-primary-600",
        shadow: "shadow-primary-500/50 dark:shadow-primary-800/80"
      },
      dark: {
        base: "text-white bg-gray-800 hover:bg-gray-900 dark:bg-gray-800 dark:hover:bg-gray-700 focus-within:ring-gray-300 dark:focus-within:ring-gray-700",
        outline: "text-gray-900 border-gray-800 hover:bg-gray-900 dark:border-gray-600 dark:text-gray-400 dark:hover:bg-gray-600",
        shadow: "shadow-gray-500/50 gray:shadow-gray-800/80"
      },
      alternative: {
        base: "text-gray-900 bg-transparent border border-gray-200 dark:border-gray-600 hover:bg-gray-100 dark:bg-gray-800 dark:text-gray-400 hover:text-primary-700 focus-within:text-primary-700 dark:focus-within:text-white dark:hover:text-white dark:hover:bg-gray-700 focus-within:ring-gray-200 dark:focus-within:ring-gray-700",
        outline: "text-gray-700 border-gray-700 hover:bg-gray-800 dark:border-gray-400 dark:text-gray-400 dark:hover:bg-gray-500",
        shadow: "_shadow-gray-500/50 dark:shadow-gray-800/80"
      },
      light: {
        base: "text-gray-900 bg-white border border-gray-300 hover:bg-gray-100 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 focus-within:ring-gray-200 dark:focus-within:ring-gray-700",
        outline: "text-gray-700 border-gray-700 hover:bg-gray-800 dark:border-gray-400 dark:text-gray-400 dark:hover:bg-gray-500",
        shadow: "shadow-gray-500/50 dark:shadow-gray-800/80"
      },
      secondary: {
        base: "text-white bg-secondary-700 hover:bg-secondary-800 dark:bg-secondary-600 dark:hover:bg-secondary-700 focus-within:ring-secondary-300 dark:focus-within:ring-secondary-800",
        outline: "text-secondary-700 border-secondary-700 hover:bg-secondary-800 dark:border-secondary-400 dark:text-secondary-400 dark:hover:bg-secondary-500",
        shadow: "shadow-secondary-500/50 dark:shadow-secondary-800/80"
      },
      gray: {
        base: "text-white bg-gray-700 hover:bg-gray-800 dark:bg-gray-600 dark:hover:bg-gray-700 focus-within:ring-gray-300 dark:focus-within:ring-gray-800",
        outline: "text-gray-700 border-gray-700 hover:bg-gray-800 dark:border-gray-400 dark:text-gray-400 dark:hover:bg-gray-500",
        shadow: "shadow-gray-500/50 dark:shadow-gray-800/80"
      },
      red: {
        base: "text-white bg-red-700 hover:bg-red-800 dark:bg-red-600 dark:hover:bg-red-700 focus-within:ring-red-300 dark:focus-within:ring-red-900",
        outline: "text-red-700 border-red-700 hover:bg-red-800 dark:border-red-500 dark:text-red-500 dark:hover:bg-red-600",
        shadow: "shadow-red-500/50 dark:shadow-red-800/80"
      },
      orange: {
        base: "text-white bg-orange-700 hover:bg-orange-800 dark:bg-orange-600 dark:hover:bg-orange-700 focus-within:ring-orange-300 dark:focus-within:ring-orange-900",
        outline: "text-orange-700 border-orange-700 hover:bg-orange-800 dark:border-orange-400 dark:text-orange-400 dark:hover:bg-orange-500",
        shadow: "shadow-orange-500/50 dark:shadow-orange-800/80"
      },
      amber: {
        base: "text-white bg-amber-700 hover:bg-amber-800 dark:bg-amber-600 dark:hover:bg-amber-700 focus-within:ring-amber-300 dark:focus-within:ring-amber-900",
        outline: "text-amber-700 border-amber-700 hover:bg-amber-800 dark:border-amber-400 dark:text-amber-400 dark:hover:bg-amber-500",
        shadow: "shadow-amber-500/50 dark:shadow-amber-800/80"
      },
      yellow: {
        base: "text-white bg-yellow-400 hover:bg-yellow-500 focus-within:ring-yellow-300 dark:focus-within:ring-yellow-900",
        outline: "text-yellow-400 border-yellow-400 hover:bg-yellow-500 dark:border-yellow-300 dark:text-yellow-300 dark:hover:bg-yellow-400",
        shadow: "shadow-yellow-500/50 dark:shadow-yellow-800/80"
      },
      lime: {
        base: "text-white bg-lime-700 hover:bg-lime-800 dark:bg-lime-600 dark:hover:bg-lime-700 focus-within:ring-lime-300 dark:focus-within:ring-lime-800",
        outline: "text-lime-700 border-lime-700 hover:bg-lime-800 dark:border-lime-400 dark:text-lime-400 dark:hover:bg-lime-500",
        shadow: "shadow-lime-500/50 dark:shadow-lime-800/80"
      },
      green: {
        base: "text-white bg-green-700 hover:bg-green-800 dark:bg-green-600 dark:hover:bg-green-700 focus-within:ring-green-300 dark:focus-within:ring-green-800",
        outline: "text-green-700 border-green-700 hover:bg-green-800 dark:border-green-500 dark:text-green-500 dark:hover:bg-green-600",
        shadow: "shadow-green-500/50 dark:shadow-green-800/80"
      },
      emerald: {
        base: "text-white bg-emerald-700 hover:bg-emerald-800 dark:bg-emerald-600 dark:hover:bg-emerald-700 focus-within:ring-emerald-300 dark:focus-within:ring-emerald-800",
        outline: "text-emerald-700 border-emerald-700 hover:bg-emerald-800 dark:border-emerald-400 dark:text-emerald-400 dark:hover:bg-emerald-500",
        shadow: "shadow-emerald-500/50 dark:shadow-emerald-800/80"
      },
      teal: {
        base: "text-white bg-teal-700 hover:bg-teal-800 dark:bg-teal-600 dark:hover:bg-teal-700 focus-within:ring-teal-300 dark:focus-within:ring-teal-800",
        outline: "text-teal-700 border-teal-700 hover:bg-teal-800 dark:border-teal-400 dark:text-teal-400 dark:hover:bg-teal-500",
        shadow: "shadow-teal-500/50 dark:shadow-teal-800/80"
      },
      cyan: {
        base: "text-white bg-cyan-700 hover:bg-cyan-800 dark:bg-cyan-600 dark:hover:bg-cyan-700 focus-within:ring-cyan-300 dark:focus-within:ring-cyan-800",
        outline: "text-cyan-700 border-cyan-700 hover:bg-cyan-800 dark:border-cyan-400 dark:text-cyan-400 dark:hover:bg-cyan-500",
        shadow: "shadow-cyan-500/50 dark:shadow-cyan-800/80"
      },
      sky: {
        base: "text-white bg-sky-700 hover:bg-sky-800 dark:bg-sky-600 dark:hover:bg-sky-700 focus-within:ring-sky-300 dark:focus-within:ring-sky-800",
        outline: "text-sky-700 border-sky-700 hover:bg-sky-800 dark:border-sky-400 dark:text-sky-400 dark:hover:bg-sky-500",
        shadow: "shadow-sky-500/50 dark:shadow-sky-800/80"
      },
      blue: {
        base: "text-white bg-blue-700 hover:bg-blue-800 dark:bg-blue-600 dark:hover:bg-blue-700 focus-within:ring-blue-300 dark:focus-within:ring-blue-800",
        outline: "text-blue-700 border-blue-700 hover:bg-blue-800 dark:border-blue-500 dark:text-blue-500 dark:hover:bg-blue-500",
        shadow: "shadow-blue-500/50 dark:shadow-blue-800/80"
      },
      indigo: {
        base: "text-white bg-indigo-700 hover:bg-indigo-800 dark:bg-indigo-600 dark:hover:bg-indigo-700 focus-within:ring-indigo-300 dark:focus-within:ring-indigo-800",
        outline: "text-indigo-700 border-indigo-700 hover:bg-indigo-800 dark:border-indigo-400 dark:text-indigo-400 dark:hover:bg-indigo-500",
        shadow: "shadow-indigo-500/50 dark:shadow-indigo-800/80"
      },
      violet: {
        base: "text-white bg-violet-700 hover:bg-violet-800 dark:bg-violet-600 dark:hover:bg-violet-700 focus-within:ring-violet-300 dark:focus-within:ring-violet-800",
        outline: "text-violet-700 border-violet-700 hover:bg-violet-800 dark:border-violet-400 dark:text-violet-400 dark:hover:bg-violet-500",
        shadow: "shadow-violet-500/50 dark:shadow-violet-800/80"
      },
      purple: {
        base: "text-white bg-purple-700 hover:bg-purple-800 dark:bg-purple-600 dark:hover:bg-purple-700",
        outline: "text-purple-700 border-purple-700 hover:bg-purple-800 dark:border-purple-400 dark:text-purple-400 dark:hover:bg-purple-500",
        shadow: "shadow-purple-500/50 dark:shadow-purple-800/80"
      },
      fuchsia: {
        base: "text-white bg-fuchsia-700 hover:bg-fuchsia-800 dark:bg-fuchsia-600 dark:hover:bg-fuchsia-700",
        outline: "text-fuchsia-700 border-fuchsia-700 hover:bg-fuchsia-800 dark:border-fuchsia-400 dark:text-fuchsia-400 dark:hover:bg-fuchsia-500",
        shadow: "shadow-fuchsia-500/50 dark:shadow-fuchsia-800/80"
      },
      pink: {
        base: "text-white bg-pink-700 hover:bg-pink-800 dark:bg-pink-600 dark:hover:bg-pink-700",
        outline: "text-pink-700 border-pink-700 hover:bg-pink-800 dark:border-pink-400 dark:text-pink-400 dark:hover:bg-pink-500",
        shadow: "shadow-pink-500/50 dark:shadow-pink-800/80"
      },
      rose: {
        base: "text-white bg-rose-700 hover:bg-rose-800 dark:bg-rose-600 dark:hover:bg-rose-700",
        outline: "text-rose-700 border-rose-700 hover:bg-rose-800 dark:border-rose-400 dark:text-rose-400 dark:hover:bg-rose-500",
        shadow: "shadow-rose-500/50 dark:shadow-rose-800/80"
      }
    },
    size: {
      xs: "px-3 py-2 text-xs",
      sm: "px-4 py-2 text-sm",
      md: "px-5 py-2.5 text-sm",
      lg: "px-5 py-3 text-base",
      xl: "px-6 py-3.5 text-base"
    },
    group: {
      true: "focus-within:ring-2 focus-within:z-10 [&:not(:first-child)]:rounded-s-none [&:not(:last-child)]:rounded-e-none [&:not(:last-child)]:border-e-0",
      false: "focus-within:ring-4 focus-within:outline-hidden"
    },
    disabled: {
      true: "cursor-not-allowed opacity-50",
      false: ""
    },
    pill: {
      true: "rounded-full",
      false: "rounded-lg"
    },
    checked: {
      true: "",
      false: ""
    }
  },
  compoundVariants: [],
  defaultVariants: {
    pill: false
  }
});
var gradientButton = ce({
  slots: {
    base: "inline-flex items-center justify-center transition-all duration-75 ease-in text-white bg-linear-to-r ",
    outlineWrapper: "inline-flex items-center justify-center w-full border-0!"
  },
  variants: {
    color: {
      blue: { base: "from-blue-500 via-blue-600 to-blue-700 hover:bg-linear-to-br focus:ring-blue-300 dark:focus:ring-blue-800" },
      green: { base: "from-green-400 via-green-500 to-green-600 hover:bg-linear-to-br focus:ring-green-300 dark:focus:ring-green-800" },
      cyan: { base: "text-white bg-linear-to-r from-cyan-400 via-cyan-500 to-cyan-600 hover:bg-linear-to-br focus:ring-cyan-300 dark:focus:ring-cyan-800" },
      teal: { base: "text-white bg-linear-to-r from-teal-400 via-teal-500 to-teal-600 hover:bg-linear-to-br focus:ring-teal-300 dark:focus:ring-teal-800" },
      lime: { base: "text-gray-900 bg-linear-to-r from-lime-200 via-lime-400 to-lime-500 hover:bg-linear-to-br focus:ring-lime-300 dark:focus:ring-lime-800" },
      red: { base: "text-white bg-linear-to-r from-red-400 via-red-500 to-red-600 hover:bg-linear-to-br focus:ring-red-300 dark:focus:ring-red-800" },
      pink: { base: "text-white bg-linear-to-r from-pink-400 via-pink-500 to-pink-600 hover:bg-linear-to-br focus:ring-pink-300 dark:focus:ring-pink-800" },
      purple: { base: "text-white bg-linear-to-r from-purple-500 via-purple-600 to-purple-700 hover:bg-linear-to-br focus:ring-purple-300 dark:focus:ring-purple-800" },
      purpleToBlue: { base: "text-white bg-linear-to-br from-purple-600 to-blue-500 hover:bg-linear-to-bl focus:ring-blue-300 dark:focus:ring-blue-800" },
      cyanToBlue: { base: "text-white bg-linear-to-r from-cyan-500 to-blue-500 hover:bg-linear-to-bl focus:ring-cyan-300 dark:focus:ring-cyan-800" },
      greenToBlue: { base: "text-white bg-linear-to-br from-green-400 to-blue-600 hover:bg-linear-to-bl focus:ring-green-200 dark:focus:ring-green-800" },
      purpleToPink: { base: "text-white bg-linear-to-r from-purple-500 to-pink-500 hover:bg-linear-to-l focus:ring-purple-200 dark:focus:ring-purple-800" },
      pinkToOrange: { base: "text-white bg-linear-to-br from-pink-500 to-orange-400 hover:bg-linear-to-bl focus:ring-pink-200 dark:focus:ring-pink-800" },
      tealToLime: { base: "text-gray-900 bg-linear-to-r from-teal-200 to-lime-200 hover:bg-linear-to-l focus:ring-lime-200 dark:focus:ring-teal-700" },
      redToYellow: { base: "text-gray-900 bg-linear-to-r from-red-200 via-red-300 to-yellow-200 hover:bg-linear-to-bl focus:ring-red-100 dark:focus:ring-red-400" }
    },
    outline: {
      true: {
        base: "p-0.5",
        outlineWrapper: "bg-white text-gray-900! dark:bg-gray-900 dark:text-white! hover:bg-transparent hover:text-inherit! group-hover:opacity-0! group-hover:text-inherit!"
      }
    },
    pill: {
      true: {
        base: "rounded-full",
        outlineWrapper: "rounded-full"
      },
      false: {
        base: "rounded-lg",
        outlineWrapper: "rounded-lg"
      }
    },
    size: {
      xs: "px-3 py-2 text-xs",
      sm: "px-4 py-2 text-sm",
      md: "px-5 py-2.5 text-sm",
      lg: "px-5 py-3 text-base",
      xl: "px-6 py-3.5 text-base"
    },
    shadow: {
      true: {
        base: "shadow-lg"
      }
    },
    group: {
      true: "rounded-none",
      false: ""
    },
    disabled: {
      true: { base: "opacity-50 cursor-not-allowed" }
    }
  },
  compoundVariants: [
    {
      shadow: true,
      color: "blue",
      class: { base: "shadow-blue-500/50 dark:shadow-blue-800/80" }
    },
    {
      shadow: true,
      color: "green",
      class: { base: "shadow-green-500/50 dark:shadow-green-800/80" }
    },
    {
      shadow: true,
      color: "cyan",
      class: { base: "shadow-cyan-500/50 dark:shadow-cyan-800/80" }
    },
    {
      shadow: true,
      color: "teal",
      class: { base: "shadow-teal-500/50 dark:shadow-teal-800/80" }
    },
    {
      shadow: true,
      color: "lime",
      class: { base: "shadow-lime-500/50 dark:shadow-lime-800/80" }
    },
    {
      shadow: true,
      color: "red",
      class: { base: "shadow-red-500/50 dark:shadow-red-800/80" }
    },
    {
      shadow: true,
      color: "pink",
      class: { base: "shadow-pink-500/50 dark:shadow-pink-800/80" }
    },
    {
      shadow: true,
      color: "purple",
      class: { base: "shadow-purple-500/50 dark:shadow-purple-800/80" }
    },
    {
      shadow: true,
      color: "purpleToBlue",
      class: { base: "shadow-blue-500/50 dark:shadow-blue-800/80" }
    },
    {
      shadow: true,
      color: "cyanToBlue",
      class: { base: "shadow-cyan-500/50 dark:shadow-cyan-800/80" }
    },
    {
      shadow: true,
      color: "greenToBlue",
      class: { base: "shadow-green-500/50 dark:shadow-green-800/80" }
    },
    {
      shadow: true,
      color: "purpleToPink",
      class: { base: "shadow-purple-500/50 dark:shadow-purple-800/80" }
    },
    {
      shadow: true,
      color: "pinkToOrange",
      class: { base: "shadow-pink-500/50 dark:shadow-pink-800/80" }
    },
    {
      shadow: true,
      color: "tealToLime",
      class: { base: "shadow-lime-500/50 dark:shadow-teal-800/80" }
    },
    {
      shadow: true,
      color: "redToYellow",
      class: { base: "shadow-red-500/50 dark:shadow-red-800/80" }
    },
    {
      group: true,
      pill: true,
      class: "first:rounded-s-full last:rounded-e-full"
    },
    {
      group: true,
      pill: false,
      class: "first:rounded-s-lg last:rounded-e-lg"
    }
  ]
});

// node_modules/flowbite-svelte/dist/card/Card.svelte
Card[FILENAME] = "node_modules/flowbite-svelte/dist/card/Card.svelte";
var root_25 = add_locations(from_html(`<img/> <!>`, 1), Card[FILENAME], [[37, 4]]);
var root_42 = add_locations(from_html(`<a><!></a>`), Card[FILENAME], [[45, 2]]);
var root_52 = add_locations(from_html(`<div><!></div>`), Card[FILENAME], [[49, 2]]);
function Card($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Card);
  const childSlot = wrap_snippet(Card, function($$anchor2) {
    validate_snippet_args(...arguments);
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor3) => {
        var fragment_1 = root_25();
        var img_1 = first_child(fragment_1);
        var node_1 = sibling(img_1, 2);
        snippet(node_1, () => $$props.children);
        template_effect(
          ($0) => {
            set_class(img_1, 1, $0);
            set_attribute(img_1, "src", $$props.img);
            set_attribute(img_1, "alt", $$props.img);
          },
          [
            () => clsx2(get(image)({ class: $$props.imgClass }))
          ]
        );
        append($$anchor3, fragment_1);
      };
      var alternate = ($$anchor3) => {
        var fragment_2 = comment();
        var node_2 = first_child(fragment_2);
        snippet(node_2, () => $$props.children);
        append($$anchor3, fragment_2);
      };
      if_block(node, ($$render) => {
        if ($$props.img) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor2, fragment);
  });
  let color = prop($$props, "color", 3, "gray"), horizontal = prop($$props, "horizontal", 3, false), shadow = prop($$props, "shadow", 3, "md"), reverse = prop($$props, "reverse", 3, false), size = prop($$props, "size", 3, "sm"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "href",
      "color",
      "horizontal",
      "shadow",
      "reverse",
      "img",
      "size",
      "class",
      "imgClass",
      "contentClass"
    ],
    "restProps"
  );
  const $$d = user_derived(() => card({
    size: size(),
    color: color(),
    shadow: shadow(),
    horizontal: horizontal(),
    reverse: reverse(),
    href: !!$$props.href
  })), base = user_derived(() => {
    let { base: $$1, image: $$2 } = get($$d);
    return $$1;
  }), image = user_derived(() => {
    let { base: $$1, image: $$2 } = get($$d);
    return $$2;
  });
  const commonProps = user_derived(() => ({
    class: get(base)({ class: $$props.class }),
    ...restProps
  }));
  const anchorProps = user_derived(() => ({ ...get(commonProps), href: $$props.href }));
  const divProps = user_derived(() => ({ ...get(commonProps) }));
  var fragment_3 = comment();
  var node_3 = first_child(fragment_3);
  {
    var consequent_1 = ($$anchor2) => {
      var a = root_42();
      let attributes;
      var node_4 = child(a);
      childSlot(node_4);
      reset(a);
      template_effect(() => attributes = set_attributes(a, attributes, { ...get(anchorProps) }));
      append($$anchor2, a);
    };
    var alternate_1 = ($$anchor2) => {
      var div = root_52();
      let attributes_1;
      var node_5 = child(div);
      childSlot(node_5);
      reset(div);
      template_effect(() => attributes_1 = set_attributes(div, attributes_1, { ...get(divProps) }));
      append($$anchor2, div);
    };
    if_block(node_3, ($$render) => {
      if ($$props.href) $$render(consequent_1);
      else $$render(alternate_1, false);
    });
  }
  append($$anchor, fragment_3);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Card = hmr(Card, () => Card[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Card[HMR].source;
    set(Card[HMR].source, module.default[HMR].original);
  });
}
var Card_default = Card;

// node_modules/flowbite-svelte/dist/card/theme.js
var card = ce({
  slots: {
    base: "w-full flex max-w-sm bg-white border border-gray-200 rounded-lg dark:bg-gray-800 dark:border-gray-700",
    image: "rounded-t-lg"
  },
  variants: {
    size: {
      xs: { base: "max-w-xs" },
      sm: { base: "max-w-sm" },
      md: { base: "max-w-lg" },
      lg: { base: "max-w-2xl" },
      xl: { base: "max-w-none" }
    },
    color: {
      // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      gray: { base: "border-gray-200 dark:bg-gray-800 dark:border-gray-700" },
      primary: { base: "border-primary-200 bg-primary-400 dark:bg-primary-800 dark:border-primary-700" },
      secondary: { base: "border-secondary-200 bg-secondary-400 dark:bg-secondary-800 dark:border-secondary-700" },
      red: { base: "border-red-200 bg-red-400 dark:bg-red-800 dark:border-red-700" },
      orange: { base: "border-orange-200 bg-orange-400 dark:bg-orange-800 dark:border-orange-700" },
      amber: { base: "border-amber-200 bg-amber-400 dark:bg-amber-800 dark:border-amber-700" },
      yellow: { base: "border-yellow-200 bg-yellow-400 dark:bg-yellow-800 dark:border-yellow-700" },
      lime: { base: "border-lime-200 bg-lime-400 dark:bg-lime-800 dark:border-lime-700" },
      green: { base: "border-green-200 bg-green-400 dark:bg-green-800 dark:border-green-700" },
      emerald: { base: "border-emerald-200 bg-emerald-400 dark:bg-emerald-800 dark:border-emerald-700" },
      teal: { base: "border-teal-200 bg-teal-400 dark:bg-teal-800 dark:border-teal-700" },
      cyan: { base: "border-cyan-200 bg-cyan-400 dark:bg-cyan-800 dark:border-cyan-700" },
      sky: { base: "border-sky-200 bg-sky-400 dark:bg-sky-800 dark:border-sky-700" },
      blue: { base: "border-blue-200 bg-blue-400 dark:bg-blue-800 dark:border-blue-700" },
      indigo: { base: "border-indigo-200 bg-indigo-400 dark:bg-indigo-800 dark:border-indigo-700" },
      violet: { base: "border-violet-200 bg-violet-400 dark:bg-violet-800 dark:border-violet-700" },
      purple: { base: "border-purple-200 bg-purple-400 dark:bg-purple-800 dark:border-purple-700" },
      fuchsia: { base: "border-fuchsia-200 bg-fuchsia-400 dark:bg-fuchsia-800 dark:border-fuchsia-700" },
      pink: { base: "border-pink-200 bg-pink-400 dark:bg-pink-800 dark:border-pink-700" },
      rose: { base: "border-rose-200 bg-rose-400 dark:bg-rose-800 dark:border-rose-700" }
    },
    shadow: {
      sm: { base: "shadow-md" },
      normal: { base: "shadow-sm" },
      md: { base: "shadow-md" },
      lg: { base: "shadow-lg" },
      xl: { base: "shadow-xl" },
      "2xl": { base: "shadow-2xl" },
      inner: { base: "shadow-inner" }
    },
    horizontal: {
      true: {
        base: "md:flex-row",
        image: "object-cover w-full h-96 md:h-auto md:w-48 md:rounded-none"
      }
    },
    reverse: {
      true: { base: "flex-col-reverse", image: "rounded-b-lg rounded-tl-none" },
      false: { base: "flex-col", image: "rounded-t-lg" }
    },
    href: {
      true: "",
      false: ""
    },
    hasImage: {
      true: "",
      false: ""
    }
  },
  compoundVariants: [
    {
      horizontal: true,
      reverse: true,
      class: { base: "md:flex-row-reverse", image: "md:rounded-e-lg" }
    },
    {
      horizontal: true,
      reverse: false,
      class: { base: "md:flex-row", image: "md:rounded-s-lg" }
    },
    // gray, primary, secondary, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
    {
      href: true,
      color: "gray",
      class: { base: "cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700" }
    },
    {
      href: true,
      color: "primary",
      class: { base: "cursor-pointer hover:bg-primary-500 dark:hover:bg-primary-700" }
    },
    {
      href: true,
      color: "secondary",
      class: { base: "cursor-pointer hover:bg-secondary-500 dark:hover:bg-secondary-700" }
    },
    {
      href: true,
      color: "red",
      class: { base: "cursor-pointer hover:bg-red-500 dark:hover:bg-red-700" }
    },
    {
      href: true,
      color: "orange",
      class: { base: "cursor-pointer hover:bg-orange-500 dark:hover:bg-orange-700" }
    },
    {
      href: true,
      color: "amber",
      class: { base: "cursor-pointer hover:bg-amber-500 dark:hover:bg-amber-700" }
    },
    {
      href: true,
      color: "yellow",
      class: { base: "cursor-pointer hover:bg-yellow-500 dark:hover:bg-yellow-700" }
    },
    {
      href: true,
      color: "lime",
      class: { base: "cursor-pointer hover:bg-lime-500 dark:hover:bg-lime-700" }
    },
    {
      href: true,
      color: "green",
      class: { base: "cursor-pointer hover:bg-green-500 dark:hover:bg-green-700" }
    },
    {
      href: true,
      color: "emerald",
      class: { base: "cursor-pointer hover:bg-emerald-500 dark:hover:bg-emerald-700" }
    },
    {
      href: true,
      color: "teal",
      class: { base: "cursor-pointer hover:bg-teal-500 dark:hover:bg-teal-700" }
    },
    {
      href: true,
      color: "cyan",
      class: { base: "cursor-pointer hover:bg-cyan-500 dark:hover:bg-cyan-700" }
    },
    {
      href: true,
      color: "sky",
      class: { base: "cursor-pointer hover:bg-sky-500 dark:hover:bg-sky-700" }
    },
    {
      href: true,
      color: "blue",
      class: { base: "cursor-pointer hover:bg-blue-500 dark:hover:bg-blue-700" }
    },
    {
      href: true,
      color: "indigo",
      class: { base: "cursor-pointer hover:bg-indigo-500 dark:hover:bg-indigo-700" }
    },
    {
      href: true,
      color: "violet",
      class: { base: "cursor-pointer hover:bg-violet-500 dark:hover:bg-violet-700" }
    },
    {
      href: true,
      color: "purple",
      class: { base: "cursor-pointer hover:bg-purple-500 dark:hover:bg-purple-700" }
    },
    {
      href: true,
      color: "fuchsia",
      class: { base: "cursor-pointer hover:bg-fuchsia-500 dark:hover:bg-fuchsia-700" }
    },
    {
      href: true,
      color: "pink",
      class: { base: "cursor-pointer hover:bg-pink-500 dark:hover:bg-pink-700" }
    },
    {
      href: true,
      color: "rose",
      class: { base: "cursor-pointer hover:bg-rose-500 dark:hover:bg-rose-700" }
    }
  ],
  defaultVariants: {
    size: "sm",
    shadow: "normal",
    horizontal: false,
    reverse: false
  }
});

// node_modules/flowbite-svelte/dist/carousel/CarouselSlide.js
var canChangeSlide = ({ lastSlideChange, slideDuration, slideDurationRatio = 1 }) => {
  if (lastSlideChange && (/* @__PURE__ */ new Date()).getTime() - lastSlideChange.getTime() < slideDuration * slideDurationRatio) {
    console.warn("Can't change slide yet, too soon");
    return false;
  }
  return true;
};

// node_modules/flowbite-svelte/dist/forms/select/Select.svelte
Select[FILENAME] = "node_modules/flowbite-svelte/dist/forms/select/Select.svelte";
var root_19 = add_locations(from_html(`<option disabled selected> </option>`), Select[FILENAME], [[22, 6]]);
var root_36 = add_locations(from_html(`<option> </option>`), Select[FILENAME], [[27, 8]]);
var root9 = add_locations(from_html(`<div><select><!><!><!></select> <!></div>`), Select[FILENAME], [[19, 0, [[20, 2]]]]);
function Select($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Select);
  var $$ownership_validator = create_ownership_validator($$props);
  let value = prop($$props, "value", 15), elementRef = prop($$props, "elementRef", 15), size = prop($$props, "size", 3, "md"), placeholder = prop($$props, "placeholder", 3, "Choose option ..."), clearableColor = prop($$props, "clearableColor", 3, "none"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "items",
      "value",
      "elementRef",
      "underline",
      "size",
      "disabled",
      "selectClass",
      "class",
      "placeholder",
      "clearable",
      "clearableSvgClass",
      "clearableColor",
      "clearableClass",
      "clearableOnClick"
    ],
    "restProps"
  );
  const $$d = user_derived(() => select({
    underline: $$props.underline,
    size: size(),
    disabled: $$props.disabled
  })), base = user_derived(() => {
    let { base: $$1, select: $$2, clearbtn: $$3 } = get($$d);
    return $$1;
  }), select2 = user_derived(() => {
    let { base: $$1, select: $$2, clearbtn: $$3 } = get($$d);
    return $$2;
  }), clearbtn = user_derived(() => {
    let { base: $$1, select: $$2, clearbtn: $$3 } = get($$d);
    return $$3;
  });
  const clearAll = () => {
    if (elementRef()) {
      $$ownership_validator.mutation("elementRef", ["elementRef", "value"], elementRef(elementRef().value = "", true), 12, 6);
      value(void 0);
    }
    if ($$props.clearableOnClick) $$props.clearableOnClick();
  };
  var div = root9();
  var select_1 = child(div);
  let attributes;
  var node = child(select_1);
  {
    var consequent = ($$anchor2) => {
      var option = root_19();
      option.value = option.__value = "";
      var text2 = child(option, true);
      reset(option);
      template_effect(() => set_text(text2, placeholder()));
      append($$anchor2, option);
    };
    if_block(node, ($$render) => {
      if (placeholder()) $$render(consequent);
    });
  }
  var node_1 = sibling(node);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment = comment();
      var node_2 = first_child(fragment);
      each(node_2, 17, () => $$props.items, index, ($$anchor3, item) => {
        var option_1 = root_36();
        var option_1_value = {};
        var text_1 = child(option_1, true);
        reset(option_1);
        template_effect(() => {
          if (option_1_value !== (option_1_value = get(item).value)) {
            option_1.value = (option_1.__value = get(item).value) ?? "";
          }
          option_1.disabled = get(item).disabled;
          set_text(text_1, get(item).name);
        });
        append($$anchor3, option_1);
      });
      append($$anchor2, fragment);
    };
    if_block(node_1, ($$render) => {
      if ($$props.items) $$render(consequent_1);
    });
  }
  var node_3 = sibling(node_1);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_4 = first_child(fragment_1);
      snippet(node_4, () => $$props.children);
      append($$anchor2, fragment_1);
    };
    if_block(node_3, ($$render) => {
      if ($$props.children) $$render(consequent_2);
    });
  }
  reset(select_1);
  bind_this(select_1, ($$value) => elementRef($$value), () => elementRef());
  var node_5 = sibling(select_1, 2);
  {
    var consequent_3 = ($$anchor2) => {
      var fragment_2 = comment();
      var node_6 = first_child(fragment_2);
      const expression = user_derived(() => get(clearbtn)({ class: $$props.clearableClass }));
      CloseButton_default(node_6, {
        onclick: clearAll,
        get class() {
          return get(expression);
        },
        get color() {
          return clearableColor();
        },
        "aria-label": "Clear search value",
        get svgClass() {
          return $$props.clearableSvgClass;
        },
        get disabled() {
          return $$props.disabled;
        }
      });
      append($$anchor2, fragment_2);
    };
    if_block(node_5, ($$render) => {
      if (strict_equals(value(), void 0, false) && strict_equals(value(), "", false) && $$props.clearable) $$render(consequent_3);
    });
  }
  reset(div);
  template_effect(
    ($0, $1) => {
      set_class(div, 1, $0);
      attributes = set_attributes(select_1, attributes, {
        disabled: $$props.disabled,
        ...restProps,
        class: $1
      });
    },
    [
      () => clsx2(get(base)({ class: clsx_default($$props.class) })),
      () => get(select2)({ class: clsx_default($$props.selectClass) })
    ]
  );
  bind_select_value(select_1, value);
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Select = hmr(Select, () => Select[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Select[HMR].source;
    set(Select[HMR].source, module.default[HMR].original);
  });
}
var Select_default = Select;

// node_modules/flowbite-svelte/dist/forms/select/theme.js
var select = ce({
  slots: {
    base: "relative",
    select: "block w-full rtl:text-right",
    clearbtn: "absolute right-8 top-1/2 -translate-y-1/2 text-gray-400 hover:text-black"
  },
  variants: {
    underline: {
      true: {
        select: "text-gray-500 bg-transparent border-0 border-b-2 border-gray-200 appearance-none dark:text-gray-400 dark:border-gray-700 focus:outline-hidden focus:ring-0 focus:border-gray-200 peer px-0!"
      },
      false: {
        select: "text-gray-900 bg-gray-50 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
      }
    },
    size: {
      sm: { select: "text-xs px-2.5 py-2.5" },
      md: { select: "text-sm px-2.5 py-2.5" },
      lg: { select: "text-base py-3 px-4" }
    },
    disabled: {
      true: {
        select: "cursor-not-allowed opacity-50"
      },
      false: {}
    }
  },
  defaultVariants: {
    underline: false,
    size: "md"
  }
});
var multiselect = ce({
  slots: {
    base: "relative border border-gray-300 flex items-center rounded-lg gap-2 dark:border-gray-600 ring-primary-500 dark:ring-primary-500 focus-visible:outline-hidden",
    select: "flex flex-wrap gap-2",
    dropdown: "absolute z-50 p-3 flex flex-col gap-1 max-h-64 bg-white border border-gray-300 dark:bg-gray-700 dark:border-gray-600 start-0 top-[calc(100%+1rem)] rounded-lg cursor-pointer overflow-y-scroll w-full",
    dropdownitem: "py-2 px-3 rounded-lg text-gray-600 hover:text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:text-gray-300 dark:hover:bg-gray-600",
    closebutton: "p-0 focus:ring-gray-400 dark:text-white"
  },
  variants: {
    size: {
      sm: "px-2.5 py-2.5 min-h-[2.4rem] text-xs",
      md: "px-2.5 py-2.5 min-h-[2.7rem] text-sm",
      lg: "px-3 py-3 min-h-[3.2rem] sm:text-base"
    },
    disabled: {
      true: {
        base: "cursor-not-allowed opacity-50 pointer-events-none",
        dropdownitem: "cursor-not-allowed opacity-50",
        closebutton: "cursor-not-allowed"
      },
      false: { base: "focus-within:border-primary-500 dark:focus-within:border-primary-500 focus-within:ring-1" }
    },
    active: {
      true: {
        dropdownitem: "bg-primary-100 text-primary-500 dark:bg-primary-500 dark:text-primary-100 hover:bg-primary-100 dark:hover:bg-primary-500 hover:text-primary-600 dark:hover:text-primary-100"
      }
    },
    selected: {
      true: {
        dropdownitem: "bg-gray-100 text-black font-semibold hover:text-black dark:text-white dark:bg-gray-600 dark:hover:text-white"
      }
    }
  },
  defaultVariants: {
    underline: false,
    size: "md"
  }
});

// node_modules/flowbite-svelte/dist/forms/select/MultiSelect.svelte
MultiSelect[FILENAME] = "node_modules/flowbite-svelte/dist/forms/select/MultiSelect.svelte";
var toggleDropdown = (_, disabled, show) => !disabled() && set(show, !get(show));
function handleKeyDown(event3, disabled, closeDropdown, handleToggleActiveItem, handleArrowUpDown) {
  var _a;
  if (disabled()) return;
  event3.stopPropagation();
  event3.preventDefault();
  const actions = {
    Escape: closeDropdown,
    Enter: handleToggleActiveItem,
    " ": handleToggleActiveItem,
    ArrowDown: () => handleArrowUpDown(1),
    ArrowUp: () => handleArrowUpDown(-1)
  };
  if (event3.key in actions) {
    (_a = actions[event3.key]) == null ? void 0 : _a.call(actions);
  }
}
var root_110 = add_locations(from_html(`<option> </option>`), MultiSelect[FILENAME], [[99, 4]]);
var root_26 = add_locations(from_html(`<span class="text-gray-400"> </span>`), MultiSelect[FILENAME], [[104, 4]]);
var on_click = (__1, selectOption, item) => selectOption(get(item));
var root_102 = add_locations(from_html(`<div role="presentation"> </div>`), MultiSelect[FILENAME], [[132, 8]]);
var root_93 = add_locations(from_html(`<div role="presentation"></div>`), MultiSelect[FILENAME], [[130, 4]]);
var root10 = add_locations(from_html(`<select></select> <div tabindex="0" role="listbox"><!> <span><!></span> <div class="ms-auto flex items-center gap-2"><!> <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"></path></svg></div> <!></div>`, 1), MultiSelect[FILENAME], [
  [97, 0],
  [
    102,
    0,
    [
      [106, 2],
      [
        119,
        2,
        [[124, 4, [[125, 6]]]]
      ]
    ]
  ]
]);
function MultiSelect($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, MultiSelect);
  let items = prop($$props, "items", 19, () => []), value = prop($$props, "value", 15), size = prop($$props, "size", 3, "md"), dropdownClass = prop($$props, "dropdownClass", 3, ""), placeholder = prop($$props, "placeholder", 3, ""), disabled = prop($$props, "disabled", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "items",
      "value",
      "size",
      "dropdownClass",
      "placeholder",
      "disabled",
      "onchange",
      "class"
    ],
    "restProps"
  );
  let selectItems = user_derived(() => items().filter((x) => value().includes(x.value)));
  let show = state(false);
  let activeIndex = state(null);
  let activeItem = user_derived(() => strict_equals(get(activeIndex), null, false) ? items()[(get(activeIndex) % items().length + items().length) % items().length] : null);
  const selectOption = (select3) => {
    if (disabled()) return;
    if (select3.disabled) return;
    if (value().includes(select3.value)) {
      clearThisOption(select3);
    } else if (!value().includes(select3.value)) {
      value([...value(), select3.value]);
    }
  };
  const clearAll = (e) => {
    if (disabled()) return;
    e.stopPropagation();
    value([]);
  };
  const clearThisOption = (select3) => {
    if (disabled()) return;
    if (value().includes(select3.value)) {
      value(value().filter((o) => strict_equals(o, select3.value, false)));
    }
  };
  const closeDropdown = () => !disabled() && set(show, false);
  function handleToggleActiveItem() {
    if (disabled()) return;
    if (!get(show)) {
      set(show, true);
      set(activeIndex, 0);
    } else {
      if (strict_equals(get(activeItem), null, false)) selectOption(get(activeItem));
    }
  }
  function handleArrowUpDown(offset2) {
    if (disabled()) return;
    if (!get(show)) {
      set(show, true);
      set(activeIndex, 0);
    } else {
      if (strict_equals(get(activeIndex), null, false)) {
        set(activeIndex, get(activeIndex) + offset2);
      } else {
        set(activeIndex, 0);
      }
    }
  }
  const {
    base,
    dropdown: dropdown2,
    dropdownitem,
    closebutton,
    select: select2
  } = multiselect({ disabled: disabled() });
  var fragment = root10();
  var select_1 = first_child(fragment);
  let attributes;
  init_select(select_1, () => attributes.value);
  each(select_1, 21, items, index, ($$anchor2, $$item, $$index, $$array) => {
    let value2 = () => get($$item).value;
    value2();
    let name = () => get($$item).name;
    name();
    let disabled2 = () => get($$item).disabled;
    disabled2();
    var option = root_110();
    var option_value = {};
    var text2 = child(option, true);
    reset(option);
    template_effect(() => {
      if (option_value !== (option_value = value2())) {
        option.value = (option.__value = value2()) ?? "";
      }
      option.disabled = disabled2();
      set_text(text2, name());
    });
    append($$anchor2, option);
  });
  reset(select_1);
  var div = sibling(select_1, 2);
  div.__click = [toggleDropdown, disabled, show];
  div.__focusout = closeDropdown;
  div.__keydown = [
    handleKeyDown,
    disabled,
    closeDropdown,
    handleToggleActiveItem,
    handleArrowUpDown
  ];
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var span2 = root_26();
      var text_1 = child(span2, true);
      reset(span2);
      template_effect(() => set_text(text_1, placeholder()));
      append($$anchor2, span2);
    };
    if_block(node, ($$render) => {
      if (!get(selectItems).length) $$render(consequent);
    });
  }
  var span_1 = sibling(node, 2);
  var node_1 = child(span_1);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      validate_each_keys(() => get(selectItems), (item) => item.name);
      each(node_2, 17, () => get(selectItems), (item) => item.name, ($$anchor3, item) => {
        var fragment_2 = comment();
        var node_3 = first_child(fragment_2);
        {
          var consequent_1 = ($$anchor4) => {
            var fragment_3 = comment();
            var node_4 = first_child(fragment_3);
            snippet(node_4, () => $$props.children, () => ({
              item: get(item),
              clear: () => clearThisOption(get(item))
            }));
            append($$anchor4, fragment_3);
          };
          var alternate = ($$anchor4) => {
            var fragment_4 = comment();
            var node_5 = first_child(fragment_4);
            const expression = user_derived(() => strict_equals(size(), "lg"));
            const expression_1 = user_derived(() => [disabled() && "pointer-events-none"]);
            Badge_default(node_5, {
              color: "gray",
              get large() {
                return get(expression);
              },
              dismissable: true,
              params: { duration: 100 },
              onclose: () => clearThisOption(get(item)),
              get class() {
                return get(expression_1);
              },
              children: wrap_snippet(MultiSelect, ($$anchor5, $$slotProps) => {
                next();
                var text_2 = text();
                template_effect(() => set_text(text_2, get(item).name));
                append($$anchor5, text_2);
              }),
              $$slots: { default: true }
            });
            append($$anchor4, fragment_4);
          };
          if_block(node_3, ($$render) => {
            if ($$props.children) $$render(consequent_1);
            else $$render(alternate, false);
          });
        }
        append($$anchor3, fragment_2);
      });
      append($$anchor2, fragment_1);
    };
    if_block(node_1, ($$render) => {
      if (get(selectItems).length) $$render(consequent_2);
    });
  }
  reset(span_1);
  var div_1 = sibling(span_1, 2);
  var node_6 = child(div_1);
  {
    var consequent_3 = ($$anchor2) => {
      var fragment_6 = comment();
      var node_7 = first_child(fragment_6);
      const expression_2 = user_derived(closebutton);
      CloseButton_default(node_7, {
        get size() {
          return size();
        },
        onclick: clearAll,
        color: "none",
        get class() {
          return get(expression_2);
        },
        get disabled() {
          return disabled();
        }
      });
      append($$anchor2, fragment_6);
    };
    if_block(node_6, ($$render) => {
      if (get(selectItems).length) $$render(consequent_3);
    });
  }
  var svg = sibling(node_6, 2);
  var path = child(svg);
  reset(svg);
  reset(div_1);
  var node_8 = sibling(div_1, 2);
  {
    var consequent_4 = ($$anchor2) => {
      var div_2 = root_93();
      validate_each_keys(items, (item) => item.name);
      each(div_2, 21, items, (item) => item.name, ($$anchor3, item) => {
        var div_3 = root_102();
        div_3.__click = [on_click, selectOption, item];
        var text_3 = child(div_3, true);
        reset(div_3);
        template_effect(
          ($0) => {
            set_class(div_3, 1, $0);
            set_text(text_3, get(item).name);
          },
          [
            () => clsx2(dropdownitem({
              selected: get(selectItems).includes(get(item)),
              active: strict_equals(get(activeItem), get(item)),
              disabled: get(item).disabled
            }))
          ]
        );
        append($$anchor3, div_3);
      });
      reset(div_2);
      template_effect(($0) => set_class(div_2, 1, $0), [
        () => clsx2(dropdown2({ class: dropdownClass() }))
      ]);
      append($$anchor2, div_2);
    };
    if_block(node_8, ($$render) => {
      if (get(show)) $$render(consequent_4);
    });
  }
  reset(div);
  template_effect(
    ($0, $1, $2) => {
      attributes = set_attributes(select_1, attributes, {
        ...restProps,
        value: value(),
        hidden: true,
        multiple: true
      });
      if ("value" in attributes) {
        select_option(select_1, attributes.value);
      }
      set_class(div, 1, $0);
      set_class(span_1, 1, $1);
      set_class(svg, 0, $2);
      set_attribute(path, "d", get(show) ? "m1 5 4-4 4 4" : "m9 1-4 4-4-4");
    },
    [
      () => clsx2(base({
        size: size(),
        class: clsx_default($$props.class)
      })),
      () => clsx2(select2()),
      () => clsx2(twMerge("ms-1 h-3 w-3 cursor-pointer text-gray-800 dark:text-white", disabled() && "cursor-not-allowed"))
    ]
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MultiSelect = hmr(MultiSelect, () => MultiSelect[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MultiSelect[HMR].source;
    set(MultiSelect[HMR].source, module.default[HMR].original);
  });
}
var MultiSelect_default = MultiSelect;
delegate(["click", "focusout", "keydown"]);

// node_modules/flowbite-svelte/dist/carousel/theme.js
var carousel = ce({
  base: "grid overflow-hidden relative rounded-lg h-56 sm:h-64 xl:h-80 2xl:h-96",
  variants: {},
  compoundVariants: [],
  defaultVariants: {}
});
var indicators = ce({
  slots: {
    base: "absolute start-1/2 z-30 flex -translate-x-1/2 space-x-3 rtl:translate-x-1/2 rtl:space-x-reverse",
    indicator: "bg-gray-100 hover:bg-gray-300"
  },
  variants: {
    selected: {
      true: { indicator: "opacity-100" },
      false: { indicator: "opacity-60" }
    },
    position: {
      top: { base: "top-5" },
      bottom: { base: "bottom-5" },
      withThumbnails: { base: "bottom-24" }
    }
  }
});
var controlButton = ce({
  base: "flex absolute top-0 z-30 justify-center items-center px-4 h-full group focus:outline-hidden text-white dark:text-gray-300",
  variants: {
    forward: {
      true: "end-0",
      false: "start-0"
    }
  }
});
var thumbnails = ce({
  base: "flex flex-row justify-center bg-gray-100 w-full"
});
var thumbnail = ce({
  base: "",
  variants: {
    selected: {
      true: "opacity-100",
      false: "opacity-60"
    }
  },
  defaultVariants: {
    selected: false
  }
});
var slide2 = ce({
  base: "absolute block w-full! h-full object-cover"
});

// node_modules/flowbite-svelte/dist/carousel/Slide.svelte
Slide[FILENAME] = "node_modules/flowbite-svelte/dist/carousel/Slide.svelte";
var root_27 = add_locations(from_html(`<img/>`), Slide[FILENAME], [[34, 4]]);
var root_43 = add_locations(from_html(`<img/>`), Slide[FILENAME], [[38, 4]]);
function Slide($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Slide);
  const [$$stores, $$cleanup] = setup_stores();
  const $state = () => (validate_store(state2, "state"), store_get(state2, "$state", $$stores));
  const state2 = getContext("state");
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "image",
      "transition",
      "class"
    ],
    "restProps"
  );
  let transitionSlideIn = user_derived(() => ({
    x: $state().forward ? "100%" : "-100%",
    opacity: 1,
    width: "100%",
    height: "100%",
    duration: $state().slideDuration
  }));
  let transitionSlideOut = user_derived(() => ({
    x: $state().forward ? "-100%" : "100%",
    opacity: 0.9,
    width: "100%",
    height: "100%",
    duration: $state().slideDuration
  }));
  let imgClass = user_derived(() => slide2({ class: clsx_default($$props.class) }));
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      key_block(node_1, () => $$props.image, ($$anchor3) => {
        var img2 = root_27();
        let attributes;
        template_effect(() => attributes = set_attributes(img2, attributes, {
          alt: "...",
          ...$$props.image,
          ...restProps,
          class: get(imgClass)
        }));
        replay_events(img2);
        transition(3, img2, () => $$props.transition, () => ({}));
        append($$anchor3, img2);
      });
      append($$anchor2, fragment_1);
    };
    var alternate = ($$anchor2) => {
      var fragment_2 = comment();
      var node_2 = first_child(fragment_2);
      key_block(node_2, () => $$props.image, ($$anchor3) => {
        var img_1 = root_43();
        let attributes_1;
        template_effect(() => attributes_1 = set_attributes(img_1, attributes_1, {
          alt: "...",
          ...$$props.image,
          ...restProps,
          class: get(imgClass)
        }));
        replay_events(img_1);
        transition(2, img_1, () => fly, () => get(transitionSlideOut));
        transition(1, img_1, () => fly, () => get(transitionSlideIn));
        append($$anchor3, img_1);
      });
      append($$anchor2, fragment_2);
    };
    if_block(node, ($$render) => {
      if ($$props.transition) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Slide = hmr(Slide, () => Slide[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Slide[HMR].source;
    set(Slide[HMR].source, module.default[HMR].original);
  });
}
var Slide_default = Slide;

// node_modules/flowbite-svelte/dist/carousel/Carousel.svelte
Carousel[FILENAME] = "node_modules/flowbite-svelte/dist/carousel/Carousel.svelte";
var root_37 = add_locations(from_html(`<link rel="preload" as="image"/>`), Carousel[FILENAME], [[167, 6]]);
var root11 = add_locations(from_html(`<div role="button" tabindex="0"><div><!></div> <!></div>`), Carousel[FILENAME], [[174, 0, [[175, 2]]]]);
function Carousel($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Carousel);
  const SLIDE_DURATION_RATIO = 0.25;
  let index2 = prop($$props, "index", 15, 0), slideDuration = prop($$props, "slideDuration", 3, 1e3), duration = prop($$props, "duration", 3, 0), ariaLabel = prop($$props, "aria-label", 3, "Draggable Carousel"), disableSwipe = prop($$props, "disableSwipe", 3, false), imgClass = prop($$props, "imgClass", 3, ""), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "slide",
      "images",
      "index",
      "slideDuration",
      "transition",
      "duration",
      "aria-label",
      "disableSwipe",
      "imgClass",
      "class",
      "onchange",
      "divClass"
    ],
    "restProps"
  );
  const { set: set2, subscribe, update } = writable({
    images: $$props.images,
    index: index2() ?? 0,
    forward: true,
    slideDuration: slideDuration(),
    lastSlideChange: /* @__PURE__ */ new Date()
  });
  setContext("state", {
    set: (_state) => set2({
      index: _state.index,
      images: _state.images,
      lastSlideChange: /* @__PURE__ */ new Date(),
      slideDuration: slideDuration(),
      forward: get(forward)
    }),
    subscribe,
    update
  });
  let forward = state(true);
  subscribe((_state) => {
    var _a;
    index2(_state.index);
    set(forward, _state.forward, true);
    (_a = $$props.onchange) == null ? void 0 : _a.call($$props, $$props.images[index2()]);
  });
  onMount(() => {
    var _a;
    (_a = $$props.onchange) == null ? void 0 : _a.call($$props, $$props.images[index2()]);
  });
  const nextSlide = () => {
    update((_state) => {
      if (!canChangeSlide({
        lastSlideChange: _state.lastSlideChange,
        slideDuration: slideDuration(),
        slideDurationRatio: SLIDE_DURATION_RATIO
      })) return _state;
      _state.index = _state.index >= $$props.images.length - 1 ? 0 : _state.index + 1;
      _state.lastSlideChange = /* @__PURE__ */ new Date();
      return { ..._state };
    });
  };
  const prevSlide = () => {
    update((_state) => {
      if (!canChangeSlide({
        lastSlideChange: _state.lastSlideChange,
        slideDuration: slideDuration(),
        slideDurationRatio: SLIDE_DURATION_RATIO
      })) return _state;
      _state.index = _state.index <= 0 ? $$props.images.length - 1 : _state.index - 1;
      _state.lastSlideChange = /* @__PURE__ */ new Date();
      return { ..._state };
    });
  };
  const loop = (node, duration2) => {
    let intervalId;
    if (duration2 > 0) intervalId = setInterval(nextSlide, duration2);
    return {
      update: (duration3) => {
        clearInterval(intervalId);
        if (duration3 > 0) intervalId = setInterval(nextSlide, duration3);
      },
      destroy: () => clearInterval(intervalId)
    };
  };
  let activeDragGesture = state(void 0);
  let carouselDiv = state(void 0);
  let percentOffset = state(0);
  let touchEvent = null;
  const getPositionFromEvent = (evt) => {
    const mousePos = evt == null ? void 0 : evt.clientX;
    if (mousePos) return mousePos;
    let touchEvt = evt;
    if (/^touch/.test(touchEvt == null ? void 0 : touchEvt.type)) {
      return touchEvt.touches[0].clientX;
    }
  };
  const onDragStart = (evt) => {
    var _a;
    if (disableSwipe()) return;
    touchEvent = evt;
    evt.cancelable && evt.preventDefault();
    const start = getPositionFromEvent(evt);
    const width = (_a = get(carouselDiv)) == null ? void 0 : _a.getBoundingClientRect().width;
    if (strict_equals(start, void 0) || strict_equals(width, void 0)) return;
    set(
      activeDragGesture,
      {
        start,
        position: start,
        width,
        timestamp: Date.now()
      },
      true
    );
  };
  let onDragMove = user_derived(() => strict_equals(get(activeDragGesture), void 0) ? void 0 : (evt) => {
    const position = getPositionFromEvent(evt);
    if (!get(activeDragGesture) || strict_equals(position, void 0)) return;
    const { start, width } = get(activeDragGesture);
    set(percentOffset, Math.min(100, Math.max(-100, (position - start) / width * 100)), true);
    get(activeDragGesture).position = position;
  });
  let onDragStop = user_derived(() => strict_equals(get(activeDragGesture), void 0) ? void 0 : (evt) => {
    var _a;
    const SWIPE_MAX_DURATION = 250;
    const SWIPE_MIN_DISTANCE = 30;
    const DRAG_MIN_PERCENT = 50;
    if (get(activeDragGesture)) {
      const { timestamp, position, start } = get(activeDragGesture);
      const duration2 = Date.now() - timestamp;
      const distance = position - start;
      if (Math.abs(distance) >= SWIPE_MIN_DISTANCE && duration2 <= SWIPE_MAX_DURATION && duration2 > 0) {
        if (distance > 0) prevSlide();
        else nextSlide();
      } else if (get(percentOffset) > DRAG_MIN_PERCENT) prevSlide();
      else if (get(percentOffset) < -DRAG_MIN_PERCENT) nextSlide();
      else {
        if (strict_equals(touchEvent == null ? void 0 : touchEvent.constructor.name, "TouchEvent")) {
          (_a = touchEvent == null ? void 0 : touchEvent.target) == null ? void 0 : _a.dispatchEvent(new Event("click", { bubbles: true }));
        }
      }
    }
    set(percentOffset, 0);
    set(activeDragGesture, void 0);
    touchEvent = null;
  });
  var div = root11();
  head(($$anchor2) => {
    var fragment = comment();
    var node_1 = first_child(fragment);
    {
      var consequent = ($$anchor3) => {
        var fragment_1 = comment();
        var node_2 = first_child(fragment_1);
        each(node_2, 17, () => $$props.images, index, ($$anchor4, image) => {
          var link = root_37();
          template_effect(() => set_attribute(link, "href", get(image).src));
          append($$anchor4, link);
        });
        append($$anchor3, fragment_1);
      };
      if_block(node_1, ($$render) => {
        if ($$props.images.length > 0) $$render(consequent);
      });
    }
    append($$anchor2, fragment);
  });
  event2("mousemove", $document, function(...$$args) {
    apply(() => get(onDragMove), this, $$args, Carousel, [173, 30]);
  });
  event2("mouseup", $document, function(...$$args) {
    apply(() => get(onDragStop), this, $$args, Carousel, [173, 53]);
  });
  event2(
    "touchmove",
    $document,
    function(...$$args) {
      apply(() => get(onDragMove), this, $$args, Carousel, [173, 78]);
    },
    void 0,
    true
  );
  event2("touchend", $document, function(...$$args) {
    apply(() => get(onDragStop), this, $$args, Carousel, [173, 102]);
  });
  div.__mousedown = onDragStart;
  div.__touchstart = onDragStart;
  div.__mousemove = function(...$$args) {
    apply(() => get(onDragMove), this, $$args, Carousel, [174, 133]);
  };
  div.__mouseup = function(...$$args) {
    apply(() => get(onDragStop), this, $$args, Carousel, [174, 156]);
  };
  div.__touchmove = function(...$$args) {
    apply(() => get(onDragMove), this, $$args, Carousel, [174, 181]);
  };
  div.__touchend = function(...$$args) {
    apply(() => get(onDragStop), this, $$args, Carousel, [174, 205]);
  };
  var div_1 = child(div);
  let attributes;
  var node_3 = child(div_1);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_2 = comment();
      var node_4 = first_child(fragment_2);
      snippet(node_4, () => $$props.slide, () => ({ index: index2(), Slide: Slide_default }));
      append($$anchor2, fragment_2);
    };
    var alternate = ($$anchor2) => {
      var fragment_3 = comment();
      var node_5 = first_child(fragment_3);
      Slide_default(node_5, {
        get image() {
          return $$props.images[index2()];
        },
        get class() {
          return imgClass();
        },
        get transition() {
          return $$props.transition;
        }
      });
      append($$anchor2, fragment_3);
    };
    if_block(node_3, ($$render) => {
      if ($$props.slide) $$render(consequent_1);
      else $$render(alternate, false);
    });
  }
  reset(div_1);
  action(div_1, ($$node, $$action_arg) => loop == null ? void 0 : loop($$node, $$action_arg), duration);
  var node_6 = sibling(div_1, 2);
  snippet(node_6, () => $$props.children ?? noop, index2);
  reset(div);
  bind_this(div, ($$value) => set(carouselDiv, $$value), () => get(carouselDiv));
  template_effect(
    ($0, $1) => {
      set_class(div, 1, $0);
      set_attribute(div, "aria-label", ariaLabel());
      attributes = set_attributes(div_1, attributes, { ...restProps, class: $1 });
    },
    [
      () => clsx2(twMerge("relative", $$props.divClass)),
      () => carousel({
        class: clsx_default(strict_equals(get(activeDragGesture), void 0) ? "transition-transform" : "", $$props.class)
      })
    ]
  );
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Carousel = hmr(Carousel, () => Carousel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Carousel[HMR].source;
    set(Carousel[HMR].source, module.default[HMR].original);
  });
}
var Carousel_default = Carousel;
delegate([
  "mousedown",
  "touchstart",
  "mousemove",
  "mouseup",
  "touchmove",
  "touchend"
]);

// node_modules/flowbite-svelte/dist/carousel/ControlButton.svelte
ControlButton[FILENAME] = "node_modules/flowbite-svelte/dist/carousel/ControlButton.svelte";
var root_38 = add_locations(from_svg(`<svg aria-hidden="true" class="h-5 w-5 sm:h-6 sm:w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>`), ControlButton[FILENAME], [[15, 8, [[16, 10]]]]);
var root_44 = add_locations(from_svg(`<svg aria-hidden="true" class="h-5 w-5 sm:h-6 sm:w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></svg>`), ControlButton[FILENAME], [[19, 8, [[20, 10]]]]);
var root_53 = add_locations(from_html(`<span class="sr-only"> </span>`), ControlButton[FILENAME], [[24, 8]]);
var root_28 = add_locations(from_html(`<span class="inline-flex h-8 w-8 items-center justify-center rounded-full bg-white/30 group-hover:bg-white/50 group-focus:ring-4 group-focus:ring-white group-focus:outline-hidden sm:h-10 sm:w-10 dark:bg-gray-800/30 dark:group-hover:bg-gray-800/60 dark:group-focus:ring-gray-800/70"><!> <!></span>`), ControlButton[FILENAME], [[13, 4]]);
var root12 = add_locations(from_html(`<button><!></button>`), ControlButton[FILENAME], [[9, 0]]);
function ControlButton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ControlButton);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "forward",
      "name",
      "class"
    ],
    "restProps"
  );
  var button2 = root12();
  let attributes;
  var node = child(button2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.children);
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var span2 = root_28();
      var node_2 = child(span2);
      {
        var consequent_1 = ($$anchor3) => {
          var svg = root_38();
          append($$anchor3, svg);
        };
        var alternate_1 = ($$anchor3) => {
          var svg_1 = root_44();
          append($$anchor3, svg_1);
        };
        if_block(node_2, ($$render) => {
          if ($$props.forward) $$render(consequent_1);
          else $$render(alternate_1, false);
        });
      }
      var node_3 = sibling(node_2, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var span_1 = root_53();
          var text2 = child(span_1, true);
          reset(span_1);
          template_effect(() => set_text(text2, $$props.name));
          append($$anchor3, span_1);
        };
        if_block(node_3, ($$render) => {
          if ($$props.name) $$render(consequent_2);
        });
      }
      reset(span2);
      append($$anchor2, span2);
    };
    if_block(node, ($$render) => {
      if ($$props.children) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  reset(button2);
  template_effect(($0) => attributes = set_attributes(button2, attributes, { type: "button", class: $0, ...restProps }), [
    () => controlButton({
      forward: $$props.forward,
      class: clsx_default($$props.class)
    })
  ]);
  append($$anchor, button2);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ControlButton = hmr(ControlButton, () => ControlButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ControlButton[HMR].source;
    set(ControlButton[HMR].source, module.default[HMR].original);
  });
}
var ControlButton_default = ControlButton;

// node_modules/flowbite-svelte/dist/carousel/Controls.svelte
Controls[FILENAME] = "node_modules/flowbite-svelte/dist/carousel/Controls.svelte";
var root_29 = add_locations(from_html(`<!> <!>`, 1), Controls[FILENAME], []);
function Controls($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Controls);
  const [$$stores, $$cleanup] = setup_stores();
  const $state = () => (validate_store(state2, "state"), store_get(state2, "$state", $$stores));
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class"
    ],
    "restProps"
  );
  const state2 = getContext("state");
  const { update } = state2;
  function changeSlide(forward) {
    if (!canChangeSlide({
      lastSlideChange: $state().lastSlideChange,
      slideDuration: $state().slideDuration,
      slideDurationRatio: 0.75
    })) {
      return;
    }
    if (forward) {
      update((_state) => {
        _state.forward = true;
        _state.index = _state.index >= _state.images.length - 1 ? 0 : _state.index + 1;
        _state.lastSlideChange = /* @__PURE__ */ new Date();
        return { ..._state };
      });
    } else {
      update((_state) => {
        _state.forward = false;
        _state.index = _state.index <= 0 ? _state.images.length - 1 : _state.index - 1;
        _state.lastSlideChange = /* @__PURE__ */ new Date();
        return { ..._state };
      });
    }
  }
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      snippet(node_1, () => $$props.children, () => changeSlide);
      append($$anchor2, fragment_1);
    };
    var alternate = ($$anchor2) => {
      var fragment_2 = root_29();
      var node_2 = first_child(fragment_2);
      ControlButton_default(node_2, spread_props(
        {
          name: "Previous",
          forward: false,
          onclick: () => changeSlide(false),
          get class() {
            return $$props.class;
          }
        },
        () => restProps
      ));
      var node_3 = sibling(node_2, 2);
      ControlButton_default(node_3, spread_props(
        {
          name: "Next",
          forward: true,
          onclick: () => changeSlide(true),
          get class() {
            return $$props.class;
          }
        },
        () => restProps
      ));
      append($$anchor2, fragment_2);
    };
    if_block(node, ($$render) => {
      if ($$props.children) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Controls = hmr(Controls, () => Controls[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Controls[HMR].source;
    set(Controls[HMR].source, module.default[HMR].original);
  });
}
var Controls_default = Controls;

// node_modules/flowbite-svelte/dist/carousel/Indicators.svelte
Indicators[FILENAME] = "node_modules/flowbite-svelte/dist/carousel/Indicators.svelte";
var root_111 = add_locations(from_html(`<button><!></button>`), Indicators[FILENAME], [[30, 4]]);
var root13 = add_locations(from_html(`<div></div>`), Indicators[FILENAME], [[27, 0]]);
function Indicators($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Indicators);
  const [$$stores, $$cleanup] = setup_stores();
  const $state = () => (validate_store(state2, "state"), store_get(state2, "$state", $$stores));
  let position = prop($$props, "position", 3, "bottom"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "activeClass",
      "inactiveClass",
      "position",
      "class"
    ],
    "restProps"
  );
  const state2 = getContext("state");
  const { base, indicator: indicator2 } = indicators({ position: position() });
  function goToIndex(newIndex) {
    state2.update((_state) => {
      const currentIndex = _state.index;
      const forward = newIndex >= currentIndex;
      return {
        ..._state,
        index: newIndex,
        forward,
        lastSlideChange: /* @__PURE__ */ new Date()
      };
    });
  }
  var div = root13();
  let attributes;
  each(div, 5, () => $state().images, index, ($$anchor2, _, idx) => {
    var button2 = root_111();
    const selected = user_derived(() => strict_equals($state().index, idx));
    get(selected);
    button2.__click = () => goToIndex(idx);
    var node = child(button2);
    {
      var consequent = ($$anchor3) => {
        var fragment = comment();
        var node_1 = first_child(fragment);
        snippet(node_1, () => $$props.children, () => ({ selected: get(selected), index: idx }));
        append($$anchor3, fragment);
      };
      var alternate = ($$anchor3) => {
        var fragment_1 = comment();
        var node_2 = first_child(fragment_1);
        const expression = user_derived(() => indicator2({
          selected: get(selected),
          class: get(selected) ? $$props.activeClass : $$props.inactiveClass
        }));
        Indicator_default(node_2, {
          get class() {
            return get(expression);
          }
        });
        append($$anchor3, fragment_1);
      };
      if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    reset(button2);
    append($$anchor2, button2);
  });
  reset(div);
  template_effect(($0) => attributes = set_attributes(div, attributes, { class: $0, ...restProps }), [
    () => base({ class: clsx_default($$props.class) })
  ]);
  append($$anchor, div);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Indicators = hmr(Indicators, () => Indicators[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Indicators[HMR].source;
    set(Indicators[HMR].source, module.default[HMR].original);
  });
}
var Indicators_default = Indicators;
delegate(["click"]);

// node_modules/flowbite-svelte/dist/carousel/Thumbnail.svelte
Thumbnail[FILENAME] = "node_modules/flowbite-svelte/dist/carousel/Thumbnail.svelte";
var root14 = add_locations(from_html(`<img/>`), Thumbnail[FILENAME], [[9, 0]]);
function Thumbnail($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Thumbnail);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "selected",
      "class"
    ],
    "restProps"
  );
  var img2 = root14();
  let attributes;
  template_effect(($0) => attributes = set_attributes(img2, attributes, { ...restProps, class: $0 }), [
    () => thumbnail({
      selected: $$props.selected,
      class: clsx_default($$props.class)
    })
  ]);
  replay_events(img2);
  append($$anchor, img2);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Thumbnail = hmr(Thumbnail, () => Thumbnail[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Thumbnail[HMR].source;
    set(Thumbnail[HMR].source, module.default[HMR].original);
  });
}
var Thumbnail_default = Thumbnail;

// node_modules/flowbite-svelte/dist/carousel/Thumbnails.svelte
Thumbnails[FILENAME] = "node_modules/flowbite-svelte/dist/carousel/Thumbnails.svelte";
var root_112 = add_locations(from_html(`<button><!></button>`), Thumbnails[FILENAME], [[54, 4]]);
var root15 = add_locations(from_html(`<div></div>`), Thumbnails[FILENAME], [[51, 0]]);
function Thumbnails($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Thumbnails);
  let images = prop($$props, "images", 19, () => []), index2 = prop($$props, "index", 15), ariaLabel = prop($$props, "ariaLabel", 3, "Click to view image"), imgClass = prop($$props, "imgClass", 3, ""), throttleDelay = prop($$props, "throttleDelay", 3, 650);
  const state2 = getContext("state");
  if (!state2) {
    console.error("State is undefined. Make sure to provide state context or pass it as a prop.");
  }
  let lastClickedAt = /* @__PURE__ */ new Date();
  const btnClick = (newIndex) => {
    if ((/* @__PURE__ */ new Date()).getTime() - lastClickedAt.getTime() < throttleDelay()) {
      console.warn("Thumbnail action throttled");
      return;
    }
    if (state2) {
      state2.update((_state) => {
        const currentIndex = _state.index;
        const forward = newIndex >= currentIndex;
        index2(newIndex);
        return {
          ..._state,
          index: newIndex,
          forward,
          lastSlideChange: /* @__PURE__ */ new Date()
        };
      });
    } else {
      index2(newIndex);
      lastClickedAt = /* @__PURE__ */ new Date();
      console.warn("State update skipped - no valid state available");
    }
  };
  user_effect(() => {
    index2((index2() + images().length) % images().length);
  });
  var div = root15();
  each(div, 21, images, index, ($$anchor2, image, idx) => {
    var button2 = root_112();
    const selected = user_derived(() => strict_equals(index2(), idx));
    get(selected);
    button2.__click = () => btnClick(idx);
    var node = child(button2);
    {
      var consequent = ($$anchor3) => {
        var fragment = comment();
        var node_1 = first_child(fragment);
        snippet(node_1, () => $$props.children, () => ({
          image: get(image),
          selected: get(selected),
          imgClass: imgClass(),
          Thumbnail: Thumbnail_default
        }));
        append($$anchor3, fragment);
      };
      var alternate = ($$anchor3) => {
        var fragment_1 = comment();
        var node_2 = first_child(fragment_1);
        Thumbnail_default(node_2, spread_props(
          {
            get selected() {
              return get(selected);
            }
          },
          () => get(image),
          {
            get class() {
              return imgClass();
            }
          }
        ));
        append($$anchor3, fragment_1);
      };
      if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    reset(button2);
    template_effect(() => set_attribute(button2, "aria-label", ariaLabel()));
    append($$anchor2, button2);
  });
  reset(div);
  template_effect(($0) => set_class(div, 1, $0), [
    () => clsx2(thumbnails({ class: clsx_default($$props.class) }))
  ]);
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Thumbnails = hmr(Thumbnails, () => Thumbnails[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Thumbnails[HMR].source;
    set(Thumbnails[HMR].source, module.default[HMR].original);
  });
}
var Thumbnails_default = Thumbnails;
delegate(["click"]);

// node_modules/flowbite-svelte/dist/chart/Chart.svelte
import "/Users/gabba/Desktop/forked-kit/forked-front/node_modules/flowbite-svelte/dist/chart/chart.css";
Chart[FILENAME] = "node_modules/flowbite-svelte/dist/chart/Chart.svelte";
var root16 = add_locations(from_html(`<div></div>`), Chart[FILENAME], [[35, 0]]);
function Chart($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Chart);
  function initChart(node, options) {
    let chart;
    async function asyncInitChart() {
      const ApexCharts = (await import("./apexcharts.js")).default;
      chart = new ApexCharts(node, options);
      chart.render();
    }
    asyncInitChart();
    return {
      update(options2) {
        if (chart) {
          chart.updateOptions(options2);
        }
      },
      destroy() {
        if (chart) {
          chart.destroy();
        }
      }
    };
  }
  var div = root16();
  action(div, ($$node, $$action_arg) => initChart == null ? void 0 : initChart($$node, $$action_arg), () => $$props.options);
  template_effect(() => set_class(div, 1, clsx2($$props.class)));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart = hmr(Chart, () => Chart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart[HMR].source;
    set(Chart[HMR].source, module.default[HMR].original);
  });
}
var Chart_default = Chart;

// node_modules/flowbite-svelte/dist/darkmode/DarkMode.svelte
DarkMode[FILENAME] = "node_modules/flowbite-svelte/dist/darkmode/DarkMode.svelte";
var root_113 = add_locations(
  with_script(from_html(
    `<script>
    if ("THEME_PREFERENCE_KEY" in localStorage) {
      localStorage.getItem("THEME_PREFERENCE_KEY") === "dark" ? window.document.documentElement.classList.add("dark") : window.document.documentElement.classList.remove("dark");
    } else {
      if (window.matchMedia("(prefers-color-scheme: dark)").matches) window.document.documentElement.classList.add("dark");
    }
  <\/script><!>`,
    1
  )),
  DarkMode[FILENAME],
  [[25, 2]]
);
var root_39 = add_locations(
  from_svg(`<svg role="img" aria-label="Light mode" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1
    0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd" clip-rule="evenodd"></path></svg>`),
  DarkMode[FILENAME],
  [[39, 6, [[40, 8]]]]
);
var root_54 = add_locations(from_svg(`<svg role="img" aria-label="Dark mode" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path></svg>`), DarkMode[FILENAME], [[53, 6, [[54, 8]]]]);
var root17 = add_locations(from_html(`<button><span class="hidden dark:block"><!></span> <span class="block dark:hidden"><!></span></button>`), DarkMode[FILENAME], [[34, 0, [[35, 2], [49, 2]]]]);
function DarkMode($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, DarkMode);
  let size = prop($$props, "size", 3, "md"), ariaLabel = prop($$props, "ariaLabel", 3, "Dark mode"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "class",
      "lightIcon",
      "darkIcon",
      "size",
      "ariaLabel"
    ],
    "restProps"
  );
  const btnCls = darkmode({ class: $$props.class });
  const sizes = { sm: "w-4 h-4", md: "w-5 h-5", lg: "w-6 h-6" };
  const toggleTheme = (ev) => {
    const target = ev.target;
    const isDark = target.ownerDocument.documentElement.classList.toggle("dark");
    if (strict_equals(target.ownerDocument, document))
      localStorage.setItem("THEME_PREFERENCE_KEY", isDark ? "dark" : "light");
  };
  var button2 = root17();
  head(($$anchor2) => {
    var fragment = root_113();
    var node = sibling(first_child(fragment));
    append($$anchor2, fragment);
  });
  let attributes;
  var span2 = child(button2);
  var node_1 = child(span2);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      snippet(node_2, () => $$props.lightIcon);
      append($$anchor2, fragment_1);
    };
    var alternate = ($$anchor2) => {
      var svg = root_39();
      template_effect(() => set_class(svg, 0, clsx2(sizes[size()])));
      append($$anchor2, svg);
    };
    if_block(node_1, ($$render) => {
      if ($$props.lightIcon) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  reset(span2);
  var span_1 = sibling(span2, 2);
  var node_3 = child(span_1);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_2 = comment();
      var node_4 = first_child(fragment_2);
      snippet(node_4, () => $$props.darkIcon);
      append($$anchor2, fragment_2);
    };
    var alternate_1 = ($$anchor2) => {
      var svg_1 = root_54();
      template_effect(() => set_class(svg_1, 0, clsx2(sizes[size()])));
      append($$anchor2, svg_1);
    };
    if_block(node_3, ($$render) => {
      if ($$props.darkIcon) $$render(consequent_1);
      else $$render(alternate_1, false);
    });
  }
  reset(span_1);
  reset(button2);
  template_effect(() => attributes = set_attributes(button2, attributes, {
    onclick: toggleTheme,
    "aria-label": ariaLabel(),
    type: "button",
    ...restProps,
    class: btnCls,
    tabindex: 0
  }));
  append($$anchor, button2);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DarkMode = hmr(DarkMode, () => DarkMode[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DarkMode[HMR].source;
    set(DarkMode[HMR].source, module.default[HMR].original);
  });
}
var DarkMode_default = DarkMode;

// node_modules/flowbite-svelte/dist/darkmode/theme.js
var darkmode = ce({
  base: "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-hidden rounded-lg text-sm p-2.5"
});

// node_modules/flowbite-svelte/dist/datepicker/theme.js
var datepicker = ce({
  slots: {
    base: "inline-block rounded-lg bg-white dark:bg-gray-700 shadow-lg p-4",
    input: "w-full rounded-md border px-4 py-2 text-sm focus:ring-2 focus:outline-none outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-white",
    titleVariant: "mb-2 text-lg font-semibold text-gray-900 dark:text-white",
    polite: "text-sm rounded-lg text-gray-900 dark:text-white bg-white dark:bg-gray-700 font-semibold py-2.5 px-5 hover:bg-gray-100 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-200",
    button: "absolute inset-y-0 right-0 flex items-center px-3 text-gray-500 focus:outline-hidden dark:text-gray-400",
    actionButtons: "mt-4 flex justify-between",
    columnHeader: "text-center text-sm font-medium text-gray-500 dark:text-gray-400",
    grid: "grid grid-cols-7 gap-1 w-64",
    nav: "mb-4 flex items-center justify-between",
    dayButton: "h-8 w-full hover:bg-gray-100 dark:hover:bg-gray-600 block flex-1 leading-9 border-0 rounded-lg cursor-pointer text-center text-gray-900 dark:text-white font-semibold text-sm day"
  },
  variants: {
    color: {
      primary: { input: "focus:ring-primary-500 dark:focus:ring-primary-400", dayButton: "bg-primary-100 dark:bg-primary-900" },
      blue: { input: "focus:ring-blue-500 dark:focus:ring-blue-400", dayButton: "bg-blue-100 dark:bg-blue-900" },
      red: { input: "focus:ring-red-500 dark:focus:ring-red-400", dayButton: "bg-red-100 dark:bg-red-900" },
      green: { input: "focus:ring-green-500 dark:focus:ring-green-400", dayButton: "bg-green-100 dark:bg-green-900" },
      yellow: { input: "focus:ring-yellow-500 dark:focus:ring-yellow-400", dayButton: "bg-yellow-100 dark:bg-yellow-900" },
      purple: { input: "focus:ring-purple-500 dark:focus:ring-purple-400", dayButton: "bg-purple-100 dark:bg-purple-900" },
      dark: { input: "focus:ring-gray-500 dark:focus:ring-gray-400", dayButton: "bg-gray-100 dark:bg-gray-900" },
      light: { input: "focus:ring-gray-500 dark:focus:ring-gray-400", dayButton: "bg-gray-100 dark:bg-gray-900" },
      alternative: { input: "focus:ring-alternative-500 dark:focus:ring-alternative-400", dayButton: "bg-alternative-100 dark:bg-alternative-900" },
      secondary: { input: "focus:ring-secondary-500 dark:focus:ring-secondary-400", dayButton: "bg-secondary-100 dark:bg-secondary-900" },
      gray: { input: "focus:ring-gray-500 dark:focus:ring-gray-400", dayButton: "bg-gray-100 dark:bg-gray-900" },
      orange: { input: "focus:ring-orange-500 dark:focus:ring-orange-400", dayButton: "bg-orange-100 dark:bg-orange-900" },
      amber: { input: "focus:ring-amber-500 dark:focus:ring-amber-400", dayButton: "bg-amber-100 dark:bg-amber-900" },
      lime: { input: "focus:ring-lime-500 dark:focus:ring-lime-400", dayButton: "bg-lime-100 dark:bg-lime-900" },
      emerald: { input: "focus:ring-emerald-500 dark:focus:ring-emerald-400", dayButton: "bg-emerald-100 dark:bg-emerald-900" },
      teal: { input: "focus:ring-teal-500 dark:focus:ring-teal-400", dayButton: "bg-teal-100 dark:bg-teal-900" },
      cyan: { input: "focus:ring-cyan-500 dark:focus:ring-cyan-400", dayButton: "bg-cyan-100 dark:bg-cyan-900" },
      sky: { input: "focus:ring-sky-500 dark:focus:ring-sky-400", dayButton: "bg-sky-100 dark:bg-sky-900" },
      indigo: { input: "focus:ring-indigo-500 dark:focus:ring-indigo-400", dayButton: "bg-indigo-100 dark:bg-indigo-900" },
      violet: { input: "focus:ring-violet-500 dark:focus:ring-violet-400", dayButton: "bg-violet-100 dark:bg-violet-900" },
      fuchsia: { input: "focus:ring-fuchsia-500 dark:focus:ring-fuchsia-400", dayButton: "bg-fuchsia-100 dark:bg-fuchsia-900" },
      pink: { input: "focus:ring-pink-500 dark:focus:ring-pink-400", dayButton: "bg-pink-100 dark:bg-pink-900" },
      rose: { input: "focus:ring-rose-500 dark:focus:ring-rose-400", dayButton: "bg-rose-100 dark:bg-rose-900" }
    },
    inline: {
      false: { base: "absolute z-10 mt-1" }
    },
    current: {
      true: { dayButton: "text-gray-400 dark:text-gray-500" }
    },
    today: {
      true: { dayButton: "font-bold" }
    }
  },
  compoundVariants: []
});

// node_modules/flowbite-svelte/dist/datepicker/Datepicker.svelte
Datepicker[FILENAME] = "node_modules/flowbite-svelte/dist/datepicker/Datepicker.svelte";
function handleInputChange(__1, inputElement, handleDaySelect) {
  var _a;
  const date = new Date(((_a = get(inputElement)) == null ? void 0 : _a.value) ?? "");
  if (!isNaN(date.getTime())) {
    handleDaySelect(date);
  }
}
function handleInputKeydown(event3, isOpen) {
  if (strict_equals(event3.key, "Enter") || strict_equals(event3.key, " ")) {
    event3.preventDefault();
    set(isOpen, !get(isOpen));
  }
}
var root_210 = add_locations(from_svg(`<svg class="h-3 w-3 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"></path></svg>`), Datepicker[FILENAME], [[177, 4, [[178, 6]]]]);
var on_click2 = (__2, isOpen) => set(isOpen, !get(isOpen));
var root_310 = add_locations(from_html(`<div class="relative"><input type="text" aria-haspopup="dialog"/> <button type="button"><svg class="h-4 w-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20"><path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"></path></svg></button></div>`), Datepicker[FILENAME], [
  [
    185,
    4,
    [
      [186, 6],
      [
        187,
        6,
        [[188, 8, [[189, 10]]]]
      ]
    ]
  ]
]);
var root_55 = add_locations(from_html(`<h2> </h2>`), Datepicker[FILENAME], [[198, 8]]);
var root_64 = add_locations(from_html(`<div role="columnheader"> </div>`), Datepicker[FILENAME], [[209, 10]]);
var on_click_1 = (__3, handleDaySelect, day) => handleDaySelect(get(day));
var root_72 = add_locations(from_html(`<button role="gridcell"> </button>`), Datepicker[FILENAME], [[213, 10]]);
var root_82 = add_locations(from_html(`<div><!> <!> <!></div>`), Datepicker[FILENAME], [[219, 8]]);
var root_45 = add_locations(from_html(`<div id="datepicker-dropdown" role="dialog" aria-label="Calendar"><!> <div><!> <h3 aria-live="polite"> </h3> <!></div> <div role="grid"><!> <!></div> <!></div>`), Datepicker[FILENAME], [
  [
    196,
    4,
    [
      [200, 6, [[202, 8]]],
      [207, 6]
    ]
  ]
]);
var root18 = add_locations(from_html(`<div><!> <!></div>`), Datepicker[FILENAME], [[183, 0]]);
function Datepicker($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Datepicker);
  const navButton = wrap_snippet(Datepicker, function($$anchor2, forward = noop) {
    validate_snippet_args(...arguments);
    var fragment = comment();
    var node = first_child(fragment);
    const expression = user_derived(() => forward() ? "Next month" : "Previous month");
    ToolbarButton_default(node, {
      color: "dark",
      onclick: () => changeMonth(forward() ? 1 : -1),
      size: "lg",
      get "aria-label"() {
        return get(expression);
      },
      children: wrap_snippet(Datepicker, ($$anchor3, $$slotProps) => {
        var svg = root_210();
        var path = child(svg);
        reset(svg);
        template_effect(() => set_attribute(path, "d", forward() ? "M1 5h12m0 0L9 1m4 4L9 9" : "M13 5H1m0 0 4 4M1 5l4-4"));
        append($$anchor3, svg);
      }),
      $$slots: { default: true }
    });
    append($$anchor2, fragment);
  });
  let value = prop($$props, "value", 15), defaultDate = prop($$props, "defaultDate", 3, null), range2 = prop($$props, "range", 3, false), rangeFrom = prop($$props, "rangeFrom", 15), rangeTo = prop($$props, "rangeTo", 15), locale = prop($$props, "locale", 3, "default"), firstDayOfWeek = prop($$props, "firstDayOfWeek", 3, 0), placeholder = prop($$props, "placeholder", 3, "Select date"), disabled = prop($$props, "disabled", 3, false), required = prop($$props, "required", 3, false), inputClass = prop($$props, "inputClass", 3, ""), color = prop($$props, "color", 3, "primary"), inline = prop($$props, "inline", 3, false), autohide = prop($$props, "autohide", 3, true), showActionButtons = prop($$props, "showActionButtons", 3, false), title = prop($$props, "title", 3, "");
  const dateFormatDefault = {
    year: "numeric",
    month: "long",
    day: "numeric"
  };
  const dateFormatOptions = user_derived(() => $$props.dateFormat ?? dateFormatDefault);
  let isOpen = state(proxy(inline()));
  let inputElement = state(null);
  let datepickerContainerElement;
  let currentMonth = state(proxy(value() || defaultDate() || /* @__PURE__ */ new Date()));
  let focusedDate = null;
  let calendarRef = state(null);
  let daysInMonth = user_derived(() => getDaysInMonth(get(currentMonth)));
  onMount(() => {
    if (!inline()) {
      datepickerContainerElement == null ? void 0 : datepickerContainerElement.ownerDocument.addEventListener("click", handleClickOutside);
      return () => {
        datepickerContainerElement == null ? void 0 : datepickerContainerElement.ownerDocument.removeEventListener("click", handleClickOutside);
      };
    }
  });
  function getDaysInMonth(date) {
    const year = date.getFullYear();
    const month = date.getMonth();
    const firstDay = new Date(year, month, 0);
    const lastDay = new Date(year, month + 1, 0);
    const daysArray = [];
    let start = firstDay.getDay() - firstDayOfWeek();
    if (start < 0) start += 7;
    for (let i = 0; i < start; i++) {
      daysArray.unshift(new Date(year, month, -i));
    }
    for (let i = 1; i <= lastDay.getDate(); i++) {
      daysArray.push(new Date(year, month, i));
    }
    const remainingDays = 7 - daysArray.length % 7;
    if (remainingDays < 7) {
      for (let i = 1; i <= remainingDays; i++) {
        daysArray.push(new Date(year, month + 1, i));
      }
    }
    return daysArray;
  }
  const getWeekdayNames = () => {
    return Array.from({ length: 7 }, (_, i) => new Date(1970, 0, 5 + i + firstDayOfWeek()).toLocaleDateString(locale(), { weekday: "short" }));
  };
  let weekdays = getWeekdayNames();
  const addMonth = (date, increment) => new Date(date.getFullYear(), date.getMonth() + increment, 1);
  const addDay = (date, increment) => new Date(date.getFullYear(), date.getMonth(), date.getDate() + increment);
  function changeMonth(increment) {
    set(currentMonth, new Date(get(currentMonth).getFullYear(), get(currentMonth).getMonth() + increment, 1), true);
  }
  function handleDaySelect(day) {
    var _a, _b;
    if (range2()) {
      if (!rangeFrom() || rangeFrom() && rangeTo()) {
        rangeFrom(day);
        rangeTo(void 0);
      } else if (day < rangeFrom()) {
        rangeFrom(day);
        rangeTo(rangeFrom());
      } else {
        rangeTo(day);
      }
      (_a = $$props.onselect) == null ? void 0 : _a.call($$props, { from: rangeFrom(), to: rangeTo() });
    } else {
      value(day);
      (_b = $$props.onselect) == null ? void 0 : _b.call($$props, value());
      if (autohide() && !inline()) set(isOpen, false);
    }
  }
  function handleClickOutside(event3) {
    if (get(isOpen) && datepickerContainerElement && !datepickerContainerElement.contains(event3.target)) {
      set(isOpen, false);
    }
  }
  const formatDate = (date) => (date == null ? void 0 : date.toLocaleDateString(locale(), $$props.dateFormat)) ?? "";
  const isSameDate = (date1, date2) => strict_equals(date1 == null ? void 0 : date1.toDateString(), date2 == null ? void 0 : date2.toDateString());
  const isToday = (day) => isSameDate(day, /* @__PURE__ */ new Date());
  const isInRange = (day) => !!(range2() && rangeFrom() && rangeTo() && day > rangeFrom() && day < rangeTo());
  let isSelected = user_derived(() => (day) => range2() ? isSameDate(day, rangeFrom()) || isSameDate(day, rangeTo()) : isSameDate(day, value()));
  function handleCalendarKeydown(event3) {
    var _a;
    if (!get(isOpen)) return;
    if (!focusedDate) {
      focusedDate = value() || /* @__PURE__ */ new Date();
    }
    switch (event3.key) {
      case "ArrowLeft":
        focusedDate = addDay(focusedDate, -1);
        break;
      case "ArrowRight":
        focusedDate = addDay(focusedDate, 1);
        break;
      case "ArrowUp":
        focusedDate = addDay(focusedDate, -7);
        break;
      case "ArrowDown":
        focusedDate = addDay(focusedDate, 7);
        break;
      case "Enter":
        handleDaySelect(focusedDate);
        break;
      case "Escape":
        set(isOpen, false);
        (_a = get(inputElement)) == null ? void 0 : _a.focus();
        break;
      default:
        return;
    }
    event3.preventDefault();
    if (strict_equals(focusedDate.getMonth(), get(currentMonth).getMonth(), false)) {
      set(currentMonth, new Date(focusedDate.getFullYear(), focusedDate.getMonth(), 1), true);
    }
    setTimeout(
      () => {
        var _a2;
        const focusedButton = (_a2 = get(calendarRef)) == null ? void 0 : _a2.querySelector(`button[aria-label="${focusedDate.toLocaleDateString(locale(), {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric"
        })}"]`);
        focusedButton == null ? void 0 : focusedButton.focus();
      },
      0
    );
  }
  function handleClear() {
    var _a;
    value(rangeFrom(rangeTo(void 0)));
    (_a = $$props.onclear) == null ? void 0 : _a.call($$props);
  }
  function handleApply() {
    var _a;
    const result = range2() ? { from: rangeFrom(), to: rangeTo() } : value();
    if (result) (_a = $$props.onapply) == null ? void 0 : _a.call($$props, result);
    if (!inline()) set(isOpen, false);
  }
  let {
    base,
    input: input2,
    button: button2,
    titleVariant,
    actionButtons,
    columnHeader,
    polite,
    grid,
    nav,
    dayButton
  } = datepicker();
  var div = root18();
  var node_1 = child(div);
  {
    var consequent = ($$anchor2) => {
      var div_1 = root_310();
      var input_1 = child(div_1);
      remove_input_defaults(input_1);
      input_1.__input = [
        handleInputChange,
        inputElement,
        handleDaySelect
      ];
      input_1.__keydown = [handleInputKeydown, isOpen];
      bind_this(input_1, ($$value) => set(inputElement, $$value), () => get(inputElement));
      var button_1 = sibling(input_1, 2);
      button_1.__click = [on_click2, isOpen];
      reset(div_1);
      template_effect(
        ($0, $1, $2) => {
          set_class(input_1, 1, $0);
          set_attribute(input_1, "placeholder", placeholder());
          set_value(input_1, $1);
          input_1.disabled = disabled();
          input_1.required = required();
          set_class(button_1, 1, $2);
          button_1.disabled = disabled();
          set_attribute(button_1, "aria-label", get(isOpen) ? "Close date picker" : "Open date picker");
        },
        [
          () => clsx2(input2({ color: color(), class: inputClass() })),
          () => range2() ? `${formatDate(rangeFrom())} - ${formatDate(rangeTo())}` : formatDate(value()),
          () => clsx2(button2())
        ]
      );
      event2("focus", input_1, () => set(isOpen, true));
      append($$anchor2, div_1);
    };
    if_block(node_1, ($$render) => {
      if (!inline()) $$render(consequent);
    });
  }
  var node_2 = sibling(node_1, 2);
  {
    var consequent_3 = ($$anchor2) => {
      var div_2 = root_45();
      var node_3 = child(div_2);
      {
        var consequent_1 = ($$anchor3) => {
          var h2 = root_55();
          var text2 = child(h2, true);
          reset(h2);
          template_effect(
            ($0) => {
              set_class(h2, 1, $0);
              set_text(text2, title());
            },
            [() => clsx2(titleVariant())]
          );
          append($$anchor3, h2);
        };
        if_block(node_3, ($$render) => {
          if (title()) $$render(consequent_1);
        });
      }
      var div_3 = sibling(node_3, 2);
      var node_4 = child(div_3);
      navButton(node_4, () => false);
      var h3 = sibling(node_4, 2);
      var text_1 = child(h3, true);
      reset(h3);
      var node_5 = sibling(h3, 2);
      navButton(node_5, () => true);
      reset(div_3);
      var div_4 = sibling(div_3, 2);
      var node_6 = child(div_4);
      each(node_6, 17, () => weekdays, index, ($$anchor3, day) => {
        var div_5 = root_64();
        var text_2 = child(div_5, true);
        reset(div_5);
        template_effect(
          ($0) => {
            set_class(div_5, 1, $0);
            set_text(text_2, get(day));
          },
          [() => clsx2(columnHeader())]
        );
        append($$anchor3, div_5);
      });
      var node_7 = sibling(node_6, 2);
      each(node_7, 17, () => get(daysInMonth), index, ($$anchor3, day) => {
        var button_2 = root_72();
        const current = user_derived(() => strict_equals(get(day).getMonth(), get(currentMonth).getMonth(), false));
        get(current);
        button_2.__click = [on_click_1, handleDaySelect, day];
        button_2.__keydown = handleCalendarKeydown;
        var text_3 = child(button_2, true);
        reset(button_2);
        template_effect(
          ($0, $1, $2, $3, $4) => {
            set_attribute(button_2, "color", $0);
            set_class(button_2, 1, $1);
            set_attribute(button_2, "aria-label", $2);
            set_attribute(button_2, "aria-selected", $3);
            set_text(text_3, $4);
          },
          [
            () => get(isSelected)(get(day)) ? color() : "alternative",
            () => clsx2(dayButton({
              current: get(current),
              today: isToday(get(day)),
              color: isInRange(get(day)) ? color() : void 0
            })),
            () => get(day).toLocaleDateString(locale(), {
              weekday: "long",
              year: "numeric",
              month: "long",
              day: "numeric"
            }),
            () => get(isSelected)(get(day)),
            () => get(day).getDate()
          ]
        );
        append($$anchor3, button_2);
      });
      reset(div_4);
      var node_8 = sibling(div_4, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var div_6 = root_82();
          var node_9 = child(div_6);
          Button_default(node_9, {
            onclick: () => handleDaySelect(/* @__PURE__ */ new Date()),
            get color() {
              return color();
            },
            size: "sm",
            children: wrap_snippet(Datepicker, ($$anchor4, $$slotProps) => {
              next();
              var text_4 = text("Today");
              append($$anchor4, text_4);
            }),
            $$slots: { default: true }
          });
          var node_10 = sibling(node_9, 2);
          Button_default(node_10, {
            onclick: handleClear,
            color: "red",
            size: "sm",
            children: wrap_snippet(Datepicker, ($$anchor4, $$slotProps) => {
              next();
              var text_5 = text("Clear");
              append($$anchor4, text_5);
            }),
            $$slots: { default: true }
          });
          var node_11 = sibling(node_10, 2);
          Button_default(node_11, {
            onclick: handleApply,
            get color() {
              return color();
            },
            size: "sm",
            children: wrap_snippet(Datepicker, ($$anchor4, $$slotProps) => {
              next();
              var text_6 = text("Apply");
              append($$anchor4, text_6);
            }),
            $$slots: { default: true }
          });
          reset(div_6);
          template_effect(($0) => set_class(div_6, 1, $0), [() => clsx2(actionButtons())]);
          append($$anchor3, div_6);
        };
        if_block(node_8, ($$render) => {
          if (showActionButtons()) $$render(consequent_2);
        });
      }
      reset(div_2);
      bind_this(div_2, ($$value) => set(calendarRef, $$value), () => get(calendarRef));
      template_effect(
        ($0, $1, $2, $3, $4) => {
          set_class(div_2, 1, $0);
          set_class(div_3, 1, $1);
          set_class(h3, 1, $2);
          set_text(text_1, $3);
          set_class(div_4, 1, $4);
        },
        [
          () => clsx2(base({ inline: inline() })),
          () => clsx2(nav()),
          () => clsx2(polite()),
          () => get(currentMonth).toLocaleString(locale(), { month: "long", year: "numeric" }),
          () => clsx2(grid())
        ]
      );
      transition(3, div_2, () => fade, () => ({ duration: 100 }));
      append($$anchor2, div_2);
    };
    if_block(node_2, ($$render) => {
      if (get(isOpen) || inline()) $$render(consequent_3);
    });
  }
  reset(div);
  bind_this(div, ($$value) => datepickerContainerElement = $$value, () => datepickerContainerElement);
  template_effect(() => set_class(div, 1, clsx2(["relative", inline() && "inline-block"])));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Datepicker = hmr(Datepicker, () => Datepicker[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Datepicker[HMR].source;
    set(Datepicker[HMR].source, module.default[HMR].original);
  });
}
var Datepicker_default = Datepicker;
delegate(["input", "keydown", "click"]);

// node_modules/flowbite-svelte/dist/device-mockups/Android.svelte
Android[FILENAME] = "node_modules/flowbite-svelte/dist/device-mockups/Android.svelte";
var root19 = add_locations(from_html(`<div><div></div> <div></div> <div></div> <div></div> <div></div> <div><!></div></div>`), Android[FILENAME], [
  [
    10,
    0,
    [
      [11, 2],
      [12, 2],
      [13, 2],
      [14, 2],
      [15, 2],
      [16, 2]
    ]
  ]
]);
function Android($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Android);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "divClass",
      "div2Class",
      "div3Class",
      "div4Class",
      "div5Class",
      "div6Class",
      "div7Class"
    ],
    "restProps"
  );
  const {
    div,
    slot,
    top,
    leftTop,
    leftMid,
    leftBot,
    right
  } = android();
  var div_1 = root19();
  let attributes;
  var div_2 = child(div_1);
  var div_3 = sibling(div_2, 2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  var div_6 = sibling(div_5, 2);
  var div_7 = sibling(div_6, 2);
  var node = child(div_7);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.children);
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if ($$props.children) $$render(consequent);
    });
  }
  reset(div_7);
  reset(div_1);
  template_effect(
    ($0, $1, $2, $3, $4, $5, $6) => {
      attributes = set_attributes(div_1, attributes, { ...restProps, class: $0 });
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
      set_class(div_5, 1, $4);
      set_class(div_6, 1, $5);
      set_class(div_7, 1, $6);
    },
    [
      () => div({ class: $$props.divClass }),
      () => clsx2(top({ class: $$props.div2Class })),
      () => clsx2(leftTop({ class: $$props.div3Class })),
      () => clsx2(leftMid({ class: $$props.div4Class })),
      () => clsx2(leftBot({ class: $$props.div5Class })),
      () => clsx2(right({ class: $$props.div6Class })),
      () => clsx2(slot({ class: $$props.div7Class }))
    ]
  );
  append($$anchor, div_1);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Android = hmr(Android, () => Android[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Android[HMR].source;
    set(Android[HMR].source, module.default[HMR].original);
  });
}
var Android_default = Android;

// node_modules/flowbite-svelte/dist/device-mockups/DefaultMockup.svelte
DefaultMockup[FILENAME] = "node_modules/flowbite-svelte/dist/device-mockups/DefaultMockup.svelte";
var root20 = add_locations(from_html(`<div><div></div> <div></div> <div></div> <div></div> <div><!></div></div>`), DefaultMockup[FILENAME], [
  [
    10,
    0,
    [
      [11, 2],
      [12, 2],
      [13, 2],
      [14, 2],
      [15, 2]
    ]
  ]
]);
function DefaultMockup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, DefaultMockup);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "divClass",
      "div2Class",
      "div3Class",
      "div4Class",
      "div5Class",
      "div6Class"
    ],
    "restProps"
  );
  const { div, slot, top, leftTop, leftBot, right } = defaultMockup();
  var div_1 = root20();
  let attributes;
  var div_2 = child(div_1);
  var div_3 = sibling(div_2, 2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  var div_6 = sibling(div_5, 2);
  var node = child(div_6);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.children);
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if ($$props.children) $$render(consequent);
    });
  }
  reset(div_6);
  reset(div_1);
  template_effect(
    ($0, $1, $2, $3, $4, $5) => {
      attributes = set_attributes(div_1, attributes, { ...restProps, class: $0 });
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
      set_class(div_5, 1, $4);
      set_class(div_6, 1, $5);
    },
    [
      () => div({ class: $$props.divClass }),
      () => clsx2(top({ class: $$props.div2Class })),
      () => clsx2(leftTop({ class: $$props.div3Class })),
      () => clsx2(leftBot({ class: $$props.div4Class })),
      () => clsx2(right({ class: $$props.div5Class })),
      () => clsx2(slot({ class: $$props.div6Class }))
    ]
  );
  append($$anchor, div_1);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DefaultMockup = hmr(DefaultMockup, () => DefaultMockup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DefaultMockup[HMR].source;
    set(DefaultMockup[HMR].source, module.default[HMR].original);
  });
}
var DefaultMockup_default = DefaultMockup;

// node_modules/flowbite-svelte/dist/device-mockups/Desktop.svelte
Desktop[FILENAME] = "node_modules/flowbite-svelte/dist/device-mockups/Desktop.svelte";
var root21 = add_locations(from_html(`<div><div><!></div></div> <div></div> <div></div>`, 1), Desktop[FILENAME], [
  [10, 0, [[11, 2]]],
  [17, 0],
  [18, 0]
]);
function Desktop($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Desktop);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "divClass",
      "div2Class",
      "div3Class",
      "div4Class"
    ],
    "restProps"
  );
  const { div, inner, bot, botUnder } = desktop();
  var fragment = root21();
  var div_1 = first_child(fragment);
  let attributes;
  var div_2 = child(div_1);
  var node = child(div_2);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      snippet(node_1, () => $$props.children);
      append($$anchor2, fragment_1);
    };
    if_block(node, ($$render) => {
      if ($$props.children) $$render(consequent);
    });
  }
  reset(div_2);
  reset(div_1);
  var div_3 = sibling(div_1, 2);
  var div_4 = sibling(div_3, 2);
  template_effect(
    ($0, $1, $2, $3) => {
      attributes = set_attributes(div_1, attributes, { ...restProps, class: $0 });
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
    },
    [
      () => div({ class: $$props.divClass }),
      () => clsx2(inner({ class: $$props.div2Class })),
      () => clsx2(bot({ class: $$props.div3Class })),
      () => clsx2(botUnder({ class: $$props.div4Class }))
    ]
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Desktop = hmr(Desktop, () => Desktop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Desktop[HMR].source;
    set(Desktop[HMR].source, module.default[HMR].original);
  });
}
var Desktop_default = Desktop;

// node_modules/flowbite-svelte/dist/device-mockups/Ios.svelte
Ios[FILENAME] = "node_modules/flowbite-svelte/dist/device-mockups/Ios.svelte";
var root22 = add_locations(from_html(`<div><div></div> <div></div> <div></div> <div></div> <div><!></div></div>`), Ios[FILENAME], [
  [
    10,
    0,
    [
      [11, 2],
      [12, 2],
      [13, 2],
      [14, 2],
      [15, 2]
    ]
  ]
]);
function Ios($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Ios);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "divClass",
      "div2Class",
      "div3Class",
      "div4Class",
      "div5Class",
      "div6Class"
    ],
    "restProps"
  );
  const { div, slot, top, leftTop, leftBot, right } = ios();
  var div_1 = root22();
  let attributes;
  var div_2 = child(div_1);
  var div_3 = sibling(div_2, 2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  var div_6 = sibling(div_5, 2);
  var node = child(div_6);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.children);
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if ($$props.children) $$render(consequent);
    });
  }
  reset(div_6);
  reset(div_1);
  template_effect(
    ($0, $1, $2, $3, $4, $5) => {
      attributes = set_attributes(div_1, attributes, { ...restProps, class: $0 });
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
      set_class(div_5, 1, $4);
      set_class(div_6, 1, $5);
    },
    [
      () => div({ class: $$props.divClass }),
      () => clsx2(top({ class: $$props.div2Class })),
      () => clsx2(leftTop({ class: $$props.div3Class })),
      () => clsx2(leftBot({ class: $$props.div4Class })),
      () => clsx2(right({ class: $$props.div5Class })),
      () => clsx2(slot({ class: $$props.div6Class }))
    ]
  );
  append($$anchor, div_1);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ios = hmr(Ios, () => Ios[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ios[HMR].source;
    set(Ios[HMR].source, module.default[HMR].original);
  });
}
var Ios_default = Ios;

// node_modules/flowbite-svelte/dist/device-mockups/Laptop.svelte
Laptop[FILENAME] = "node_modules/flowbite-svelte/dist/device-mockups/Laptop.svelte";
var root23 = add_locations(from_html(`<div><div><div><!></div></div> <div><div></div></div></div>`), Laptop[FILENAME], [
  [
    9,
    0,
    [
      [10, 2, [[11, 4]]],
      [18, 2, [[19, 4]]]
    ]
  ]
]);
function Laptop($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Laptop);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "divClass",
      "div2Class",
      "div3Class",
      "div4Class"
    ],
    "restProps"
  );
  const { div, inner, bot, botCen } = laptop();
  var div_1 = root23();
  let attributes;
  var div_2 = child(div_1);
  var div_3 = child(div_2);
  var node = child(div_3);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.children);
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if ($$props.children) $$render(consequent);
    });
  }
  reset(div_3);
  reset(div_2);
  var div_4 = sibling(div_2, 2);
  var div_5 = child(div_4);
  reset(div_4);
  reset(div_1);
  template_effect(
    ($0, $1, $2, $3) => {
      attributes = set_attributes(div_1, attributes, { ...restProps });
      set_class(div_2, 1, $0);
      set_class(div_3, 1, $1);
      set_class(div_4, 1, $2);
      set_class(div_5, 1, $3);
    },
    [
      () => clsx2(div({ class: $$props.divClass })),
      () => clsx2(inner({ class: $$props.div2Class })),
      () => clsx2(bot({ class: $$props.div3Class })),
      () => clsx2(botCen({ class: $$props.div4Class }))
    ]
  );
  append($$anchor, div_1);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Laptop = hmr(Laptop, () => Laptop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Laptop[HMR].source;
    set(Laptop[HMR].source, module.default[HMR].original);
  });
}
var Laptop_default = Laptop;

// node_modules/flowbite-svelte/dist/device-mockups/Smartwatch.svelte
Smartwatch[FILENAME] = "node_modules/flowbite-svelte/dist/device-mockups/Smartwatch.svelte";
var root24 = add_locations(from_html(`<div><div></div> <div><div></div> <div></div> <div><!></div></div> <div></div></div>`), Smartwatch[FILENAME], [
  [
    10,
    0,
    [
      [11, 2],
      [
        12,
        2,
        [[13, 4], [14, 4], [15, 4]]
      ],
      [21, 2]
    ]
  ]
]);
function Smartwatch($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Smartwatch);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "divClass",
      "div2Class",
      "div3Class",
      "div4Class",
      "div5Class",
      "div6Class"
    ],
    "restProps"
  );
  const { div, top, rightTop, rightBot, bot, slot } = smartwatch();
  var div_1 = root24();
  let attributes;
  var div_2 = child(div_1);
  var div_3 = sibling(div_2, 2);
  var div_4 = child(div_3);
  var div_5 = sibling(div_4, 2);
  var div_6 = sibling(div_5, 2);
  var node = child(div_6);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.children);
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if ($$props.children) $$render(consequent);
    });
  }
  reset(div_6);
  reset(div_3);
  var div_7 = sibling(div_3, 2);
  reset(div_1);
  template_effect(
    ($0, $1, $2, $3, $4, $5) => {
      attributes = set_attributes(div_1, attributes, { ...restProps });
      set_class(div_2, 1, $0);
      set_class(div_3, 1, $1);
      set_class(div_4, 1, $2);
      set_class(div_5, 1, $3);
      set_class(div_6, 1, $4);
      set_class(div_7, 1, $5);
    },
    [
      () => clsx2(div({ class: $$props.divClass })),
      () => clsx2(top({ class: $$props.div2Class })),
      () => clsx2(rightTop({ class: $$props.div3Class })),
      () => clsx2(rightBot({ class: $$props.div4Class })),
      () => clsx2(slot({ class: $$props.div5Class })),
      () => clsx2(bot({ class: $$props.div6Class }))
    ]
  );
  append($$anchor, div_1);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Smartwatch = hmr(Smartwatch, () => Smartwatch[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Smartwatch[HMR].source;
    set(Smartwatch[HMR].source, module.default[HMR].original);
  });
}
var Smartwatch_default = Smartwatch;

// node_modules/flowbite-svelte/dist/device-mockups/Tablet.svelte
Tablet[FILENAME] = "node_modules/flowbite-svelte/dist/device-mockups/Tablet.svelte";
var root25 = add_locations(from_html(`<div><div></div> <div></div> <div></div> <div></div> <div><!></div></div>`), Tablet[FILENAME], [
  [
    10,
    0,
    [
      [11, 2],
      [12, 2],
      [13, 2],
      [14, 2],
      [15, 2]
    ]
  ]
]);
function Tablet($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Tablet);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "divClass",
      "div2Class",
      "div3Class",
      "div4Class",
      "div5Class",
      "div6Class"
    ],
    "restProps"
  );
  const {
    div,
    leftTop,
    leftMid,
    leftBot,
    right,
    slot
  } = tablet();
  var div_1 = root25();
  let attributes;
  var div_2 = child(div_1);
  var div_3 = sibling(div_2, 2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  var div_6 = sibling(div_5, 2);
  var node = child(div_6);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.children);
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if ($$props.children) $$render(consequent);
    });
  }
  reset(div_6);
  reset(div_1);
  template_effect(
    ($0, $1, $2, $3, $4, $5) => {
      attributes = set_attributes(div_1, attributes, { ...restProps, class: $0 });
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
      set_class(div_5, 1, $4);
      set_class(div_6, 1, $5);
    },
    [
      () => div({ class: $$props.divClass }),
      () => clsx2(leftTop({ class: $$props.div2Class })),
      () => clsx2(leftMid({ class: $$props.div3Class })),
      () => clsx2(leftBot({ class: $$props.div4Class })),
      () => clsx2(right({ class: $$props.div5Class })),
      () => clsx2(slot({ class: $$props.div6Class }))
    ]
  );
  append($$anchor, div_1);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tablet = hmr(Tablet, () => Tablet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tablet[HMR].source;
    set(Tablet[HMR].source, module.default[HMR].original);
  });
}
var Tablet_default = Tablet;

// node_modules/flowbite-svelte/dist/device-mockups/DeviceMockup.svelte
DeviceMockup[FILENAME] = "node_modules/flowbite-svelte/dist/device-mockups/DeviceMockup.svelte";
function DeviceMockup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, DeviceMockup);
  let device = prop($$props, "device", 3, "default");
  const componets = {
    android: Android_default,
    ios: Ios_default,
    tablet: Tablet_default,
    default: DefaultMockup_default,
    smartwatch: Smartwatch_default,
    laptop: Laptop_default,
    desktop: Desktop_default
  };
  let DeviceComponent = user_derived(() => componets[device()]);
  var fragment = comment();
  var node = first_child(fragment);
  component(node, () => get(DeviceComponent), ($$anchor2, $$component) => {
    $$component($$anchor2, {
      children: wrap_snippet(DeviceMockup, ($$anchor3, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.children);
        append($$anchor3, fragment_1);
      }),
      $$slots: { default: true }
    });
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DeviceMockup = hmr(DeviceMockup, () => DeviceMockup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DeviceMockup[HMR].source;
    set(DeviceMockup[HMR].source, module.default[HMR].original);
  });
}
var DeviceMockup_default = DeviceMockup;

// node_modules/flowbite-svelte/dist/device-mockups/theme.js
var android = ce({
  slots: {
    div: "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[14px] rounded-xl h-[600px] w-[300px] shadow-xl",
    slot: "rounded-xl overflow-hidden w-[272px] h-[572px] bg-white dark:bg-gray-800",
    top: "w-[148px] h-[18px] bg-gray-800 top-0 rounded-b-[1rem] left-1/2 -translate-x-1/2 absolute",
    leftTop: "h-[32px] w-[3px] bg-gray-800 absolute -left-[17px] top-[72px] rounded-l-lg",
    leftMid: "h-[46px] w-[3px] bg-gray-800 absolute -left-[17px] top-[124px] rounded-l-lg",
    leftBot: "h-[46px] w-[3px] bg-gray-800 absolute -left-[17px] top-[178px] rounded-l-lg",
    right: "h-[64px] w-[3px] bg-gray-800 absolute -right-[17px] top-[142px] rounded-r-lg"
  }
});
var defaultMockup = ce({
  slots: {
    div: "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[14px] rounded-[2.5rem] h-[600px] w-[300px]",
    slot: "rounded-[2rem] overflow-hidden w-[272px] h-[572px] bg-white dark:bg-gray-800",
    top: "h-[32px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[72px] rounded-l-lg",
    leftTop: "h-[46px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[124px] rounded-l-lg",
    leftBot: "h-[46px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[178px] rounded-l-lg",
    right: "h-[64px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -right-[17px] top-[142px] rounded-r-lg"
  }
});
var desktop = ce({
  slots: {
    inner: "rounded-xl overflow-hidden h-[140px] md:h-[262px]",
    bot: "relative mx-auto bg-gray-900 dark:bg-gray-700 rounded-b-xl h-[24px] max-w-[301px] md:h-[42px] md:max-w-[512px]",
    botUnder: "relative mx-auto bg-gray-800 rounded-b-xl h-[55px] max-w-[83px] md:h-[95px] md:max-w-[142px]",
    div: "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[16px] rounded-t-xl h-[172px] max-w-[301px] md:h-[294px] md:max-w-[512px]"
  }
});
var ios = ce({
  slots: {
    div: "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[14px] rounded-[2.5rem] h-[600px] w-[300px] shadow-xl",
    slot: "rounded-[2rem] overflow-hidden w-[272px] h-[572px] bg-white dark:bg-gray-800",
    top: "w-[148px] h-[18px] bg-gray-800 top-0 rounded-b-[1rem] left-1/2 -translate-x-1/2 absolute",
    leftTop: "h-[46px] w-[3px] bg-gray-800 absolute -left-[17px] top-[124px] rounded-l-lg",
    leftBot: "h-[46px] w-[3px] bg-gray-800 absolute -left-[17px] top-[178px] rounded-l-lg",
    right: "h-[64px] w-[3px] bg-gray-800 absolute -right-[17px] top-[142px] rounded-r-lg"
  }
});
var laptop = ce({
  slots: {
    div: "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[8px] rounded-t-xl h-[172px] max-w-[301px] md:h-[294px] md:max-w-[512px]",
    inner: "rounded-lg overflow-hidden h-[156px] md:h-[278px] bg-white dark:bg-gray-800",
    bot: "relative mx-auto bg-gray-900 dark:bg-gray-700 rounded-b-xl rounded-t-sm h-[17px] max-w-[351px] md:h-[21px] md:max-w-[597px]",
    botCen: "absolute left-1/2 top-0 -translate-x-1/2 rounded-b-xl w-[56px] h-[5px] md:w-[96px] md:h-[8px] bg-gray-800"
  }
});
var smartwatch = ce({
  slots: {
    div: "relative mx-auto bg-gray-800 dark:bg-gray-700 rounded-t-[2.5rem] h-[63px] max-w-[133px]",
    slot: "rounded-[2rem] overflow-hidden h-[193px] w-[188px]",
    rightTop: "h-[41px] w-[6px] bg-gray-800 dark:bg-gray-800 absolute -right-[16px] top-[40px] rounded-r-lg",
    rightBot: "h-[32px] w-[6px] bg-gray-800 dark:bg-gray-800 absolute -right-[16px] top-[88px] rounded-r-lg",
    top: "relative mx-auto border-gray-900 dark:bg-gray-800 dark:border-gray-800 border-[10px] rounded-[2.5rem] h-[213px] w-[208px]",
    bot: "relative mx-auto bg-gray-800 dark:bg-gray-700 rounded-b-[2.5rem] h-[63px] max-w-[133px]"
  }
});
var tablet = ce({
  slots: {
    div: "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[14px] rounded-[2.5rem] h-[454px] max-w-[341px] md:h-[682px] md:max-w-[512px]",
    slot: "rounded-[2rem] overflow-hidden h-[426px] md:h-[654px] bg-white dark:bg-gray-800",
    leftTop: "h-[32px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[72px] rounded-l-lg",
    leftMid: "h-[46px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[124px] rounded-l-lg",
    leftBot: "h-[46px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[178px] rounded-l-lg",
    right: "h-[64px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -right-[17px] top-[142px] rounded-r-lg"
  }
});

// node_modules/flowbite-svelte/dist/utils/Arrow.svelte
Arrow[FILENAME] = "node_modules/flowbite-svelte/dist/utils/Arrow.svelte";
var root26 = add_locations(from_html(`<div></div>`), Arrow[FILENAME], [[47, 0]]);
var $$css = {
  hash: "s-vwJf0_af9eUU",
  code: "\n  .clip {\n    clip-path: polygon(0 0, 0% 100%, 100% 100%, 100% 85%, 15% 0);\n  }\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXJyb3cuc3ZlbHRlIiwibWFwcGluZ3MiOiIiLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbIkFycm93LnN2ZWx0ZSJdfQ== */"
};
function Arrow($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Arrow);
  append_styles($$anchor, $$css);
  let placement = prop($$props, "placement", 3, "top"), strategy = prop($$props, "strategy", 3, "absolute"), className = prop($$props, "class", 3, "");
  const px = (n2) => n2 ? `${n2}px` : "";
  getSide;
  getOppositePlacement;
  function getBorderWidth(element2) {
    const computedStyle = window.getComputedStyle(element2);
    return Math.max(parseFloat(computedStyle.borderLeftWidth), parseFloat(computedStyle.borderBottomWidth)) - 0.3;
  }
  const rotationMap = {
    left: " rotate-45",
    right: " -rotate-135",
    top: " rotate-135",
    bottom: " -rotate-45"
  };
  function positioning(node) {
    user_effect(() => {
      node.style.position = strategy();
      node.style.left = px($$props.cords.x);
      node.style.top = px($$props.cords.y);
      node.style.right = "";
      node.style.bottom = "";
      let arrowSide = getSide(getOppositePlacement(placement()));
      node.style[arrowSide] = px(-node.offsetWidth / 2 - getBorderWidth(node));
      node.classList.remove("rotate-45", "-rotate-45", "rotate-135", "-rotate-135");
      node.className += rotationMap[arrowSide];
    });
  }
  var div = root26();
  action(div, ($$node) => positioning == null ? void 0 : positioning($$node));
  template_effect(() => set_class(div, 1, `popover-arrow clip pointer-events-none block h-[10px] w-[10px] border-b border-l border-inherit bg-inherit text-inherit ${className() ?? ""}`));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow = hmr(Arrow, () => Arrow[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-vwJf0_af9eUU");
    module.default[HMR].source = Arrow[HMR].source;
    set(Arrow[HMR].source, module.default[HMR].original);
  });
}
var Arrow_default = Arrow;

// node_modules/flowbite-svelte/dist/utils/Popper.svelte
Popper[FILENAME] = "node_modules/flowbite-svelte/dist/utils/Popper.svelte";
var root_114 = add_locations(from_html(`<div><!> <!></div>`), Popper[FILENAME], [[176, 2]]);
var root27 = add_locations(from_html(`<div hidden></div> <!>`, 1), Popper[FILENAME], [[173, 0]]);
function Popper($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Popper);
  const TRIGGER_DELAY = 200;
  let trigger = prop($$props, "trigger", 3, "click"), placement = prop($$props, "placement", 3, "top"), offset2 = prop($$props, "offset", 3, 8), arrow2 = prop($$props, "arrow", 3, false), yOnly = prop($$props, "yOnly", 3, false), strategy = prop($$props, "strategy", 3, "absolute"), middlewares = prop($$props, "middlewares", 19, () => [flip(), shift()]), className = prop($$props, "class", 3, ""), arrowClass = prop($$props, "arrowClass", 3, ""), isOpen = prop($$props, "isOpen", 15, false), transition2 = prop($$props, "transition", 3, fade), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "triggeredBy",
      "trigger",
      "placement",
      "offset",
      "arrow",
      "yOnly",
      "strategy",
      "reference",
      "middlewares",
      "onbeforetoggle",
      "ontoggle",
      "class",
      "arrowClass",
      "isOpen",
      "transitionParams",
      "transition",
      "children"
    ],
    "restProps"
  );
  let focusable = true;
  let clickable = user_derived(() => strict_equals(trigger(), "click"));
  let hoverable = user_derived(() => strict_equals(trigger(), "hover"));
  let popover2 = state(null);
  let invoker = null;
  let referenceElement = null;
  let triggerEls = [];
  let arrowParams = state(proxy({
    placement: placement(),
    cords: { x: 0, y: 0 },
    strategy: strategy()
  }));
  const paramsDefault = { duration: 100, easing: sineIn };
  const paramsOptions = user_derived(() => $$props.transitionParams ?? paramsDefault);
  const px = (n2) => n2 ? `${n2}px` : "";
  function updatePopoverPosition() {
    if (!invoker || !get(popover2)) {
      return;
    }
    const arrowEl = get(popover2).querySelector(".popover-arrow");
    let middleware = [
      ...middlewares(),
      offset(offset2())
    ];
    if (arrowEl) middleware.push(arrow({ element: arrowEl }));
    return computePosition(referenceElement ?? invoker, get(popover2), {
      placement: placement(),
      middleware,
      strategy: strategy()
    }).then(({
      x,
      y,
      middlewareData: { arrow: arrow3 },
      placement: pl,
      strategy: strategy2
    }) => {
      if (get(popover2)) {
        Object.assign(get(popover2).style, {
          position: strategy2,
          left: yOnly() ? "0" : px(x),
          top: px(y)
        });
        if (arrow3 && arrowEl) {
          set(
            arrowParams,
            {
              placement: pl,
              cords: { x: arrow3.x, y: arrow3.y },
              strategy: strategy2
            },
            true
          );
        }
      }
    });
  }
  let isTriggered = false;
  async function open_popover(ev) {
    isTriggered = true;
    await new Promise((resolve) => setTimeout(resolve, TRIGGER_DELAY));
    if (!isTriggered) return;
    ev.preventDefault();
    if (strict_equals(ev.target, invoker, false) && triggerEls.includes(ev.target)) {
      invoker = ev.target;
      isOpen(false);
      await new Promise((resolve) => setTimeout(resolve, TRIGGER_DELAY));
    }
    if (strict_equals(ev.type, "mousedown")) {
      isOpen(!isOpen());
    } else {
      isOpen(true);
    }
  }
  async function close_popover(ev) {
    var _a, _b;
    isTriggered = false;
    await new Promise((resolve) => setTimeout(resolve, TRIGGER_DELAY));
    if (isTriggered) return;
    if (strict_equals(ev == null ? void 0 : ev.type, "mouseleave") && ((_a = get(popover2)) == null ? void 0 : _a.contains(get(popover2).ownerDocument.activeElement))) return;
    if (strict_equals(ev == null ? void 0 : ev.type, "focusout") && ((_b = get(popover2)) == null ? void 0 : _b.contains(get(popover2).ownerDocument.activeElement))) return;
    isOpen(false);
  }
  let autoUpdateDestroy = () => {
  };
  function on_before_toggle(ev) {
    var _a;
    if (!invoker || !get(popover2)) return;
    ev.trigger = invoker;
    (_a = $$props.onbeforetoggle) == null ? void 0 : _a.call($$props, ev);
    if (strict_equals(ev.newState, "open")) {
      autoUpdateDestroy = autoUpdate(referenceElement ?? invoker, get(popover2), updatePopoverPosition);
      get(popover2).ownerDocument.addEventListener("click", closeOnClickOutside);
      get(popover2).ownerDocument.addEventListener("keydown", closeOnEscape);
    } else {
      autoUpdateDestroy();
      get(popover2).ownerDocument.removeEventListener("click", closeOnClickOutside);
      get(popover2).ownerDocument.removeEventListener("keydown", closeOnEscape);
    }
  }
  function on_toggle(ev) {
    var _a;
    if (!invoker) return;
    isOpen(strict_equals(ev.newState, "open"));
    ev.trigger = invoker;
    (_a = $$props.ontoggle) == null ? void 0 : _a.call($$props, ev);
  }
  function set_triggers(node) {
    const events = [
      ["focusin", open_popover, focusable],
      ["focusout", close_popover, focusable],
      [
        "mousedown",
        open_popover,
        get(clickable)
      ],
      [
        "mouseenter",
        open_popover,
        get(hoverable)
      ],
      [
        "mouseleave",
        close_popover,
        get(hoverable)
      ]
    ];
    if ($$props.triggeredBy) triggerEls = [
      ...node.ownerDocument.querySelectorAll($$props.triggeredBy)
    ];
    else if (node.previousElementSibling) triggerEls = [node.previousElementSibling];
    if (!triggerEls.length) {
      console.error(...log_if_contains_state("error", "No triggers found.", $$props.triggeredBy));
      return;
    }
    if ($$props.reference) referenceElement = node.ownerDocument.querySelector($$props.reference);
    invoker = triggerEls[0];
    triggerEls.forEach((element2) => {
      if (element2.tabIndex < 0) element2.tabIndex = 0;
      for (const [name, handler, cond] of events) if (cond) element2.addEventListener(name, handler);
    });
    user_effect(() => {
      return () => {
        triggerEls.forEach((element2) => {
          for (const [name, handler, cond] of events) if (cond) element2.removeEventListener(name, handler);
        });
      };
    });
  }
  function closeOnEscape(event3) {
    if (strict_equals(event3.key, "Escape")) {
      isOpen(false);
    }
  }
  function closeOnClickOutside(event3) {
    if (get(popover2) && !event3.composedPath().includes(get(popover2)) && !triggerEls.some((el) => event3.composedPath().includes(el))) {
      close_popover(event3);
      isOpen(false);
    }
  }
  var fragment = root27();
  var div = first_child(fragment);
  action(div, ($$node) => set_triggers == null ? void 0 : set_triggers($$node));
  var node_1 = sibling(div, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var div_1 = root_114();
      var event_handler = () => {
        var _a;
        return (_a = get(popover2)) == null ? void 0 : _a.showPopover();
      };
      var event_handler_1 = () => {
        var _a;
        return (_a = get(popover2)) == null ? void 0 : _a.hidePopover();
      };
      let attributes;
      var node_2 = child(div_1);
      snippet(node_2, () => $$props.children);
      var node_3 = sibling(node_2, 2);
      {
        var consequent = ($$anchor3) => {
          var fragment_1 = comment();
          var node_4 = first_child(fragment_1);
          Arrow_default(node_4, spread_props(() => get(arrowParams), {
            get class() {
              return arrowClass();
            }
          }));
          append($$anchor3, fragment_1);
        };
        if_block(node_3, ($$render) => {
          if (arrow2()) $$render(consequent);
        });
      }
      reset(div_1);
      bind_this(div_1, ($$value) => set(popover2, $$value), () => get(popover2));
      template_effect(() => attributes = set_attributes(div_1, attributes, {
        popover: "manual",
        role: "tooltip",
        onfocusout: close_popover,
        onmouseleave: get(hoverable) ? close_popover : void 0,
        onmouseenter: get(hoverable) ? open_popover : void 0,
        onbeforetoggle: on_before_toggle,
        ontoggle: on_toggle,
        class: className(),
        onintrostart: event_handler,
        onoutroend: event_handler_1,
        ...restProps,
        [CLASS]: { "overflow-visible": true }
      }));
      transition(3, div_1, transition2, () => get(paramsOptions));
      append($$anchor2, div_1);
    };
    if_block(node_1, ($$render) => {
      if (isOpen()) $$render(consequent_1);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Popper = hmr(Popper, () => Popper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Popper[HMR].source;
    set(Popper[HMR].source, module.default[HMR].original);
  });
}
var Popper_default = Popper;

// node_modules/flowbite-svelte/dist/dropdown/DropdownGroup.svelte
DropdownGroup[FILENAME] = "node_modules/flowbite-svelte/dist/dropdown/DropdownGroup.svelte";
var root28 = add_locations(from_html(`<ul><!></ul>`), DropdownGroup[FILENAME], [[11, 0]]);
function DropdownGroup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, DropdownGroup);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class"
    ],
    "restProps"
  );
  const ulCls = user_derived(() => dropdownGroup({ class: clsx_default($$props.class) }));
  var ul = root28();
  let attributes;
  var node = child(ul);
  snippet(node, () => $$props.children);
  reset(ul);
  template_effect(() => attributes = set_attributes(ul, attributes, { ...restProps, class: get(ulCls) }));
  append($$anchor, ul);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DropdownGroup = hmr(DropdownGroup, () => DropdownGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DropdownGroup[HMR].source;
    set(DropdownGroup[HMR].source, module.default[HMR].original);
  });
}
var DropdownGroup_default = DropdownGroup;

// node_modules/flowbite-svelte/dist/dropdown/Dropdown.svelte
Dropdown[FILENAME] = "node_modules/flowbite-svelte/dist/dropdown/Dropdown.svelte";
function Dropdown($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Dropdown);
  var $$ownership_validator = create_ownership_validator($$props);
  let simple = prop($$props, "simple", 3, false), placement = prop($$props, "placement", 3, "bottom"), offset2 = prop($$props, "offset", 3, 2), activeUrl = prop($$props, "activeUrl", 3, ""), isOpen = prop($$props, "isOpen", 15, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "simple",
      "placement",
      "offset",
      "class",
      "backdropClass",
      "activeUrl",
      "isOpen"
    ],
    "restProps"
  );
  const $$d = user_derived(dropdown), base = user_derived(() => {
    let { base: $$1, backdrop: $$2 } = get($$d);
    return $$1;
  }), backdrop = user_derived(() => {
    let { base: $$1, backdrop: $$2 } = get($$d);
    return $$2;
  });
  const activeUrlStore = writable("");
  setContext("activeUrl", activeUrlStore);
  user_effect(() => {
    activeUrlStore.set(activeUrl() ?? "");
  });
  var fragment = comment();
  var node = first_child(fragment);
  const expression = user_derived(() => get(base)({ class: clsx_default($$props.class) }));
  {
    $$ownership_validator.binding("isOpen", Popper_default, isOpen);
    Popper_default(node, spread_props(() => restProps, {
      get placement() {
        return placement();
      },
      get offset() {
        return offset2();
      },
      get class() {
        return get(expression);
      },
      get isOpen() {
        return isOpen();
      },
      set isOpen($$value) {
        isOpen($$value);
      },
      children: wrap_snippet(Dropdown, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        {
          var consequent = ($$anchor3) => {
            var fragment_2 = comment();
            var node_2 = first_child(fragment_2);
            DropdownGroup_default(node_2, {
              children: wrap_snippet(Dropdown, ($$anchor4, $$slotProps2) => {
                var fragment_3 = comment();
                var node_3 = first_child(fragment_3);
                snippet(node_3, () => $$props.children);
                append($$anchor4, fragment_3);
              }),
              $$slots: { default: true }
            });
            append($$anchor3, fragment_2);
          };
          var alternate = ($$anchor3) => {
            var fragment_4 = comment();
            var node_4 = first_child(fragment_4);
            snippet(node_4, () => $$props.children);
            append($$anchor3, fragment_4);
          };
          if_block(node_1, ($$render) => {
            if (simple()) $$render(consequent);
            else $$render(alternate, false);
          });
        }
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    }));
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dropdown = hmr(Dropdown, () => Dropdown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dropdown[HMR].source;
    set(Dropdown[HMR].source, module.default[HMR].original);
  });
}
var Dropdown_default = Dropdown;

// node_modules/flowbite-svelte/dist/dropdown/DropdownDivider.svelte
DropdownDivider[FILENAME] = "node_modules/flowbite-svelte/dist/dropdown/DropdownDivider.svelte";
var root29 = add_locations(from_html(`<div></div>`), DropdownDivider[FILENAME], [[10, 0]]);
function DropdownDivider($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, DropdownDivider);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "class"], "restProps");
  const base = dropdownDivider({ class: clsx_default($$props.class) });
  var div = root29();
  let attributes;
  template_effect(() => attributes = set_attributes(div, attributes, { ...restProps, class: base }));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DropdownDivider = hmr(DropdownDivider, () => DropdownDivider[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DropdownDivider[HMR].source;
    set(DropdownDivider[HMR].source, module.default[HMR].original);
  });
}
var DropdownDivider_default = DropdownDivider;

// node_modules/flowbite-svelte/dist/dropdown/DropdownHeader.svelte
DropdownHeader[FILENAME] = "node_modules/flowbite-svelte/dist/dropdown/DropdownHeader.svelte";
var root30 = add_locations(from_html(`<div><!></div>`), DropdownHeader[FILENAME], [[10, 0]]);
function DropdownHeader($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, DropdownHeader);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class"
    ],
    "restProps"
  );
  let headerClass = user_derived(() => dropdownHeader({ class: clsx_default($$props.class) }));
  var div = root30();
  let attributes;
  var node = child(div);
  snippet(node, () => $$props.children);
  reset(div);
  template_effect(() => attributes = set_attributes(div, attributes, { ...restProps, class: get(headerClass) }));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DropdownHeader = hmr(DropdownHeader, () => DropdownHeader[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DropdownHeader[HMR].source;
    set(DropdownHeader[HMR].source, module.default[HMR].original);
  });
}
var DropdownHeader_default = DropdownHeader;

// node_modules/flowbite-svelte/dist/dropdown/DropdownItem.svelte
DropdownItem[FILENAME] = "node_modules/flowbite-svelte/dist/dropdown/DropdownItem.svelte";
var root_115 = add_locations(from_html(`<a><!></a>`), DropdownItem[FILENAME], [[26, 4]]);
var root_311 = add_locations(from_html(`<button type="button"><!></button>`), DropdownItem[FILENAME], [[30, 4]]);
var root_46 = add_locations(from_html(`<div><!></div>`), DropdownItem[FILENAME], [[34, 4]]);
var root31 = add_locations(from_html(`<li><!></li>`), DropdownItem[FILENAME], [[24, 0]]);
function DropdownItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, DropdownItem);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "aClass",
      "children",
      "href",
      "activeClass",
      "liClass",
      "class"
    ],
    "restProps"
  );
  const activeUrlStore = getContext("activeUrl");
  let sidebarUrl = state("");
  activeUrlStore.subscribe((value) => {
    set(sidebarUrl, value, true);
  });
  let active = state(false);
  user_effect(() => {
    set(active, get(sidebarUrl) ? strict_equals($$props.href, get(sidebarUrl)) : false, true);
  });
  const { anchor: anchor2, activeAnchor } = dropdownItem();
  let finalClass = user_derived(() => [
    get(active) ? activeAnchor({
      class: clsx_default($$props.activeClass, $$props.class)
    }) : anchor2({ class: clsx_default($$props.aClass, $$props.class) })
  ]);
  var li = root31();
  var node = child(li);
  {
    var consequent = ($$anchor2) => {
      var a = root_115();
      let attributes;
      var node_1 = child(a);
      snippet(node_1, () => $$props.children);
      reset(a);
      template_effect(() => attributes = set_attributes(a, attributes, {
        href: $$props.href,
        ...restProps,
        class: get(finalClass)
      }));
      append($$anchor2, a);
    };
    var alternate = ($$anchor2, $$elseif) => {
      {
        var consequent_1 = ($$anchor3) => {
          var button2 = root_311();
          button2.__click = function(...$$args) {
            apply(() => $$props.onclick, this, $$args, DropdownItem, [30, 54]);
          };
          var node_2 = child(button2);
          snippet(node_2, () => $$props.children);
          reset(button2);
          template_effect(() => set_class(button2, 1, clsx2(get(finalClass))));
          append($$anchor3, button2);
        };
        var alternate_1 = ($$anchor3) => {
          var div = root_46();
          var node_3 = child(div);
          snippet(node_3, () => $$props.children);
          reset(div);
          template_effect(() => set_class(div, 1, clsx2(get(finalClass))));
          append($$anchor3, div);
        };
        if_block(
          $$anchor2,
          ($$render) => {
            if ($$props.onclick) $$render(consequent_1);
            else $$render(alternate_1, false);
          },
          $$elseif
        );
      }
    };
    if_block(node, ($$render) => {
      if ($$props.href) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  reset(li);
  template_effect(() => set_class(li, 1, clsx2($$props.liClass)));
  append($$anchor, li);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DropdownItem = hmr(DropdownItem, () => DropdownItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DropdownItem[HMR].source;
    set(DropdownItem[HMR].source, module.default[HMR].original);
  });
}
var DropdownItem_default = DropdownItem;
delegate(["click"]);

// node_modules/flowbite-svelte/dist/dropdown/theme.js
var dropdown = ce({
  slots: {
    base: "mt-2 divide-y divide-gray-300 dark:divide-gray-500 overflow-hidden rounded-lg bg-white shadow-sm dark:bg-gray-700",
    backdrop: "fixed top-0 start-0 w-full h-full"
  }
});
var dropdownDivider = ce({
  base: "my-1 h-px bg-gray-100 dark:bg-gray-500"
});
var dropdownHeader = ce({
  base: "px-4 py-3 text-sm text-gray-900 dark:text-white"
});
var dropdownItem = ce({
  slots: {
    anchor: "block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white",
    activeAnchor: "block px-4 py-2 text-primary-700 dark:text-primary-600 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white"
  }
});
var dropdownGroup = ce({
  base: "py-2 text-sm text-gray-700 dark:text-gray-200"
});

// node_modules/flowbite-svelte/dist/drawer/Drawer.svelte
Drawer[FILENAME] = "node_modules/flowbite-svelte/dist/drawer/Drawer.svelte";
var root_116 = add_locations(from_html(`<div role="presentation"></div> <div><!></div>`, 1), Drawer[FILENAME], [[31, 2], [32, 2]]);
function Drawer($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Drawer);
  let hidden = prop($$props, "hidden", 15), closeDrawer = prop($$props, "closeDrawer", 3, () => hidden(true)), activateClickOutside = prop($$props, "activateClickOutside", 3, true), backdrop = prop($$props, "backdrop", 3, true), placement = prop($$props, "placement", 3, "left"), transitionType = prop($$props, "transitionType", 3, fly), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "hidden",
      "closeDrawer",
      "activateClickOutside",
      "position",
      "width",
      "backdrop",
      "backdropClass",
      "placement",
      "class",
      "transitionParams",
      "transitionType"
    ],
    "restProps"
  );
  const $$d = user_derived(() => drawer({
    position: $$props.position,
    placement: placement(),
    width: $$props.width,
    backdrop: backdrop()
  })), base = user_derived(() => {
    let { base: $$1, backdrop_: $$2 } = get($$d);
    return $$1;
  }), backdropCls = user_derived(() => {
    let { base: $$1, backdrop_: $$2 } = get($$d);
    return $$2;
  });
  let innerWidth = state(-1);
  let innerHeight = state(-1);
  let x = user_derived(() => strict_equals(placement(), "left") ? -320 : strict_equals(placement(), "right") ? get(innerWidth) + 320 : void 0);
  let y = user_derived(() => strict_equals(placement(), "top") ? -100 : strict_equals(placement(), "bottom") ? get(innerHeight) + 100 : void 0);
  let transition_params = user_derived(() => Object.assign({}, {
    x: get(x),
    y: get(y),
    duration: 200,
    easing: sineIn
  }));
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = root_116();
      var div = first_child(fragment_1);
      div.__click = function(...$$args) {
        apply(() => activateClickOutside() ? closeDrawer() : void 0, this, $$args, Drawer, [31, 82]);
      };
      var div_1 = sibling(div, 2);
      let attributes;
      var node_1 = child(div_1);
      snippet(node_1, () => $$props.children ?? noop);
      reset(div_1);
      action(div_1, ($$node, $$action_arg) => {
        var _a;
        return (_a = trapFocus) == null ? void 0 : _a($$node, $$action_arg);
      }, () => ({ onEscape: closeDrawer() }));
      template_effect(
        ($0, $1) => {
          set_class(div, 1, $0);
          attributes = set_attributes(div_1, attributes, { ...restProps, class: $1, tabindex: "-1" });
        },
        [
          () => clsx2(get(backdropCls)({ class: $$props.backdropClass })),
          () => get(base)({ class: clsx_default($$props.class) })
        ]
      );
      transition(3, div_1, transitionType, () => $$props.transitionParams ? $$props.transitionParams : get(transition_params));
      append($$anchor2, fragment_1);
    };
    if_block(node, ($$render) => {
      if (!hidden()) $$render(consequent);
    });
  }
  bind_window_size("innerWidth", ($$value) => set(innerWidth, $$value, true));
  bind_window_size("innerHeight", ($$value) => set(innerHeight, $$value, true));
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Drawer = hmr(Drawer, () => Drawer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Drawer[HMR].source;
    set(Drawer[HMR].source, module.default[HMR].original);
  });
}
var Drawer_default = Drawer;
delegate(["click"]);

// node_modules/flowbite-svelte/dist/drawer/Drawerhead.svelte
Drawerhead[FILENAME] = "node_modules/flowbite-svelte/dist/drawer/Drawerhead.svelte";
var root_312 = add_locations(from_html(`<button><svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"></path></svg> <span class="sr-only">Close drawer</span></button>`), Drawerhead[FILENAME], [
  [
    18,
    4,
    [[19, 6, [[20, 8]]], [22, 6]]
  ]
]);
var root32 = add_locations(from_html(`<div><!> <!></div>`), Drawerhead[FILENAME], [[11, 0]]);
function Drawerhead($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Drawerhead);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "closeIcon",
      "children",
      "buttonClass",
      "svgClass",
      "class"
    ],
    "restProps"
  );
  const $$d = user_derived(drawerhead), base = user_derived(() => {
    let { base: $$1, button: $$2, svg: $$3 } = get($$d);
    return $$1;
  }), button2 = user_derived(() => {
    let { base: $$1, button: $$2, svg: $$3 } = get($$d);
    return $$2;
  }), svg = user_derived(() => {
    let { base: $$1, button: $$2, svg: $$3 } = get($$d);
    return $$3;
  });
  var div = root32();
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.children);
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if ($$props.children) $$render(consequent);
    });
  }
  var node_2 = sibling(node, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_3 = first_child(fragment_1);
      snippet(node_3, () => $$props.closeIcon);
      append($$anchor2, fragment_1);
    };
    var alternate = ($$anchor2) => {
      var button_1 = root_312();
      let attributes;
      var svg_1 = child(button_1);
      next(2);
      reset(button_1);
      template_effect(
        ($0, $1) => {
          attributes = set_attributes(button_1, attributes, { type: "button", ...restProps, class: $0 });
          set_class(svg_1, 0, $1);
        },
        [
          () => get(button2)({ class: $$props.buttonClass }),
          () => clsx2(get(svg)({ class: $$props.svgClass }))
        ]
      );
      append($$anchor2, button_1);
    };
    if_block(node_2, ($$render) => {
      if ($$props.closeIcon) $$render(consequent_1);
      else $$render(alternate, false);
    });
  }
  reset(div);
  template_effect(($0) => set_class(div, 1, $0), [
    () => clsx2(get(base)({ class: clsx_default($$props.class) }))
  ]);
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Drawerhead = hmr(Drawerhead, () => Drawerhead[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Drawerhead[HMR].source;
    set(Drawerhead[HMR].source, module.default[HMR].original);
  });
}
var Drawerhead_default = Drawerhead;

// node_modules/flowbite-svelte/dist/drawer/theme.js
var drawer = ce({
  slots: {
    base: "overflow-y-auto z-50 p-4 bg-white dark:bg-gray-800",
    backdrop_: "fixed top-0 start-0 z-50 w-full h-full"
  },
  variants: {
    position: {
      fixed: { base: "fixed", backdrop_: "fixed" },
      absolute: { base: "absolute", backdrop_: "absolute" }
    },
    placement: {
      left: { base: "inset-y-0 start-0" },
      right: { base: "inset-y-0 end-0" },
      top: { base: "inset-x-0 top-0" },
      bottom: { base: "inset-x-0 bottom-0" }
    },
    width: {
      default: { base: "w-80" },
      full: { base: "w-full" },
      half: { base: "w-1/2" }
    },
    backdrop: {
      true: { backdrop_: "bg-gray-900 opacity-75" }
    }
  },
  defaultVariants: {
    position: "fixed",
    placement: "left",
    width: "default"
  }
});
var drawerhead = ce({
  slots: {
    base: "flex items-center justify-between",
    button: "ms-auto inline-flex h-8 w-8 items-center justify-center rounded-lg bg-transparent text-sm text-gray-400 hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-600 dark:hover:text-white",
    svg: "h-4 w-4"
  }
});

// node_modules/flowbite-svelte/dist/footer/Footer.svelte
Footer[FILENAME] = "node_modules/flowbite-svelte/dist/footer/Footer.svelte";
var root33 = add_locations(from_html(`<footer><!></footer>`), Footer[FILENAME], [[10, 0]]);
function Footer($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Footer);
  let footerType = prop($$props, "footerType", 3, "default"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "footerType",
      "class"
    ],
    "restProps"
  );
  const footerCls = user_derived(() => footer({
    footerType: footerType(),
    className: $$props.class
  }));
  var footer_1 = root33();
  let attributes;
  var node = child(footer_1);
  snippet(node, () => $$props.children);
  reset(footer_1);
  template_effect(() => attributes = set_attributes(footer_1, attributes, { ...restProps, class: get(footerCls) }));
  append($$anchor, footer_1);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Footer = hmr(Footer, () => Footer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Footer[HMR].source;
    set(Footer[HMR].source, module.default[HMR].original);
  });
}
var Footer_default = Footer;

// node_modules/flowbite-svelte/dist/footer/FooterBrand.svelte
FooterBrand[FILENAME] = "node_modules/flowbite-svelte/dist/footer/FooterBrand.svelte";
var root_211 = add_locations(from_html(`<img/>`), FooterBrand[FILENAME], [[13, 6]]);
var root_313 = add_locations(from_html(`<span> </span>`), FooterBrand[FILENAME], [[16, 6]]);
var root_117 = add_locations(from_html(`<a><!> <!> <!></a>`), FooterBrand[FILENAME], [[11, 2]]);
var root_56 = add_locations(from_html(`<img/>`), FooterBrand[FILENAME], [[23, 2]]);
function FooterBrand($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, FooterBrand);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "aClass",
      "spanClass",
      "imgClass",
      "href",
      "src",
      "alt",
      "name"
    ],
    "restProps"
  );
  const $$d = user_derived(footerBrand), base = user_derived(() => {
    let { base: $$1, span: $$2, img: $$3 } = get($$d);
    return $$1;
  }), span2 = user_derived(() => {
    let { base: $$1, span: $$2, img: $$3 } = get($$d);
    return $$2;
  }), img2 = user_derived(() => {
    let { base: $$1, span: $$2, img: $$3 } = get($$d);
    return $$3;
  });
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_3 = ($$anchor2) => {
      var a = root_117();
      let attributes;
      var node_1 = child(a);
      {
        var consequent = ($$anchor3) => {
          var img_1 = root_211();
          template_effect(
            ($0) => {
              set_attribute(img_1, "src", $$props.src);
              set_class(img_1, 1, $0);
              set_attribute(img_1, "alt", $$props.alt);
            },
            [
              () => clsx2(get(img2)({ class: $$props.imgClass }))
            ]
          );
          append($$anchor3, img_1);
        };
        if_block(node_1, ($$render) => {
          if ($$props.src) $$render(consequent);
        });
      }
      var node_2 = sibling(node_1, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var span_1 = root_313();
          var text2 = child(span_1, true);
          reset(span_1);
          template_effect(
            ($0) => {
              set_class(span_1, 1, $0);
              set_text(text2, $$props.name);
            },
            [
              () => clsx2(get(span2)({ class: $$props.spanClass }))
            ]
          );
          append($$anchor3, span_1);
        };
        if_block(node_2, ($$render) => {
          if ($$props.name) $$render(consequent_1);
        });
      }
      var node_3 = sibling(node_2, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_4 = first_child(fragment_1);
          snippet(node_4, () => $$props.children);
          append($$anchor3, fragment_1);
        };
        if_block(node_3, ($$render) => {
          if ($$props.children) $$render(consequent_2);
        });
      }
      reset(a);
      template_effect(($0) => attributes = set_attributes(a, attributes, { ...restProps, href: $$props.href, class: $0 }), [
        () => get(base)({ class: $$props.aClass })
      ]);
      append($$anchor2, a);
    };
    var alternate = ($$anchor2) => {
      var img_2 = root_56();
      template_effect(
        ($0) => {
          set_attribute(img_2, "src", $$props.src);
          set_class(img_2, 1, $0);
          set_attribute(img_2, "alt", $$props.alt);
        },
        [
          () => clsx2(get(img2)({ class: $$props.imgClass }))
        ]
      );
      append($$anchor2, img_2);
    };
    if_block(node, ($$render) => {
      if ($$props.href) $$render(consequent_3);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FooterBrand = hmr(FooterBrand, () => FooterBrand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FooterBrand[HMR].source;
    set(FooterBrand[HMR].source, module.default[HMR].original);
  });
}
var FooterBrand_default = FooterBrand;

// node_modules/flowbite-svelte/dist/footer/FooterCopyright.svelte
FooterCopyright[FILENAME] = "node_modules/flowbite-svelte/dist/footer/FooterCopyright.svelte";
var root_118 = add_locations(from_html(`<a> </a>`), FooterCopyright[FILENAME], [[15, 4]]);
var root_212 = add_locations(from_html(`<span> </span>`), FooterCopyright[FILENAME], [[19, 4]]);
var root34 = add_locations(from_html(`<span> <!> </span>`), FooterCopyright[FILENAME], [[12, 0]]);
function FooterCopyright($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, FooterCopyright);
  let copyrightMessage = prop($$props, "copyrightMessage", 3, "All Rights Reserved."), year = prop($$props, "year", 7), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "spanClass",
      "aClass",
      "href",
      "by",
      "copyrightMessage",
      "year"
    ],
    "restProps"
  );
  if (!year()) year((/* @__PURE__ */ new Date()).getFullYear());
  const $$d = user_derived(footerCopyright), base = user_derived(() => {
    let { base: $$1, link: $$2, bySpan: $$3 } = get($$d);
    return $$1;
  }), link = user_derived(() => {
    let { base: $$1, link: $$2, bySpan: $$3 } = get($$d);
    return $$2;
  }), bySpan = user_derived(() => {
    let { base: $$1, link: $$2, bySpan: $$3 } = get($$d);
    return $$3;
  });
  var span2 = root34();
  var text2 = child(span2);
  var node = sibling(text2);
  {
    var consequent = ($$anchor2) => {
      var a = root_118();
      let attributes;
      var text_1 = child(a, true);
      reset(a);
      template_effect(
        ($0) => {
          attributes = set_attributes(a, attributes, { ...restProps, href: $$props.href, class: $0 });
          set_text(text_1, $$props.by);
        },
        [
          () => get(link)({ class: $$props.aClass })
        ]
      );
      append($$anchor2, a);
    };
    var alternate = ($$anchor2) => {
      var span_1 = root_212();
      var text_2 = child(span_1, true);
      reset(span_1);
      template_effect(
        ($0) => {
          set_class(span_1, 1, $0);
          set_text(text_2, $$props.by);
        },
        [() => clsx2(get(bySpan)())]
      );
      append($$anchor2, span_1);
    };
    if_block(node, ($$render) => {
      if ($$props.href) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  var text_3 = sibling(node);
  reset(span2);
  template_effect(
    ($0) => {
      set_class(span2, 1, $0);
      set_text(text2, `© ${year() ?? ""} `);
      set_text(text_3, ` ${copyrightMessage() ?? ""}`);
    },
    [
      () => clsx2(get(base)({ class: $$props.spanClass }))
    ]
  );
  append($$anchor, span2);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FooterCopyright = hmr(FooterCopyright, () => FooterCopyright[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FooterCopyright[HMR].source;
    set(FooterCopyright[HMR].source, module.default[HMR].original);
  });
}
var FooterCopyright_default = FooterCopyright;

// node_modules/flowbite-svelte/dist/footer/FooterIcon.svelte
FooterIcon[FILENAME] = "node_modules/flowbite-svelte/dist/footer/FooterIcon.svelte";
var root_119 = add_locations(from_html(`<a><!></a>`), FooterIcon[FILENAME], [[11, 2]]);
function FooterIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, FooterIcon);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "href",
      "ariaLabel",
      "class"
    ],
    "restProps"
  );
  const aCls = user_derived(() => footerIcon({ class: $$props.class }));
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var a = root_119();
      let attributes;
      var node_1 = child(a);
      snippet(node_1, () => $$props.children);
      reset(a);
      template_effect(() => attributes = set_attributes(a, attributes, {
        ...restProps,
        href: $$props.href,
        "aria-label": $$props.ariaLabel,
        class: get(aCls)
      }));
      append($$anchor2, a);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      snippet(node_2, () => $$props.children);
      append($$anchor2, fragment_1);
    };
    if_block(node, ($$render) => {
      if ($$props.href) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FooterIcon = hmr(FooterIcon, () => FooterIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FooterIcon[HMR].source;
    set(FooterIcon[HMR].source, module.default[HMR].original);
  });
}
var FooterIcon_default = FooterIcon;

// node_modules/flowbite-svelte/dist/footer/FooterLink.svelte
FooterLink[FILENAME] = "node_modules/flowbite-svelte/dist/footer/FooterLink.svelte";
var root35 = add_locations(from_html(`<li><a><!></a></li>`), FooterLink[FILENAME], [[9, 0, [[10, 2]]]]);
function FooterLink($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, FooterLink);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "liClass",
      "aClass",
      "href"
    ],
    "restProps"
  );
  const $$d = user_derived(footerLink), base = user_derived(() => {
    let { base: $$1, link: $$2 } = get($$d);
    return $$1;
  }), link = user_derived(() => {
    let { base: $$1, link: $$2 } = get($$d);
    return $$2;
  });
  var li = root35();
  var a = child(li);
  let attributes;
  var node = child(a);
  snippet(node, () => $$props.children);
  reset(a);
  reset(li);
  template_effect(
    ($0, $1) => {
      set_class(li, 1, $0);
      attributes = set_attributes(a, attributes, { ...restProps, href: $$props.href, class: $1 });
    },
    [
      () => clsx2(get(base)({ class: $$props.liClass })),
      () => get(link)({ class: $$props.aClass })
    ]
  );
  append($$anchor, li);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FooterLink = hmr(FooterLink, () => FooterLink[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FooterLink[HMR].source;
    set(FooterLink[HMR].source, module.default[HMR].original);
  });
}
var FooterLink_default = FooterLink;

// node_modules/flowbite-svelte/dist/footer/FooterLinkGroup.svelte
FooterLinkGroup[FILENAME] = "node_modules/flowbite-svelte/dist/footer/FooterLinkGroup.svelte";
var root36 = add_locations(from_html(`<ul><!></ul>`), FooterLinkGroup[FILENAME], [[9, 0]]);
function FooterLinkGroup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, FooterLinkGroup);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "class",
      "children"
    ],
    "restProps"
  );
  const base = user_derived(() => footerLinkGroup({ class: $$props.class }));
  var ul = root36();
  let attributes;
  var node = child(ul);
  snippet(node, () => $$props.children);
  reset(ul);
  template_effect(() => attributes = set_attributes(ul, attributes, { ...restProps, class: get(base) }));
  append($$anchor, ul);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FooterLinkGroup = hmr(FooterLinkGroup, () => FooterLinkGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FooterLinkGroup[HMR].source;
    set(FooterLinkGroup[HMR].source, module.default[HMR].original);
  });
}
var FooterLinkGroup_default = FooterLinkGroup;

// node_modules/flowbite-svelte/dist/footer/theme.js
var footer = ce({
  base: "bg-white dark:bg-gray-800",
  variants: {
    footerType: {
      default: "p-4 rounded-lg shadow md:flex md:items-center md:justify-between md:p-6",
      sitemap: "bg-white dark:bg-gray-900",
      socialmedia: "p-4 sm:p-6",
      logo: "p-4 rounded-lg shadow md:px-6 md:py-8",
      sticky: "fixed bottom-0 left-0 z-20 w-full p-4 bg-white border-t border-gray-200 shadow md:flex md:items-center md:justify-between md:p-6 dark:bg-gray-800 dark:border-gray-600"
    }
  }
});
var footerBrand = ce({
  slots: {
    base: "flex items-center",
    span: "self-center text-2xl font-semibold whitespace-nowrap dark:text-white",
    img: "me-3 h-8"
  }
});
var footerCopyright = ce({
  slots: {
    base: "block text-sm text-gray-500 sm:text-center dark:text-gray-400",
    link: "hover:underline",
    bySpan: "ms-1"
  }
});
var footerIcon = ce({
  base: "text-gray-500 hover:text-gray-900 dark:hover:text-white"
});
var footerLinkGroup = ce({
  base: "text-gray-600 dark:text-gray-400"
});
var footerLink = ce({
  slots: {
    base: "me-4 last:me-0 md:me-6",
    link: "hover:underline"
  }
});

// node_modules/flowbite-svelte/dist/gallery/Gallery.svelte
Gallery[FILENAME] = "node_modules/flowbite-svelte/dist/gallery/Gallery.svelte";
var root_120 = add_locations(from_html(`<div><img/></div>`), Gallery[FILENAME], [[16, 2, [[17, 4]]]]);
var root37 = add_locations(from_html(`<div></div>`), Gallery[FILENAME], [[21, 0]]);
function Gallery($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Gallery);
  const _figure = wrap_snippet(Gallery, function($$anchor2, item = noop) {
    validate_snippet_args(...arguments);
    var div_1 = root_120();
    var img2 = child(div_1);
    let attributes;
    reset(div_1);
    template_effect(
      ($0) => attributes = set_attributes(img2, attributes, {
        src: item().src,
        alt: item().alt,
        class: $0,
        ...restProps
      }),
      [() => image({ class: $$props.imgClass })]
    );
    replay_events(img2);
    append($$anchor2, div_1);
  });
  let items = prop($$props, "items", 19, () => []), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "figure",
      "items",
      "imgClass",
      "class"
    ],
    "restProps"
  );
  function init(node) {
    if (strict_equals(getComputedStyle(node).gap, "normal")) node.style.gap = "inherit";
  }
  const { image, div } = gallery();
  var div_2 = root37();
  each(
    div_2,
    21,
    items,
    index,
    ($$anchor2, item) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      {
        var consequent = ($$anchor3) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          snippet(node_2, () => $$props.figure, () => get(item));
          append($$anchor3, fragment_1);
        };
        var alternate = ($$anchor3) => {
          _figure($$anchor3, () => get(item));
        };
        if_block(node_1, ($$render) => {
          if ($$props.figure) $$render(consequent);
          else $$render(alternate, false);
        });
      }
      append($$anchor2, fragment);
    },
    ($$anchor2) => {
      var fragment_3 = comment();
      var node_3 = first_child(fragment_3);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_4 = comment();
          var node_4 = first_child(fragment_4);
          snippet(node_4, () => $$props.children);
          append($$anchor3, fragment_4);
        };
        if_block(node_3, ($$render) => {
          if ($$props.children) $$render(consequent_1);
        });
      }
      append($$anchor2, fragment_3);
    }
  );
  reset(div_2);
  action(div_2, ($$node) => init == null ? void 0 : init($$node));
  template_effect(($0) => set_class(div_2, 1, $0), [
    () => clsx2(div({ class: clsx_default($$props.class) }))
  ]);
  append($$anchor, div_2);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gallery = hmr(Gallery, () => Gallery[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gallery[HMR].source;
    set(Gallery[HMR].source, module.default[HMR].original);
  });
}
var Gallery_default = Gallery;

// node_modules/flowbite-svelte/dist/gallery/theme.js
var gallery = ce({
  slots: {
    image: "h-auto max-w-full rounded-lg",
    div: "grid"
  }
});

// node_modules/flowbite-svelte/dist/indicator/Indicator.svelte
Indicator[FILENAME] = "node_modules/flowbite-svelte/dist/indicator/Indicator.svelte";
var root38 = add_locations(from_html(`<div><!></div>`), Indicator[FILENAME], [[22, 0]]);
function Indicator($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Indicator);
  let color = prop($$props, "color", 3, "primary"), cornerStyle = prop($$props, "cornerStyle", 3, "circular"), size = prop($$props, "size", 3, "md"), border = prop($$props, "border", 3, false), offset2 = prop($$props, "offset", 3, true), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "color",
      "cornerStyle",
      "size",
      "border",
      "placement",
      "offset",
      "class"
    ],
    "restProps"
  );
  let hasChildren = !!$$props.children;
  const $$d = user_derived(() => indicator({
    color: color(),
    size: size(),
    cornerStyle: cornerStyle(),
    border: border(),
    placement: $$props.placement,
    offset: offset2(),
    hasChildren
  })), base = user_derived(() => {
    let { base: $$1 } = get($$d);
    return $$1;
  });
  var div = root38();
  let attributes;
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.children);
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if ($$props.children) $$render(consequent);
    });
  }
  reset(div);
  template_effect(($0) => attributes = set_attributes(div, attributes, { ...restProps, class: $0 }), [
    () => get(base)({ class: clsx_default($$props.class) })
  ]);
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Indicator = hmr(Indicator, () => Indicator[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Indicator[HMR].source;
    set(Indicator[HMR].source, module.default[HMR].original);
  });
}
var Indicator_default = Indicator;

// node_modules/flowbite-svelte/dist/indicator/theme.js
var indicator = ce({
  slots: {
    base: "shrink-0"
  },
  variants: {
    color: {
      // 'primary' secondary 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose'
      primary: { base: "bg-primary-500" },
      secondary: { base: "bg-secondary-500" },
      gray: { base: "bg-gray-200" },
      red: { base: "bg-red-500" },
      orange: { base: "bg-orange-600" },
      amber: { base: "bg-amber-500" },
      yellow: { base: "bg-yellow-300" },
      lime: { base: "bg-lime-500" },
      green: { base: "bg-green-500" },
      emerald: { base: "bg-emerald-500" },
      teal: { base: "bg-teal-500" },
      cyan: { base: "bg-cyan-500" },
      sky: { base: "bg-sky-500" },
      blue: { base: "bg-blue-500" },
      indigo: { base: "bg-indigo-500" },
      violet: { base: "bg-violet-500" },
      purple: { base: "bg-purple-500" },
      fuchsia: { base: "bg-fuchsia-500" },
      pink: { base: "bg-pink-500" },
      rose: { base: "bg-rose-500" }
    },
    size: {
      xs: { base: "w-2 h-2" },
      sm: { base: "w-2.5 h-2.5" },
      md: { base: "w-3 h-3" },
      lg: { base: "w-3.5 h-3.5" },
      xl: { base: "w-6 h-6" }
    },
    cornerStyle: {
      rounded: { base: "rounded-sm" },
      circular: { base: "rounded-full" }
    },
    border: {
      true: { base: "border border-gray-300 dark:border-gray-300" },
      false: {}
    },
    hasChildren: {
      true: { base: "inline-flex items-center justify-center" },
      false: {}
    },
    placement: {
      default: { base: "" },
      "top-left": { base: "absolute top-0 start-0" },
      "top-center": {
        base: "absolute top-0 start-1/2 -translate-x-1/2 rtl:translate-x-1/2"
      },
      "top-right": { base: "absolute top-0 end-0" },
      "center-left": { base: "absolute top-1/2 -translate-y-1/2 start-0" },
      center: {
        base: "absolute top-1/2 -translate-y-1/2 start-1/2 -translate-x-1/2 rtl:translate-x-1/2"
      },
      "center-right": { base: "absolute top-1/2 -translate-y-1/2 end-0" },
      "bottom-left": { base: "absolute bottom-0 start-0" },
      "bottom-center": {
        base: "absolute bottom-0 start-1/2 -translate-x-1/2 rtl:translate-x-1/2"
      },
      "bottom-right": { base: "absolute bottom-0 end-0" }
    },
    offset: {
      true: {},
      false: {}
    }
  },
  compoundVariants: [
    {
      placement: "top-left",
      offset: true,
      class: { base: "-translate-x-1/3 rtl:translate-x-1/3 -translate-y-1/3" }
    },
    {
      placement: "top-center",
      offset: true,
      class: { base: "-translate-y-1/3" }
    },
    {
      placement: "top-right",
      offset: true,
      class: { base: "translate-x-1/3 rtl:-translate-x-1/3 -translate-y-1/3" }
    },
    {
      placement: "center-left",
      offset: true,
      class: { base: "-translate-x-1/3 rtl:translate-x-1/3" }
    },
    {
      placement: "center-right",
      offset: true,
      class: { base: "translate-x-1/3 rtl:-translate-x-1/3" }
    },
    {
      placement: "bottom-left",
      offset: true,
      class: { base: "-translate-x-1/3 rtl:translate-x-1/3 translate-y-1/3" }
    },
    {
      placement: "bottom-center",
      offset: true,
      class: { base: "translate-y-1/3" }
    },
    {
      placement: "bottom-right",
      offset: true,
      class: { base: "translate-x-1/3 rtl:-translate-x-1/3 translate-y-1/3" }
    }
  ],
  defaultVariants: {
    color: "primary",
    size: "md",
    cornerStyle: "circular",
    border: false,
    offset: true,
    hasChildren: false
  }
});

// node_modules/flowbite-svelte/dist/kbd/Kbd.svelte
Kbd[FILENAME] = "node_modules/flowbite-svelte/dist/kbd/Kbd.svelte";
var root39 = add_locations(from_html(`<kbd><!></kbd>`), Kbd[FILENAME], [[10, 0]]);
function Kbd($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Kbd);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class"
    ],
    "restProps"
  );
  const kbdCls = kbd({ class: clsx_default($$props.class) });
  var kbd_1 = root39();
  let attributes;
  var node = child(kbd_1);
  snippet(node, () => $$props.children);
  reset(kbd_1);
  template_effect(() => attributes = set_attributes(kbd_1, attributes, { ...restProps, class: kbdCls }));
  append($$anchor, kbd_1);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Kbd = hmr(Kbd, () => Kbd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Kbd[HMR].source;
    set(Kbd[HMR].source, module.default[HMR].original);
  });
}
var Kbd_default = Kbd;

// node_modules/flowbite-svelte/dist/kbd/theme.js
var kbd = ce({
  base: "px-2 py-1.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500"
});

// node_modules/flowbite-svelte/dist/list-group/theme.js
var listGroup = ce({
  base: "flex w-fit bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400 divide-gray-200 dark:divide-gray-600",
  variants: {
    rounded: {
      true: "rounded-lg",
      false: ""
    },
    border: {
      true: "border border-gray-200 dark:border-gray-700",
      false: ""
    },
    horizontal: {
      true: "flex-row divide-x",
      false: "flex-col divide-y"
    }
  },
  compoundVariants: [
    {
      border: true,
      class: "divide-gray-200 dark:divide-gray-700"
    }
  ],
  defaultVariants: {
    rounded: true,
    border: true,
    horizontal: false
  }
});
var listGroupItem = ce({
  base: "py-2 px-4 w-full text-sm font-medium list-none flex items-center text-left",
  variants: {
    state: {
      normal: "",
      current: "text-white bg-primary-700 dark:text-white dark:bg-gray-800",
      disabled: "text-gray-900 bg-gray-100 dark:bg-gray-600 dark:text-gray-400"
    },
    active: {
      true: "",
      false: ""
    },
    horizontal: {
      true: "first:rounded-s-lg last:rounded-e-lg",
      false: "first:rounded-t-lg last:rounded-b-lg"
    }
  },
  compoundVariants: [
    {
      active: true,
      state: "disabled",
      class: "cursor-not-allowed"
    },
    {
      active: true,
      state: "normal",
      class: "hover:bg-gray-100 hover:text-primary-700 dark:hover:bg-gray-600 dark:hover:text-white focus:z-40 focus:outline-hidden focus:ring-2 focus:ring-primary-700 focus:text-primary-700 dark:focus:ring-gray-500 dark:focus:text-white"
    }
    // {
    //   horizontal: true,
    //   class: "focus:first:rounded-s-lg focus:last:rounded-e-lg"
    // },
    // {
    //   horizontal: false,
    //   class: "focus:first:rounded-t-lg focus:last:rounded-b-lg"
    // }
  ]
});

// node_modules/flowbite-svelte/dist/list-group/ListgroupItem.svelte
ListgroupItem[FILENAME] = "node_modules/flowbite-svelte/dist/list-group/ListgroupItem.svelte";
var root_121 = add_locations(from_html(`<!> <!>`, 1), ListgroupItem[FILENAME], []);
var root_57 = add_locations(from_html(`<li><!></li>`), ListgroupItem[FILENAME], [[28, 2]]);
var root_73 = add_locations(from_html(`<button><!></button>`), ListgroupItem[FILENAME], [[32, 2]]);
var root_83 = add_locations(from_html(`<a><!></a>`), ListgroupItem[FILENAME], [[36, 2]]);
function ListgroupItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ListgroupItem);
  const nameOrChildren = wrap_snippet(ListgroupItem, function($$anchor2) {
    validate_snippet_args(...arguments);
    var fragment = root_121();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor3) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        component(node_1, () => $$props.Icon, ($$anchor4, $$component) => {
          $$component($$anchor4, {
            get class() {
              return iconClass();
            }
          });
        });
        append($$anchor3, fragment_1);
      };
      if_block(node, ($$render) => {
        if ($$props.Icon) $$render(consequent);
      });
    }
    var node_2 = sibling(node, 2);
    {
      var consequent_1 = ($$anchor3) => {
        var fragment_2 = comment();
        var node_3 = first_child(fragment_2);
        snippet(node_3, () => $$props.children);
        append($$anchor3, fragment_2);
      };
      var alternate = ($$anchor3) => {
        var text2 = text();
        template_effect(() => set_text(text2, $$props.name));
        append($$anchor3, text2);
      };
      if_block(node_2, ($$render) => {
        if ($$props.children) $$render(consequent_1);
        else $$render(alternate, false);
      });
    }
    append($$anchor2, fragment);
  });
  let active = prop($$props, "active", 7), horizontal = prop($$props, "horizontal", 7), iconClass = prop($$props, "iconClass", 3, "me-2.5 h-5 w-5"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "active",
      "current",
      "disabled",
      "horizontal",
      "name",
      "Icon",
      "class",
      "iconClass",
      "onclick"
    ],
    "restProps"
  );
  active(active() ?? getContext("listGrpActive"));
  horizontal(horizontal() ?? getContext("listGrpHorizontal"));
  let state2 = user_derived(() => $$props.disabled ? "disabled" : $$props.current ? "current" : "normal");
  let itemClass = user_derived(() => listGroupItem({
    state: get(state2),
    active: active(),
    horizontal: horizontal(),
    class: clsx_default($$props.class)
  }));
  var fragment_4 = comment();
  var node_4 = first_child(fragment_4);
  {
    var consequent_2 = ($$anchor2) => {
      var li = root_57();
      var node_5 = child(li);
      nameOrChildren(node_5);
      reset(li);
      template_effect(() => set_class(li, 1, clsx2(get(itemClass))));
      append($$anchor2, li);
    };
    var alternate_1 = ($$anchor2, $$elseif) => {
      {
        var consequent_3 = ($$anchor3) => {
          var button2 = root_73();
          let attributes;
          var node_6 = child(button2);
          nameOrChildren(node_6);
          reset(button2);
          template_effect(() => attributes = set_attributes(button2, attributes, {
            type: "button",
            ...restProps,
            class: get(itemClass),
            disabled: $$props.disabled,
            "aria-current": $$props.current,
            onclick: $$props.onclick
          }));
          append($$anchor3, button2);
        };
        var alternate_2 = ($$anchor3) => {
          var a = root_83();
          let attributes_1;
          var node_7 = child(a);
          nameOrChildren(node_7);
          reset(a);
          template_effect(() => attributes_1 = set_attributes(a, attributes_1, {
            ...restProps,
            class: get(itemClass),
            "aria-current": $$props.current
          }));
          append($$anchor3, a);
        };
        if_block(
          $$anchor2,
          ($$render) => {
            if (strict_equals($$props.href, void 0)) $$render(consequent_3);
            else $$render(alternate_2, false);
          },
          $$elseif
        );
      }
    };
    if_block(node_4, ($$render) => {
      if (strict_equals($$props.href, void 0) && !active()) $$render(consequent_2);
      else $$render(alternate_1, false);
    });
  }
  append($$anchor, fragment_4);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ListgroupItem = hmr(ListgroupItem, () => ListgroupItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListgroupItem[HMR].source;
    set(ListgroupItem[HMR].source, module.default[HMR].original);
  });
}
var ListgroupItem_default = ListgroupItem;

// node_modules/flowbite-svelte/dist/list-group/Listgroup.svelte
Listgroup[FILENAME] = "node_modules/flowbite-svelte/dist/list-group/Listgroup.svelte";
function Listgroup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Listgroup);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "items",
      "active",
      "onclick",
      "horizontal",
      "rounded",
      "border",
      "class",
      "itemClass",
      "iconClass"
    ],
    "restProps"
  );
  const base = user_derived(() => listGroup({
    rounded: $$props.rounded,
    border: $$props.border,
    horizontal: $$props.horizontal,
    class: clsx_default($$props.class)
  }));
  let tag = $$props.active ? "div" : "ul";
  setContext("listGrpActive", $$props.active);
  setContext("listGrpHorizontal", $$props.horizontal);
  function createItemClickHandler(item) {
    return function(event3) {
      if ($$props.onclick) {
        const itemClickEvent = { ...event3, detail: item };
        $$props.onclick(itemClickEvent);
      }
    };
  }
  var fragment = comment();
  var node = first_child(fragment);
  validate_void_dynamic_element(() => tag);
  validate_dynamic_element_tag(() => tag);
  element(
    node,
    () => tag,
    false,
    ($$element, $$anchor2) => {
      let attributes;
      template_effect(() => attributes = set_attributes($$element, attributes, { ...restProps, class: get(base) }));
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_2 = first_child(fragment_2);
          each(node_2, 17, () => $$props.items, index, ($$anchor4, item) => {
            var fragment_3 = comment();
            var node_3 = first_child(fragment_3);
            {
              var consequent = ($$anchor5) => {
                var fragment_4 = comment();
                var node_4 = first_child(fragment_4);
                snippet(node_4, () => $$props.children, () => get(item));
                append($$anchor5, fragment_4);
              };
              var alternate = ($$anchor5, $$elseif) => {
                {
                  var consequent_1 = ($$anchor6) => {
                    var fragment_5 = comment();
                    var node_5 = first_child(fragment_5);
                    const expression = user_derived(() => createItemClickHandler(get(item)));
                    ListgroupItem_default(node_5, {
                      href: void 0,
                      get class() {
                        return $$props.itemClass;
                      },
                      get iconClass() {
                        return $$props.iconClass;
                      },
                      get active() {
                        return $$props.active;
                      },
                      get horizontal() {
                        return $$props.horizontal;
                      },
                      get onclick() {
                        return get(expression);
                      },
                      children: wrap_snippet(Listgroup, ($$anchor7, $$slotProps) => {
                        next();
                        var text2 = text();
                        template_effect(() => set_text(text2, get(item)));
                        append($$anchor7, text2);
                      }),
                      $$slots: { default: true }
                    });
                    append($$anchor6, fragment_5);
                  };
                  var alternate_1 = ($$anchor6) => {
                    var fragment_7 = comment();
                    var node_6 = first_child(fragment_7);
                    const expression_1 = user_derived(() => get(item).onclick ?? createItemClickHandler(get(item)));
                    ListgroupItem_default(node_6, spread_props(
                      {
                        get href() {
                          return get(item).href;
                        },
                        get class() {
                          return $$props.itemClass;
                        },
                        get iconClass() {
                          return $$props.iconClass;
                        },
                        get active() {
                          return $$props.active;
                        },
                        get horizontal() {
                          return $$props.horizontal;
                        }
                      },
                      () => get(item),
                      {
                        get onclick() {
                          return get(expression_1);
                        }
                      }
                    ));
                    append($$anchor6, fragment_7);
                  };
                  if_block(
                    $$anchor5,
                    ($$render) => {
                      if (strict_equals(typeof get(item), "string")) $$render(consequent_1);
                      else $$render(alternate_1, false);
                    },
                    $$elseif
                  );
                }
              };
              if_block(node_3, ($$render) => {
                if ($$props.children) $$render(consequent);
                else $$render(alternate, false);
              });
            }
            append($$anchor4, fragment_3);
          });
          append($$anchor3, fragment_2);
        };
        var alternate_2 = ($$anchor3) => {
          var fragment_8 = comment();
          var node_7 = first_child(fragment_8);
          snippet(node_7, () => $$props.children ?? noop, () => {
            var _a;
            return (_a = $$props.items) == null ? void 0 : _a[0];
          });
          append($$anchor3, fragment_8);
        };
        if_block(node_1, ($$render) => {
          var _a;
          if ((_a = $$props.items) == null ? void 0 : _a.length) $$render(consequent_2);
          else $$render(alternate_2, false);
        });
      }
      append($$anchor2, fragment_1);
    },
    void 0,
    [27, 0]
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Listgroup = hmr(Listgroup, () => Listgroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Listgroup[HMR].source;
    set(Listgroup[HMR].source, module.default[HMR].original);
  });
}
var Listgroup_default = Listgroup;

// node_modules/flowbite-svelte/dist/mega-menu/theme.js
var megamenu = ce({
  slots: {
    base: "w-fit bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 rounded-lg border border-gray-100 dark:border-gray-600 divide-gray-100 dark:divide-gray-600",
    div: "flex flex-col md:flex-row p-4 max-w-(--breakpoint-md) justify-center mx-auto mt-2",
    ul: "grid grid-flow-row gap-y-4 md:gap-x-0 auto-col-max auto-row-max grid-cols-2 md:grid-cols-3 text-sm font-medium",
    extra: "md:w-1/3 mt-4 md:mt-0"
  },
  variants: {
    full: {
      true: { base: "border-y w-full ml-0 rounded-none" }
    },
    extra: {
      true: {}
    }
  },
  compoundVariants: [
    {
      full: true,
      extra: true,
      class: { ul: "grid-cols-2 md:w-2/3" }
    }
  ]
});

// node_modules/flowbite-svelte/dist/mega-menu/MegaMenu.svelte
MegaMenu[FILENAME] = "node_modules/flowbite-svelte/dist/mega-menu/MegaMenu.svelte";
var root_213 = add_locations(from_html(`<li><!></li>`), MegaMenu[FILENAME], [[24, 8]]);
var root_47 = add_locations(from_html(`<div><!></div>`), MegaMenu[FILENAME], [[31, 23]]);
var root_122 = add_locations(from_html(`<div><ul></ul> <!></div>`), MegaMenu[FILENAME], [[21, 2, [[22, 4]]]]);
function MegaMenu($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, MegaMenu);
  var $$ownership_validator = create_ownership_validator($$props);
  let items = prop($$props, "items", 19, () => []), isOpen = prop($$props, "isOpen", 15, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "extra",
      "items",
      "full",
      "ulClass",
      "isOpen",
      "class"
    ],
    "restProps"
  );
  const $$d = user_derived(() => megamenu({ full: $$props.full, extra: !!$$props.extra })), base = user_derived(() => {
    let { base: $$1, div: $$2, ul: $$3, extra: $$4 } = get($$d);
    return $$1;
  }), div = user_derived(() => {
    let { base: $$1, div: $$2, ul: $$3, extra: $$4 } = get($$d);
    return $$2;
  }), ul = user_derived(() => {
    let { base: $$1, div: $$2, ul: $$3, extra: $$4 } = get($$d);
    return $$3;
  }), extraCls = user_derived(() => {
    let { base: $$1, div: $$2, ul: $$3, extra: $$4 } = get($$d);
    return $$4;
  });
  let wrapperClass = user_derived(() => get(base)({ class: clsx_default($$props.class) }));
  let ulCls = user_derived(() => get(ul)({ class: $$props.ulClass }));
  var fragment = comment();
  var node = first_child(fragment);
  const expression = user_derived(() => $$props.full ? "default" : "dropdown");
  {
    $$ownership_validator.binding("isOpen", Popper_default, isOpen);
    Popper_default(node, spread_props(
      {
        get color() {
          return get(expression);
        },
        arrow: false,
        trigger: "click",
        placement: "bottom",
        get yOnly() {
          return $$props.full;
        }
      },
      () => restProps,
      {
        get class() {
          return get(wrapperClass);
        },
        get isOpen() {
          return isOpen();
        },
        set isOpen($$value) {
          isOpen($$value);
        },
        children: wrap_snippet(MegaMenu, ($$anchor2, $$slotProps) => {
          var div_1 = root_122();
          var ul_1 = child(div_1);
          each(
            ul_1,
            21,
            items,
            index,
            ($$anchor3, item, index2) => {
              var li = root_213();
              var node_1 = child(li);
              snippet(node_1, () => $$props.children, () => ({ item: get(item), index: index2 }));
              reset(li);
              append($$anchor3, li);
            },
            ($$anchor3) => {
              var fragment_1 = comment();
              var node_2 = first_child(fragment_1);
              snippet(node_2, () => $$props.children, () => ({ item: items()[0], index: 0 }));
              append($$anchor3, fragment_1);
            }
          );
          reset(ul_1);
          var node_3 = sibling(ul_1, 2);
          {
            var consequent = ($$anchor3) => {
              var div_2 = root_47();
              var node_4 = child(div_2);
              snippet(node_4, () => $$props.extra);
              reset(div_2);
              template_effect(($0) => set_class(div_2, 1, $0), [() => clsx2(get(extraCls)())]);
              append($$anchor3, div_2);
            };
            if_block(node_3, ($$render) => {
              if ($$props.full && $$props.extra) $$render(consequent);
            });
          }
          reset(div_1);
          template_effect(
            ($0) => {
              set_class(div_1, 1, $0);
              set_class(ul_1, 1, clsx2(get(ulCls)));
            },
            [() => clsx2(get(div)())]
          );
          append($$anchor2, div_1);
        }),
        $$slots: { default: true }
      }
    ));
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MegaMenu = hmr(MegaMenu, () => MegaMenu[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MegaMenu[HMR].source;
    set(MegaMenu[HMR].source, module.default[HMR].original);
  });
}
var MegaMenu_default = MegaMenu;

// node_modules/flowbite-svelte/dist/modal/Modal.svelte
Modal[FILENAME] = "node_modules/flowbite-svelte/dist/modal/Modal.svelte";
var root_314 = add_locations(from_html(`<h3> </h3>`), Modal[FILENAME], [[69, 10]]);
var root_214 = add_locations(from_html(`<div><!></div>`), Modal[FILENAME], [[67, 6]]);
var root_65 = add_locations(from_html(`<div><!></div>`), Modal[FILENAME], [[79, 6]]);
var root_123 = add_locations(from_html(`<dialog><!> <div><!></div> <!> <!></dialog>`), Modal[FILENAME], [[65, 2, [[75, 4]]]]);
function Modal($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Modal);
  let modal2 = prop($$props, "modal", 3, true), autoclose = prop($$props, "autoclose", 3, false), open = prop($$props, "open", 15, false), permanent = prop($$props, "permanent", 3, false), dismissable = prop($$props, "dismissable", 3, true), outsideclose = prop($$props, "outsideclose", 3, true), size = prop($$props, "size", 3, "md"), transition2 = prop($$props, "transition", 3, fade), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "oncancel",
      "onclose",
      "modal",
      "autoclose",
      "header",
      "footer",
      "title",
      "open",
      "permanent",
      "dismissable",
      "closeBtnClass",
      "headerClass",
      "bodyClass",
      "footerClass",
      "outsideclose",
      "size",
      "placement",
      "class",
      "params",
      "transition"
    ],
    "restProps"
  );
  const paramsDefault = { duration: 100, easing: sineIn };
  const paramsOptions = user_derived(() => $$props.params ?? paramsDefault);
  const $$d = user_derived(() => modal({
    placement: $$props.placement,
    size: size()
  })), base = user_derived(() => {
    let {
      base: $$1,
      header: $$2,
      footer: $$3,
      body: $$4,
      closeBtn: $$5
    } = get($$d);
    return $$1;
  }), headerCls = user_derived(() => {
    let {
      base: $$1,
      header: $$2,
      footer: $$3,
      body: $$4,
      closeBtn: $$5
    } = get($$d);
    return $$2;
  }), footerCls = user_derived(() => {
    let {
      base: $$1,
      header: $$2,
      footer: $$3,
      body: $$4,
      closeBtn: $$5
    } = get($$d);
    return $$3;
  }), body = user_derived(() => {
    let {
      base: $$1,
      header: $$2,
      footer: $$3,
      body: $$4,
      closeBtn: $$5
    } = get($$d);
    return $$4;
  }), closeBtn = user_derived(() => {
    let {
      base: $$1,
      header: $$2,
      footer: $$3,
      body: $$4,
      closeBtn: $$5
    } = get($$d);
    return $$5;
  });
  const closeModal = () => {
    var _a;
    if (!permanent()) {
      open(false);
      (_a = $$props.onclose) == null ? void 0 : _a.call($$props);
    }
  };
  function _oncancel(ev) {
    var _a;
    if (ev.currentTarget instanceof HTMLDialogElement) {
      ev.preventDefault();
      (_a = $$props.oncancel) == null ? void 0 : _a.call($$props, ev);
    }
  }
  function _onclick(ev) {
    if (ev.currentTarget instanceof HTMLDialogElement) {
      if (outsideclose() && strict_equals(ev.target, ev.currentTarget) && !permanent()) {
        closeModal();
      }
      if (autoclose() && ev.target instanceof HTMLButtonElement && !permanent()) {
        closeModal();
      }
    }
  }
  let dlg = state(void 0);
  user_effect(() => {
    if (permanent() && !open()) {
      open(true);
    }
  });
  const handleEscape = () => {
    var _a;
    if (!permanent()) {
      (_a = $$props.oncancel) == null ? void 0 : _a.call($$props, { currentTarget: get(dlg) });
      if ($$props.oncancel && (event == null ? void 0 : event.defaultPrevented)) return;
      closeModal();
    }
  };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_5 = ($$anchor2) => {
      var dialog = root_123();
      var event_handler = () => {
        var _a, _b;
        return modal2() ? (_a = get(dlg)) == null ? void 0 : _a.showModal() : (_b = get(dlg)) == null ? void 0 : _b.show();
      };
      var event_handler_1 = () => {
        var _a;
        return (_a = get(dlg)) == null ? void 0 : _a.close();
      };
      let attributes;
      var node_1 = child(dialog);
      {
        var consequent_2 = ($$anchor3) => {
          var div = root_214();
          var node_2 = child(div);
          {
            var consequent = ($$anchor4) => {
              var h3 = root_314();
              var text2 = child(h3, true);
              reset(h3);
              template_effect(() => set_text(text2, $$props.title));
              append($$anchor4, h3);
            };
            var alternate = ($$anchor4, $$elseif) => {
              {
                var consequent_1 = ($$anchor5) => {
                  var fragment_1 = comment();
                  var node_3 = first_child(fragment_1);
                  snippet(node_3, () => $$props.header);
                  append($$anchor5, fragment_1);
                };
                if_block(
                  $$anchor4,
                  ($$render) => {
                    if ($$props.header) $$render(consequent_1);
                  },
                  $$elseif
                );
              }
            };
            if_block(node_2, ($$render) => {
              if ($$props.title) $$render(consequent);
              else $$render(alternate, false);
            });
          }
          reset(div);
          template_effect(($0) => set_class(div, 1, $0), [
            () => clsx2(get(headerCls)({ class: $$props.headerClass }))
          ]);
          append($$anchor3, div);
        };
        if_block(node_1, ($$render) => {
          if ($$props.title || $$props.header) $$render(consequent_2);
        });
      }
      var div_1 = sibling(node_1, 2);
      var node_4 = child(div_1);
      snippet(node_4, () => $$props.children ?? noop);
      reset(div_1);
      var node_5 = sibling(div_1, 2);
      {
        var consequent_3 = ($$anchor3) => {
          var div_2 = root_65();
          var node_6 = child(div_2);
          snippet(node_6, () => $$props.footer);
          reset(div_2);
          template_effect(($0) => set_class(div_2, 1, $0), [
            () => clsx2(get(footerCls)({ class: $$props.footerClass }))
          ]);
          append($$anchor3, div_2);
        };
        if_block(node_5, ($$render) => {
          if ($$props.footer) $$render(consequent_3);
        });
      }
      var node_7 = sibling(node_5, 2);
      {
        var consequent_4 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_8 = first_child(fragment_2);
          const expression = user_derived(() => get(closeBtn)({ class: $$props.closeBtnClass }));
          CloseButton_default(node_8, {
            onclick: closeModal,
            get class() {
              return get(expression);
            }
          });
          append($$anchor3, fragment_2);
        };
        if_block(node_7, ($$render) => {
          if (dismissable() && !permanent()) $$render(consequent_4);
        });
      }
      reset(dialog);
      action(dialog, ($$node, $$action_arg) => {
        var _a;
        return (_a = trapFocus) == null ? void 0 : _a($$node, $$action_arg);
      }, () => ({ onEscape: handleEscape }));
      bind_this(dialog, ($$value) => set(dlg, $$value), () => get(dlg));
      template_effect(
        ($0, $1) => {
          attributes = set_attributes(dialog, attributes, {
            ...restProps,
            class: $0,
            tabindex: "-1",
            oncancel: _oncancel,
            onclick: _onclick,
            onintrostart: event_handler,
            onoutroend: event_handler_1
          });
          set_class(div_1, 1, $1);
        },
        [
          () => get(base)({ class: clsx_default($$props.class) }),
          () => clsx2(get(body)({ class: $$props.bodyClass }))
        ]
      );
      transition(3, dialog, transition2, () => get(paramsOptions));
      append($$anchor2, dialog);
    };
    if_block(node, ($$render) => {
      if (open()) $$render(consequent_5);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Modal = hmr(Modal, () => Modal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Modal[HMR].source;
    set(Modal[HMR].source, module.default[HMR].original);
  });
}
var Modal_default = Modal;

// node_modules/flowbite-svelte/dist/modal/theme.js
var modal = ce({
  slots: {
    base: "backdrop:bg-black/80 open:flex flex-col w-full max-h-[90hv] rounded-lg divide-y text-gray-500 dark:text-gray-400 border-gray-300 dark:border-gray-800 divide-gray-300 dark:divide-gray-700 bg-white dark:bg-gray-800 pointer-events-auto",
    header: "flex items-center p-4 md:p-5 justify-between rounded-t-lg shrink-0 text-xl font-semibold text-gray-900 dark:text-white",
    footer: "flex items-center p-4 md:p-5 space-x-3 rtl:space-x-reverse rounded-b-lg shrink-0",
    body: "p-4 md:p-5 space-y-4 overflow-y-auto overscroll-contain",
    closeBtn: "absolute top-3 end-2.5"
  },
  variants: {
    placement: {
      "top-left": { base: "top-0 left-0" },
      "top-center": { base: "top-0 left-1/2 -translate-x-1/2" },
      "top-right": { base: "top-0 left-full -translate-x-full" },
      "center-left": { base: "top-1/2 left-0 -translate-y-1/2" },
      center: { base: "top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2" },
      "center-right": { base: "top-1/2 left-full -translate-x-full -translate-y-1/2" },
      "bottom-left": { base: "top-full -translate-y-full left-0" },
      "bottom-center": { base: "top-full -translate-y-full left-1/2 -translate-x-1/2" },
      "bottom-right": { base: "top-full -translate-y-full left-full -translate-x-full" }
    },
    size: {
      xs: { base: "max-w-md" },
      sm: { base: "max-w-lg" },
      md: { base: "max-w-2xl" },
      lg: { base: "max-w-4xl" },
      xl: { base: "max-w-7xl" }
    }
  },
  defaultVariants: {
    placement: "center",
    size: "md"
  }
});

// node_modules/flowbite-svelte/dist/navbar/theme.js
var navbar = ce({
  base: "w-full px-2 py-2.5 sm:px-4"
});
var navbar_brand = ce({
  base: "flex items-center"
});
var navbar_container = ce({
  base: "mx-auto flex flex-wrap items-center justify-between ",
  variants: {
    fluid: { true: "w-full", false: "container" }
  }
});
var navbar_ul = ce({
  slots: {
    base: "w-full md:block md:w-auto",
    ul: "flex flex-col p-4 mt-4 md:flex-row rtl:space-x-reverse md:mt-0 md:text-sm md:font-medium",
    active: "text-white bg-primary-700 md:bg-transparent md:text-primary-700 md:dark:text-white dark:bg-primary-600 md:dark:bg-transparent",
    nonActive: "hover:text-primary-500 text-gray-700 hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-primary-700 dark:text-gray-400 dark:md:text-white md:dark:hover:text-white dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent"
  },
  variants: {
    hidden: {
      false: {
        ul: "border rounded-lg bg-gray-50 dark:bg-gray-800 dark:border-gray-700 text-gray-700 dark:text-gray-400 border-gray-100 dark:border-gray-700 divide-gray-100 dark:divide-gray-700 sm:border-none sm:rounded-none sm:bg-inherit dark:sm:bg-inherit"
      },
      true: { base: "hidden" }
    }
  },
  defaultVariants: {}
});
var navbar_li = ce({
  base: "block py-2 pe-4 ps-3 md:p-2 rounded-sm md:border-0",
  variants: {
    hidden: {
      false: "block py-2 pe-4 ps-3 md:p-2 rounded-sm text-gray-700 hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-primary-700 dark:text-gray-400 md:dark:hover:text-white dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent"
    }
  },
  defaultVariants: {}
});
var navbar_hamburger = ce({
  slots: {
    base: "ms-3 md:hidden",
    menu: "h-6 w-6 shrink-0"
  }
});

// node_modules/flowbite-svelte/dist/navbar/NavContainer.svelte
NavContainer[FILENAME] = "node_modules/flowbite-svelte/dist/navbar/NavContainer.svelte";
var root40 = add_locations(from_html(`<div><!></div>`), NavContainer[FILENAME], [[9, 0]]);
function NavContainer($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, NavContainer);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "fluid",
      "class"
    ],
    "restProps"
  );
  var div = root40();
  let attributes;
  var node = child(div);
  snippet(node, () => $$props.children ?? noop);
  reset(div);
  template_effect(($0) => attributes = set_attributes(div, attributes, { ...restProps, class: $0 }), [
    () => navbar_container({
      fluid: $$props.fluid,
      class: clsx_default($$props.class)
    })
  ]);
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  NavContainer = hmr(NavContainer, () => NavContainer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavContainer[HMR].source;
    set(NavContainer[HMR].source, module.default[HMR].original);
  });
}
var NavContainer_default = NavContainer;

// node_modules/flowbite-svelte/dist/navbar/Navbar.svelte
Navbar[FILENAME] = "node_modules/flowbite-svelte/dist/navbar/Navbar.svelte";
var root41 = add_locations(from_html(`<nav><div><!></div></nav>`), Navbar[FILENAME], [[20, 0, [[21, 2]]]]);
function Navbar($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Navbar);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "fluid",
      "navContainerClass",
      "class"
    ],
    "restProps"
  );
  let navState = proxy({ hidden: true });
  setContext("navState", navState);
  let toggle2 = () => {
    navState.hidden = !navState.hidden;
  };
  var nav = root41();
  var div = child(nav);
  let attributes;
  var node = child(div);
  NavContainer_default(node, {
    get fluid() {
      return $$props.fluid;
    },
    get class() {
      return $$props.navContainerClass;
    },
    children: wrap_snippet(Navbar, ($$anchor2, $$slotProps) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.children, () => ({
        hidden: navState.hidden,
        toggle: toggle2,
        NavContainer: NavContainer_default
      }));
      append($$anchor2, fragment);
    }),
    $$slots: { default: true }
  });
  reset(div);
  reset(nav);
  template_effect(($0) => attributes = set_attributes(div, attributes, { ...restProps, class: $0 }), [
    () => navbar({ class: clsx_default($$props.class) })
  ]);
  append($$anchor, nav);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Navbar = hmr(Navbar, () => Navbar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Navbar[HMR].source;
    set(Navbar[HMR].source, module.default[HMR].original);
  });
}
var Navbar_default = Navbar;

// node_modules/flowbite-svelte/dist/navbar/NavBrand.svelte
NavBrand[FILENAME] = "node_modules/flowbite-svelte/dist/navbar/NavBrand.svelte";
var root42 = add_locations(from_html(`<a><!></a>`), NavBrand[FILENAME], [[9, 0]]);
function NavBrand($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, NavBrand);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class"
    ],
    "restProps"
  );
  var a = root42();
  let attributes;
  var node = child(a);
  snippet(node, () => $$props.children ?? noop);
  reset(a);
  template_effect(($0) => attributes = set_attributes(a, attributes, { ...restProps, class: $0 }), [
    () => navbar_brand({ class: clsx_default($$props.class) })
  ]);
  append($$anchor, a);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  NavBrand = hmr(NavBrand, () => NavBrand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavBrand[HMR].source;
    set(NavBrand[HMR].source, module.default[HMR].original);
  });
}
var NavBrand_default = NavBrand;

// node_modules/flowbite-svelte/dist/navbar/NavLi.svelte
NavLi[FILENAME] = "node_modules/flowbite-svelte/dist/navbar/NavLi.svelte";
var root_124 = add_locations(from_html(`<button><!></button>`), NavLi[FILENAME], [[24, 4]]);
var root_215 = add_locations(from_html(`<a><!></a>`), NavLi[FILENAME], [[28, 4]]);
var root43 = add_locations(from_html(`<li><!></li>`), NavLi[FILENAME], [[22, 0]]);
function NavLi($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, NavLi);
  let navState = getContext("navState");
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "activeClass",
      "nonActiveClass",
      "class",
      "onclick"
    ],
    "restProps"
  );
  const activeUrlStore = getContext("activeUrl");
  let navUrl = state("");
  activeUrlStore.subscribe((value) => {
    set(navUrl, value, true);
  });
  let active = user_derived(() => get(navUrl) ? strict_equals($$props.href, get(navUrl)) : false);
  let liClass = user_derived(() => navbar_li({
    hidden: navState.hidden,
    class: clsx_default(get(active) ? $$props.activeClass ?? navState.activeClass : $$props.nonActiveClass ?? navState.nonActiveClass, $$props.class)
  }));
  var li = root43();
  var node = child(li);
  {
    var consequent = ($$anchor2) => {
      var button2 = root_124();
      let attributes;
      var node_1 = child(button2);
      snippet(node_1, () => $$props.children ?? noop);
      reset(button2);
      template_effect(() => attributes = set_attributes(button2, attributes, {
        role: "presentation",
        ...restProps,
        class: get(liClass),
        onclick: $$props.onclick
      }));
      append($$anchor2, button2);
    };
    var alternate = ($$anchor2) => {
      var a = root_215();
      let attributes_1;
      var node_2 = child(a);
      snippet(node_2, () => $$props.children ?? noop);
      reset(a);
      template_effect(() => attributes_1 = set_attributes(a, attributes_1, { ...restProps, class: get(liClass) }));
      append($$anchor2, a);
    };
    if_block(node, ($$render) => {
      if (strict_equals($$props.href, void 0)) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  reset(li);
  append($$anchor, li);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  NavLi = hmr(NavLi, () => NavLi[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavLi[HMR].source;
    set(NavLi[HMR].source, module.default[HMR].original);
  });
}
var NavLi_default = NavLi;

// node_modules/flowbite-svelte/dist/navbar/NavUl.svelte
NavUl[FILENAME] = "node_modules/flowbite-svelte/dist/navbar/NavUl.svelte";
var root_125 = add_locations(from_html(`<div><ul><!> <ul></ul></ul></div>`), NavUl[FILENAME], [
  [40, 2, [[42, 4, [[44, 6]]]]]
]);
var root_216 = add_locations(from_html(`<div><ul><!></ul></div>`), NavUl[FILENAME], [[48, 2, [[49, 4]]]]);
function NavUl($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, NavUl);
  let navState = getContext("navState");
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "activeUrl",
      "ulClass",
      "slideParams",
      "activeClass",
      "nonActiveClass",
      "class"
    ],
    "restProps"
  );
  const slideParamsDefault = { delay: 250, duration: 500, easing: sineIn };
  const slideParamsOptions = user_derived(() => $$props.slideParams ?? slideParamsDefault);
  const activeUrlStore = writable("");
  let hidden = user_derived(() => navState.hidden ?? true);
  let $$d = user_derived(() => navbar_ul({ hidden: get(hidden) })), base = user_derived(() => {
    let {
      base: $$1,
      ul: $$2,
      active: $$3,
      nonActive: $$4
    } = get($$d);
    return $$1;
  }), ul = user_derived(() => {
    let {
      base: $$1,
      ul: $$2,
      active: $$3,
      nonActive: $$4
    } = get($$d);
    return $$2;
  }), active = user_derived(() => {
    let {
      base: $$1,
      ul: $$2,
      active: $$3,
      nonActive: $$4
    } = get($$d);
    return $$3;
  }), nonActive = user_derived(() => {
    let {
      base: $$1,
      ul: $$2,
      active: $$3,
      nonActive: $$4
    } = get($$d);
    return $$4;
  });
  user_effect(() => {
    navState.activeClass = get(active)({ class: $$props.activeClass });
    navState.nonActiveClass = get(nonActive)({ class: $$props.nonActiveClass });
  });
  user_effect(() => {
    activeUrlStore.set($$props.activeUrl ?? "");
  });
  setContext("activeUrl", activeUrlStore);
  let _divClass = user_derived(() => get(base)({ class: clsx_default($$props.class) }));
  let _ulClass = user_derived(() => get(ul)({ class: $$props.ulClass }));
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_125();
      let attributes;
      var ul_1 = child(div);
      var node_1 = child(ul_1);
      snippet(node_1, () => $$props.children ?? noop);
      next(2);
      reset(ul_1);
      reset(div);
      template_effect(() => {
        attributes = set_attributes(div, attributes, { ...restProps, class: get(_divClass) });
        set_class(ul_1, 1, clsx2(get(_ulClass)));
      });
      transition(3, div, () => slide, () => get(slideParamsOptions));
      append($$anchor2, div);
    };
    var alternate = ($$anchor2) => {
      var div_1 = root_216();
      let attributes_1;
      var ul_2 = child(div_1);
      var node_2 = child(ul_2);
      snippet(node_2, () => $$props.children ?? noop);
      reset(ul_2);
      reset(div_1);
      template_effect(() => {
        attributes_1 = set_attributes(div_1, attributes_1, { ...restProps, class: get(_divClass) });
        set_class(ul_2, 1, clsx2(get(_ulClass)));
      });
      append($$anchor2, div_1);
    };
    if_block(node, ($$render) => {
      if (!get(hidden)) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  NavUl = hmr(NavUl, () => NavUl[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavUl[HMR].source;
    set(NavUl[HMR].source, module.default[HMR].original);
  });
}
var NavUl_default = NavUl;

// node_modules/flowbite-svelte/dist/toolbar/Toolbar.svelte
Toolbar[FILENAME] = "node_modules/flowbite-svelte/dist/toolbar/Toolbar.svelte";
var root44 = add_locations(from_html(`<div><div><!></div> <!></div>`), Toolbar[FILENAME], [[28, 0, [[29, 2]]]]);
function Toolbar($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Toolbar);
  const [$$stores, $$cleanup] = setup_stores();
  const $separators = () => (validate_store(separators, "separators"), store_get(separators, "$separators", $$stores));
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "end",
      "color",
      "embedded",
      "class"
    ],
    "restProps"
  );
  const separators = writable(false);
  setContext("toolbar", separators);
  let frameColor = user_derived(() => $$props.embedded ? "default" : $$props.color);
  let $$d = user_derived(() => toolbar({
    color: get(frameColor),
    embedded: $$props.embedded,
    separators: $separators()
  })), base = user_derived(() => {
    let { base: $$1, content: $$2 } = get($$d);
    return $$1;
  }), content = user_derived(() => {
    let { base: $$1, content: $$2 } = get($$d);
    return $$2;
  });
  var div = root44();
  let attributes;
  var div_1 = child(div);
  var node = child(div_1);
  snippet(node, () => $$props.children ?? noop);
  reset(div_1);
  var node_1 = sibling(div_1, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_2 = first_child(fragment);
      snippet(node_2, () => $$props.end);
      append($$anchor2, fragment);
    };
    if_block(node_1, ($$render) => {
      if ($$props.end) $$render(consequent);
    });
  }
  reset(div);
  template_effect(
    ($0, $1) => {
      attributes = set_attributes(div, attributes, { ...restProps, class: $0 });
      set_class(div_1, 1, $1);
    },
    [
      () => get(base)({ class: clsx_default($$props.class) }),
      () => clsx2(get(content)())
    ]
  );
  append($$anchor, div);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Toolbar = hmr(Toolbar, () => Toolbar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toolbar[HMR].source;
    set(Toolbar[HMR].source, module.default[HMR].original);
  });
}
var Toolbar_default = Toolbar;

// node_modules/flowbite-svelte/dist/toolbar/ToolbarGroup.svelte
ToolbarGroup[FILENAME] = "node_modules/flowbite-svelte/dist/toolbar/ToolbarGroup.svelte";
var root45 = add_locations(from_html(`<div><!></div>`), ToolbarGroup[FILENAME], [[16, 0]]);
function ToolbarGroup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ToolbarGroup);
  const [$$stores, $$cleanup] = setup_stores();
  const $options = () => (validate_store(options, "options"), store_get(options, "$options", $$stores));
  let position = prop($$props, "position", 3, "middle"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "spacing",
      "padding",
      "position",
      "class"
    ],
    "restProps"
  );
  const groupClass = user_derived(() => toolbarGroup({
    spacing: $$props.spacing,
    padding: $$props.padding,
    position: position(),
    class: clsx_default($$props.class)
  }));
  const options = getContext("toolbar");
  if (options) store_set(options, true);
  var div = root45();
  let attributes;
  var node = child(div);
  snippet(node, () => $$props.children ?? noop);
  reset(div);
  template_effect(() => attributes = set_attributes(div, attributes, { ...restProps, class: get(groupClass) }));
  append($$anchor, div);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  ToolbarGroup = hmr(ToolbarGroup, () => ToolbarGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ToolbarGroup[HMR].source;
    set(ToolbarGroup[HMR].source, module.default[HMR].original);
  });
}
var ToolbarGroup_default = ToolbarGroup;

// node_modules/flowbite-svelte/dist/toolbar/theme.js
var toolbar = ce({
  slots: {
    base: "flex justify-between items-center",
    content: "flex flex-wrap items-center"
  },
  variants: {
    embedded: {
      true: {},
      false: {
        base: "py-2 px-3 rounded-lg dark:border"
      }
    },
    color: {
      default: {
        base: "bg-gray-50 dark:bg-gray-800 dark:border-gray-600",
        content: "divide-gray-300 dark:divide-gray-800"
      },
      primary: {
        base: "bg-primary-50 dark:bg-gray-800 dark:border-primary-800",
        content: "divide-primary-300 dark:divide-primary-800"
      },
      secondary: {
        base: "bg-secondary-50 dark:bg-gray-800 dark:border-secondary-800",
        content: "divide-secondary-300 dark:divide-primary-800"
      },
      gray: {
        base: "bg-gray-50 dark:bg-gray-800 dark:border-gray-800",
        content: "divide-gray-300 dark:divide-gray-800"
      },
      red: {
        base: "bg-red-50 dark:bg-gray-800 dark:border-red-800",
        content: "divide-red-300 dark:divide-red-800"
      },
      yellow: {
        base: "bg-yellow-50 dark:bg-gray-800 dark:border-yellow-800",
        content: "divide-yellow-300 dark:divide-yellow-800"
      },
      green: {
        base: "bg-green-50 dark:bg-gray-800 dark:border-green-800",
        content: "divide-green-300 dark:divide-green-800"
      },
      indigo: {
        base: "bg-indigo-50 dark:bg-gray-800 dark:border-indigo-800",
        content: "divide-indigo-300 dark:divide-indigo-800"
      },
      purple: {
        base: "bg-purple-50 dark:bg-gray-800 dark:border-purple-800",
        content: "divide-purple-300 dark:divide-purple-800"
      },
      pink: {
        base: "bg-pink-50 dark:bg-gray-800 dark:border-pink-800",
        content: "divide-pink-300 dark:divide-pink-800"
      },
      blue: {
        base: "bg-blue-50 dark:bg-gray-800 dark:border-blue-800",
        content: "divide-blue-300 dark:divide-blue-800"
      },
      dark: {
        base: "bg-gray-50 dark:bg-gray-800 dark:border-gray-800",
        content: "divide-gray-300 dark:divide-gray-800"
      }
    },
    separators: {
      true: {
        content: "sm:divide-x rtl:divide-x-reverse"
      }
    }
  },
  compoundVariants: [
    {
      embedded: true,
      color: "default",
      class: {
        base: "bg-transparent"
      }
    }
  ],
  defaultVariants: {
    color: "default"
  }
});
var toolbarGroup = ce({
  base: "flex items-center",
  variants: {
    spacing: {
      default: "space-x-1 rtl:space-x-reverse",
      tight: "space-x-0.5 rtl:space-x-reverse",
      loose: "space-x-2 rtl:space-x-reverse"
    },
    padding: {
      default: "sm:not(:last):pe-4 sm:not(:first):ps-4",
      none: ""
    },
    position: {
      middle: "",
      first: "sm:ps-0",
      last: "sm:pe-0"
    }
  },
  compoundVariants: [
    {
      position: ["first", "last"],
      class: "sm:px-0"
    }
  ],
  defaultVariants: {
    spacing: "default",
    padding: "default"
  }
});
var toolbarButton = ce({
  base: "focus:outline-hidden whitespace-normal",
  variants: {
    color: {
      dark: "text-gray-500 hover:text-gray-900 hover:bg-gray-200 dark:text-gray-400 dark:hover:text-white dark:hover:bg-gray-600",
      gray: "text-gray-500 focus:ring-gray-400 hover:bg-gray-200 dark:hover:bg-gray-800 dark:hover:text-gray-300",
      red: "text-red-500 focus:ring-red-400 hover:bg-red-200 dark:hover:bg-red-800 dark:hover:text-red-300",
      yellow: "text-yellow-500 focus:ring-yellow-400 hover:bg-yellow-200 dark:hover:bg-yellow-800 dark:hover:text-yellow-300",
      green: "text-green-500 focus:ring-green-400 hover:bg-green-200 dark:hover:bg-green-800 dark:hover:text-green-300",
      indigo: "text-indigo-500 focus:ring-indigo-400 hover:bg-indigo-200 dark:hover:bg-indigo-800 dark:hover:text-indigo-300",
      purple: "text-purple-500 focus:ring-purple-400 hover:bg-purple-200 dark:hover:bg-purple-800 dark:hover:text-purple-300",
      pink: "text-pink-500 focus:ring-pink-400 hover:bg-pink-200 dark:hover:bg-pink-800 dark:hover:text-pink-300",
      blue: "text-blue-500 focus:ring-blue-400 hover:bg-blue-200 dark:hover:bg-blue-800 dark:hover:text-blue-300",
      primary: "text-primary-500 focus:ring-primary-400 hover:bg-primary-200 dark:hover:bg-primary-800 dark:hover:text-primary-300",
      default: "focus:ring-gray-400 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-gray-50"
    },
    size: {
      xs: "m-0.5 rounded-xs focus:ring-1 p-0.5",
      sm: "m-0.5 rounded-sm focus:ring-1 p-0.5",
      md: "m-0.5 rounded-lg focus:ring-2 p-1.5",
      lg: "m-0.5 rounded-lg focus:ring-2 p-2.5"
    },
    background: {
      true: "",
      false: ""
    }
  },
  compoundVariants: [
    {
      color: "default",
      background: true,
      class: "dark:hover:bg-gray-600"
    },
    {
      color: "default",
      background: false,
      class: "dark:hover:bg-gray-700"
    }
  ],
  defaultVariants: {
    color: "default",
    size: "md"
  }
});

// node_modules/flowbite-svelte/dist/toolbar/ToolbarButton.svelte
ToolbarButton[FILENAME] = "node_modules/flowbite-svelte/dist/toolbar/ToolbarButton.svelte";
var root_217 = add_locations(from_html(`<span class="sr-only"> </span>`), ToolbarButton[FILENAME], [[24, 14]]);
var root_126 = add_locations(from_html(`<button><!> <!></button>`), ToolbarButton[FILENAME], [[23, 2]]);
var root_48 = add_locations(from_html(`<span class="sr-only"> </span>`), ToolbarButton[FILENAME], [[29, 14]]);
var root_315 = add_locations(from_html(`<a><!> <!></a>`), ToolbarButton[FILENAME], [[28, 2]]);
function ToolbarButton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ToolbarButton);
  const background = getContext("background");
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "onclick",
      "color",
      "name",
      "aria-label",
      "size",
      "class"
    ],
    "restProps"
  );
  const buttonClass = user_derived(() => toolbarButton({
    color: $$props.color,
    size: $$props.size,
    background: !!background,
    class: clsx_default($$props.class)
  }));
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var button2 = root_126();
      let attributes;
      var node_1 = child(button2);
      {
        var consequent = ($$anchor3) => {
          var span2 = root_217();
          var text2 = child(span2, true);
          reset(span2);
          template_effect(() => set_text(text2, $$props.name));
          append($$anchor3, span2);
        };
        if_block(node_1, ($$render) => {
          if ($$props.name) $$render(consequent);
        });
      }
      var node_2 = sibling(node_1, 2);
      snippet(node_2, () => $$props.children ?? noop);
      reset(button2);
      template_effect(() => attributes = set_attributes(button2, attributes, {
        type: "button",
        ...restProps,
        class: get(buttonClass),
        "aria-label": $$props["aria-label"] ?? $$props.name,
        onclick: $$props.onclick
      }));
      append($$anchor2, button2);
    };
    var alternate = ($$anchor2) => {
      var a = root_315();
      let attributes_1;
      var node_3 = child(a);
      {
        var consequent_2 = ($$anchor3) => {
          var span_1 = root_48();
          var text_1 = child(span_1, true);
          reset(span_1);
          template_effect(() => set_text(text_1, $$props.name));
          append($$anchor3, span_1);
        };
        if_block(node_3, ($$render) => {
          if ($$props.name) $$render(consequent_2);
        });
      }
      var node_4 = sibling(node_3, 2);
      snippet(node_4, () => $$props.children ?? noop);
      reset(a);
      template_effect(() => attributes_1 = set_attributes(a, attributes_1, {
        ...restProps,
        class: get(buttonClass),
        "aria-label": $$props["aria-label"] ?? $$props.name
      }));
      append($$anchor2, a);
    };
    if_block(node, ($$render) => {
      if (strict_equals($$props.href, void 0)) $$render(consequent_1);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ToolbarButton = hmr(ToolbarButton, () => ToolbarButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ToolbarButton[HMR].source;
    set(ToolbarButton[HMR].source, module.default[HMR].original);
  });
}
var ToolbarButton_default = ToolbarButton;

// node_modules/flowbite-svelte/dist/navbar/Menu.svelte
Menu[FILENAME] = "node_modules/flowbite-svelte/dist/navbar/Menu.svelte";
var root46 = add_locations(from_svg(`<svg><!></svg>`), Menu[FILENAME], [[27, 0]]);
function Menu($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Menu);
  let size = prop($$props, "size", 3, "24"), color = prop($$props, "color", 3, "currentColor"), variation = prop($$props, "variation", 3, "outline"), ariaLabel = prop($$props, "ariaLabel", 3, "bars 3"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "size",
      "color",
      "variation",
      "ariaLabel",
      "class"
    ],
    "restProps"
  );
  let viewBox = state("0 0 24 24");
  let svgpath = state("");
  let svgoutline = `<path stroke="${color()}" stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16"></path> `;
  let svgsolid = `<path fill="${color()}" clip-rule="evenodd" fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"></path> `;
  user_effect(() => {
    switch (variation()) {
      case "outline":
        set(svgpath, svgoutline);
        set(viewBox, "0 0 24 24");
        break;
      case "solid":
        set(svgpath, svgsolid);
        set(viewBox, "0 0 24 24");
        break;
      default:
        set(svgpath, svgoutline);
        set(viewBox, "0 0 24 24");
    }
  });
  var svg = root46();
  let attributes;
  var node = child(svg);
  html(node, () => get(svgpath), true);
  reset(svg);
  template_effect(() => attributes = set_attributes(svg, attributes, {
    xmlns: "http://www.w3.org/2000/svg",
    role: "button",
    tabindex: "0",
    width: size(),
    height: size(),
    class: $$props.class,
    ...restProps,
    "aria-label": ariaLabel(),
    fill: "none",
    viewBox: get(viewBox),
    "stroke-width": "2"
  }));
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Menu = hmr(Menu, () => Menu[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Menu[HMR].source;
    set(Menu[HMR].source, module.default[HMR].original);
  });
}
var Menu_default = Menu;

// node_modules/flowbite-svelte/dist/navbar/NavHamburger.svelte
NavHamburger[FILENAME] = "node_modules/flowbite-svelte/dist/navbar/NavHamburger.svelte";
function NavHamburger($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, NavHamburger);
  let name = prop($$props, "name", 3, "Open main menu"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "onclick",
      "menuClass",
      "class",
      "name"
    ],
    "restProps"
  );
  let { base, menu } = navbar_hamburger();
  let navState = getContext("navState");
  const toggle2 = (ev) => {
    navState.hidden = !navState.hidden;
  };
  var fragment = comment();
  var node = first_child(fragment);
  const expression = user_derived(() => $$props.onclick || toggle2);
  const expression_1 = user_derived(() => base({ class: clsx_default($$props.class) }));
  ToolbarButton_default(node, spread_props(
    {
      get name() {
        return name();
      },
      get onclick() {
        return get(expression);
      }
    },
    () => restProps,
    {
      get class() {
        return get(expression_1);
      },
      children: wrap_snippet(NavHamburger, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        const expression_2 = user_derived(() => menu({ class: $$props.menuClass }));
        Menu_default(node_1, {
          get class() {
            return get(expression_2);
          }
        });
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    }
  ));
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  NavHamburger = hmr(NavHamburger, () => NavHamburger[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavHamburger[HMR].source;
    set(NavHamburger[HMR].source, module.default[HMR].original);
  });
}
var NavHamburger_default = NavHamburger;

// node_modules/flowbite-svelte/dist/pagination/theme.js
var paginationnav = ce({
  slots: {
    base: "inline-flex -space-x-px rtl:space-x-reverse items-center",
    tableDiv: "flex items-center text-sm mb-4",
    tableSpan: "font-semibold mx-1",
    prevItem: "rounded-none",
    nextItem: "rounded-none"
  },
  variants: {
    size: {
      default: "",
      large: ""
    },
    layout: {
      table: { prevItem: "rounded-s bg-gray-800 hover:bg-gray-900 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white text-white  hover:text-gray-200", nextItem: "text-white bg-gray-800 border-0 border-s border-gray-700 rounded-e hover:bg-gray-900 hover:text-gray-200 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white" },
      navigation: { prevItem: "rounded-s-lg", nextItem: "rounded-e-lg" },
      pagination: { prevItem: "rounded-s-lg", nextItem: "rounded-e-lg" }
    }
  },
  defaultVariants: {
    table: false,
    size: "default"
  }
});
var paginationbutton = ce({
  base: "flex items-center font-medium",
  variants: {
    size: {
      default: "h-8 px-3 text-sm",
      large: "h-10 px-4 text-base"
    },
    active: {
      true: "text-blue-600 border border-gray-300 bg-blue-50 hover:bg-blue-100 hover:text-blue-700 dark:border-gray-700 dark:bg-gray-700 dark:text-white",
      false: "text-gray-500 bg-white hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
    },
    group: {
      true: "",
      false: "rounded-lg"
    },
    table: {
      true: "rounded-sm",
      false: "border"
    },
    disabled: {
      true: "cursor-not-allowed opacity-50",
      false: ""
    }
  },
  compoundVariants: [
    {
      group: false,
      table: false,
      class: "rounded-lg"
    }
  ],
  defaultVariants: {
    size: "default",
    active: false,
    group: false,
    table: false
  }
});
var paginationItem = ce({
  base: "flex items-center font-medium",
  variants: {
    size: {
      default: "h-8 px-3 text-sm",
      large: "h-10 px-4 text-base"
    },
    active: {
      true: "text-blue-600 border border-gray-300 bg-blue-50 hover:bg-blue-100 hover:text-blue-700 dark:border-gray-700 dark:bg-gray-700 dark:text-white",
      false: "text-gray-500 bg-white hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
    },
    group: {
      true: "",
      false: "rounded-lg"
    },
    table: {
      true: "rounded-sm",
      false: "border"
    }
  },
  compoundVariants: [
    {
      group: false,
      table: false,
      class: "rounded-lg"
    }
  ],
  defaultVariants: {
    size: "default",
    active: false,
    group: false,
    table: false
  }
});
var pagination = ce({
  base: "inline-flex -space-x-px rtl:space-x-reverse items-center",
  variants: {
    table: {
      true: "divide-x rtl:divide-x-reverse dark divide-gray-700 dark:divide-gray-700",
      false: ""
    },
    size: {
      default: "",
      large: ""
    }
  },
  defaultVariants: {
    table: false,
    size: "default"
  }
});

// node_modules/flowbite-svelte/dist/pagination/PaginationNav.svelte
PaginationNav[FILENAME] = "node_modules/flowbite-svelte/dist/pagination/PaginationNav.svelte";
var root_127 = add_locations(from_html(`<div>Showing <span> </span> of <span> </span> Entries</div>`), PaginationNav[FILENAME], [[57, 4, [[58, 14], [60, 6]]]]);
var root_66 = add_locations(from_html(`<li><!></li>`), PaginationNav[FILENAME], [[77, 8]]);
var root47 = add_locations(from_html(`<nav><!> <ul><li><!></li> <!> <li><!></li></ul></nav>`), PaginationNav[FILENAME], [
  [
    55,
    0,
    [[65, 2, [[66, 4], [84, 4]]]]
  ]
]);
function PaginationNav($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, PaginationNav);
  function paginationRange(start, end) {
    return Array.from({ length: end - start + 1 }, (_, i) => start + i);
  }
  let currentPage = prop($$props, "currentPage", 3, 1), totalPages = prop($$props, "totalPages", 3, 1), visiblePages = prop($$props, "visiblePages", 3, 5), layout2 = prop($$props, "layout", 3, "pagination"), nextLabel = prop($$props, "nextLabel", 3, "Next"), previousLabel = prop($$props, "previousLabel", 3, "Previous"), ariaLabel = prop($$props, "ariaLabel", 3, "Page navigation"), size = prop($$props, "size", 3, "default"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "currentPage",
      "totalPages",
      "visiblePages",
      "onPageChange",
      "prevContent",
      "nextContent",
      "prevClass",
      "nextClass",
      "layout",
      "nextLabel",
      "previousLabel",
      "ariaLabel",
      "size",
      "class",
      "spanClass",
      "tableDivClass"
    ],
    "restProps"
  );
  setContext("group", true);
  setContext("size", size());
  setContext("table", strict_equals(layout2(), "table"));
  const halfVisiblePages = user_derived(() => Math.floor(visiblePages() / 2));
  const lastPage = user_derived(() => Math.min(Math.max(strict_equals(layout2(), "pagination") ? currentPage() + get(halfVisiblePages) : currentPage() + get(halfVisiblePages) * 2, visiblePages()), totalPages()));
  const firstPage = user_derived(() => Math.max(1, get(lastPage) - visiblePages() + 1));
  const pageNumbers = user_derived(() => paginationRange(get(firstPage), get(lastPage)));
  function goToNextPage() {
    $$props.onPageChange(Math.min(currentPage() + 1, totalPages()));
  }
  function goToPreviousPage() {
    $$props.onPageChange(Math.max(currentPage() - 1, 1));
  }
  const $$d = user_derived(() => paginationnav({ layout: layout2() })), base = user_derived(() => {
    let {
      base: $$1,
      tableDiv: $$2,
      tableSpan: $$3,
      prevItem: $$4,
      nextItem: $$5
    } = get($$d);
    return $$1;
  }), tableDiv = user_derived(() => {
    let {
      base: $$1,
      tableDiv: $$2,
      tableSpan: $$3,
      prevItem: $$4,
      nextItem: $$5
    } = get($$d);
    return $$2;
  }), tableSpan = user_derived(() => {
    let {
      base: $$1,
      tableDiv: $$2,
      tableSpan: $$3,
      prevItem: $$4,
      nextItem: $$5
    } = get($$d);
    return $$3;
  }), prevItem = user_derived(() => {
    let {
      base: $$1,
      tableDiv: $$2,
      tableSpan: $$3,
      prevItem: $$4,
      nextItem: $$5
    } = get($$d);
    return $$4;
  }), nextItem = user_derived(() => {
    let {
      base: $$1,
      tableDiv: $$2,
      tableSpan: $$3,
      prevItem: $$4,
      nextItem: $$5
    } = get($$d);
    return $$5;
  });
  var nav = root47();
  let attributes;
  var node = child(nav);
  {
    var consequent = ($$anchor2) => {
      var div = root_127();
      var span2 = sibling(child(div));
      var text2 = child(span2, true);
      reset(span2);
      var span_1 = sibling(span2, 2);
      var text_1 = child(span_1, true);
      reset(span_1);
      next();
      reset(div);
      template_effect(
        ($0, $1, $2) => {
          set_class(div, 1, $0);
          set_class(span2, 1, $1);
          set_text(text2, currentPage());
          set_class(span_1, 1, $2);
          set_text(text_1, totalPages());
        },
        [
          () => clsx2(get(tableDiv)({ class: $$props.tableDivClass })),
          () => clsx2(get(tableSpan)({ class: $$props.spanClass })),
          () => clsx2(get(tableSpan)({ class: $$props.spanClass }))
        ]
      );
      append($$anchor2, div);
    };
    if_block(node, ($$render) => {
      if (strict_equals(layout2(), "table")) $$render(consequent);
    });
  }
  var ul = sibling(node, 2);
  var li = child(ul);
  let attributes_1;
  var node_1 = child(li);
  const expression = user_derived(() => strict_equals(currentPage(), 1));
  const expression_1 = user_derived(() => get(prevItem)({ class: $$props.prevClass }));
  PaginationButton_default(node_1, {
    onclick: goToPreviousPage,
    get disabled() {
      return get(expression);
    },
    get class() {
      return get(expression_1);
    },
    children: wrap_snippet(PaginationNav, ($$anchor2, $$slotProps) => {
      var fragment = comment();
      var node_2 = first_child(fragment);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_3 = first_child(fragment_1);
          snippet(node_3, () => $$props.prevContent);
          append($$anchor3, fragment_1);
        };
        var alternate = ($$anchor3) => {
          var text_2 = text();
          template_effect(() => set_text(text_2, previousLabel()));
          append($$anchor3, text_2);
        };
        if_block(node_2, ($$render) => {
          if ($$props.prevContent) $$render(consequent_1);
          else $$render(alternate, false);
        });
      }
      append($$anchor2, fragment);
    }),
    $$slots: { default: true }
  });
  reset(li);
  var node_4 = sibling(li, 2);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment_3 = comment();
      var node_5 = first_child(fragment_3);
      each(node_5, 17, () => get(pageNumbers), index, ($$anchor3, page) => {
        var li_1 = root_66();
        var node_6 = child(li_1);
        const expression_2 = user_derived(() => strict_equals(get(page), currentPage()));
        PaginationButton_default(node_6, {
          get active() {
            return get(expression_2);
          },
          onclick: () => $$props.onPageChange(get(page)),
          children: wrap_snippet(PaginationNav, ($$anchor4, $$slotProps) => {
            next();
            var text_3 = text();
            template_effect(() => set_text(text_3, get(page)));
            append($$anchor4, text_3);
          }),
          $$slots: { default: true }
        });
        reset(li_1);
        template_effect(() => set_attribute(li_1, "aria-current", strict_equals(get(page), currentPage()) ? "page" : void 0));
        append($$anchor3, li_1);
      });
      append($$anchor2, fragment_3);
    };
    if_block(node_4, ($$render) => {
      if (strict_equals(layout2(), "pagination") && get(pageNumbers).length > 0) $$render(consequent_2);
    });
  }
  var li_2 = sibling(node_4, 2);
  let attributes_2;
  var node_7 = child(li_2);
  const expression_3 = user_derived(() => strict_equals(currentPage(), totalPages()));
  const expression_4 = user_derived(() => get(nextItem)({ class: $$props.nextClass }));
  PaginationButton_default(node_7, {
    onclick: goToNextPage,
    get disabled() {
      return get(expression_3);
    },
    get class() {
      return get(expression_4);
    },
    children: wrap_snippet(PaginationNav, ($$anchor2, $$slotProps) => {
      var fragment_5 = comment();
      var node_8 = first_child(fragment_5);
      {
        var consequent_3 = ($$anchor3) => {
          var fragment_6 = comment();
          var node_9 = first_child(fragment_6);
          snippet(node_9, () => $$props.nextContent);
          append($$anchor3, fragment_6);
        };
        var alternate_1 = ($$anchor3) => {
          var text_4 = text();
          template_effect(() => set_text(text_4, nextLabel()));
          append($$anchor3, text_4);
        };
        if_block(node_8, ($$render) => {
          if ($$props.nextContent) $$render(consequent_3);
          else $$render(alternate_1, false);
        });
      }
      append($$anchor2, fragment_5);
    }),
    $$slots: { default: true }
  });
  reset(li_2);
  reset(ul);
  reset(nav);
  template_effect(
    ($0) => {
      attributes = set_attributes(nav, attributes, { "aria-label": ariaLabel(), ...restProps });
      set_class(ul, 1, $0);
      attributes_1 = set_attributes(li, attributes_1, { ...restProps });
      attributes_2 = set_attributes(li_2, attributes_2, { ...restProps });
    },
    [
      () => clsx2(get(base)({ class: $$props.class }))
    ]
  );
  append($$anchor, nav);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PaginationNav = hmr(PaginationNav, () => PaginationNav[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PaginationNav[HMR].source;
    set(PaginationNav[HMR].source, module.default[HMR].original);
  });
}
var PaginationNav_default = PaginationNav;

// node_modules/flowbite-svelte/dist/pagination/PaginationButton.svelte
PaginationButton[FILENAME] = "node_modules/flowbite-svelte/dist/pagination/PaginationButton.svelte";
var root_128 = add_locations(from_html(`<a><!></a>`), PaginationButton[FILENAME], [[33, 2]]);
var root_316 = add_locations(from_html(`<button><!></button>`), PaginationButton[FILENAME], [[39, 2]]);
function PaginationButton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, PaginationButton);
  let disabled = prop($$props, "disabled", 3, false), active = prop($$props, "active", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "size",
      "onclick",
      "disabled",
      "class",
      "href",
      "active"
    ],
    "restProps"
  );
  const group2 = getContext("group");
  const table2 = getContext("table");
  const paginationClass = user_derived(() => paginationbutton({
    size: getContext("size") ?? $$props.size,
    active: active(),
    group: group2,
    table: table2,
    disabled: disabled(),
    class: clsx_default($$props.class)
  }));
  function handleClick(e) {
    if (disabled()) {
      e.preventDefault();
      return;
    }
    if ($$props.onclick) $$props.onclick();
  }
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var a = root_128();
      let attributes;
      var node_1 = child(a);
      {
        var consequent = ($$anchor3) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          snippet(node_2, () => $$props.children);
          append($$anchor3, fragment_1);
        };
        if_block(node_1, ($$render) => {
          if ($$props.children) $$render(consequent);
        });
      }
      reset(a);
      template_effect(() => attributes = set_attributes(a, attributes, {
        href: $$props.href,
        ...restProps,
        class: get(paginationClass),
        onclick: handleClick
      }));
      append($$anchor2, a);
    };
    var alternate = ($$anchor2) => {
      var button2 = root_316();
      let attributes_1;
      var node_3 = child(button2);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_4 = first_child(fragment_2);
          snippet(node_4, () => $$props.children);
          append($$anchor3, fragment_2);
        };
        if_block(node_3, ($$render) => {
          if ($$props.children) $$render(consequent_2);
        });
      }
      reset(button2);
      template_effect(() => attributes_1 = set_attributes(button2, attributes_1, {
        ...restProps,
        disabled: disabled(),
        class: get(paginationClass),
        onclick: handleClick
      }));
      append($$anchor2, button2);
    };
    if_block(node, ($$render) => {
      if ($$props.href) $$render(consequent_1);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PaginationButton = hmr(PaginationButton, () => PaginationButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PaginationButton[HMR].source;
    set(PaginationButton[HMR].source, module.default[HMR].original);
  });
}
var PaginationButton_default = PaginationButton;

// node_modules/flowbite-svelte/dist/pagination/Pagination.svelte
Pagination[FILENAME] = "node_modules/flowbite-svelte/dist/pagination/Pagination.svelte";
var root_129 = add_locations(from_html(`<li><!></li>`), Pagination[FILENAME], [[18, 6]]);
var root_58 = add_locations(from_html(`<li><!></li>`), Pagination[FILENAME], [[29, 6]]);
var root_74 = add_locations(from_html(`<li><!></li>`), Pagination[FILENAME], [[36, 6]]);
var root48 = add_locations(from_html(`<nav><ul><!> <!> <!></ul></nav>`), Pagination[FILENAME], [[15, 0, [[16, 2]]]]);
function Pagination($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Pagination);
  let pages = prop($$props, "pages", 19, () => []), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "pages",
      "previous",
      "next",
      "prevContent",
      "nextContent",
      "table",
      "size",
      "ariaLabel"
    ],
    "restProps"
  );
  setContext("group", true);
  setContext("table", $$props.table);
  setContext("size", $$props.size);
  const paginationClass = user_derived(() => pagination({ table: $$props.table, size: $$props.size }));
  var nav = root48();
  var ul = child(nav);
  var node = child(ul);
  {
    var consequent_1 = ($$anchor2) => {
      var li = root_129();
      let attributes;
      var node_1 = child(li);
      const expression = user_derived(() => $$props.table ? "rounded-none rounded-l" : "rounded-none  rounded-s-lg");
      PaginationItem_default(node_1, {
        get size() {
          return $$props.size;
        },
        onclick: () => $$props.previous(),
        get class() {
          return get(expression);
        },
        children: wrap_snippet(Pagination, ($$anchor3, $$slotProps) => {
          var fragment = comment();
          var node_2 = first_child(fragment);
          {
            var consequent = ($$anchor4) => {
              var fragment_1 = comment();
              var node_3 = first_child(fragment_1);
              snippet(node_3, () => $$props.prevContent);
              append($$anchor4, fragment_1);
            };
            var alternate = ($$anchor4) => {
              var text2 = text("Previous");
              append($$anchor4, text2);
            };
            if_block(node_2, ($$render) => {
              if ($$props.prevContent) $$render(consequent);
              else $$render(alternate, false);
            });
          }
          append($$anchor3, fragment);
        }),
        $$slots: { default: true }
      });
      reset(li);
      template_effect(() => attributes = set_attributes(li, attributes, { ...restProps }));
      append($$anchor2, li);
    };
    if_block(node, ($$render) => {
      if (strict_equals(typeof $$props.previous, "function")) $$render(consequent_1);
    });
  }
  var node_4 = sibling(node, 2);
  each(node_4, 17, pages, index, ($$anchor2, $$item, $$index, $$array) => {
    let name = () => get($$item).name;
    name();
    let href = () => get($$item).href;
    href();
    let active = () => get($$item).active;
    active();
    let size = () => get($$item).size;
    size();
    var li_1 = root_58();
    let attributes_1;
    var node_5 = child(li_1);
    PaginationItem_default(node_5, {
      get size() {
        return size();
      },
      get active() {
        return active();
      },
      get href() {
        return href();
      },
      children: wrap_snippet(Pagination, ($$anchor3, $$slotProps) => {
        next();
        var text_1 = text();
        template_effect(() => set_text(text_1, name()));
        append($$anchor3, text_1);
      }),
      $$slots: { default: true }
    });
    reset(li_1);
    template_effect(() => attributes_1 = set_attributes(li_1, attributes_1, { ...restProps }));
    append($$anchor2, li_1);
  });
  var node_6 = sibling(node_4, 2);
  {
    var consequent_3 = ($$anchor2) => {
      var li_2 = root_74();
      let attributes_2;
      var node_7 = child(li_2);
      const expression_1 = user_derived(() => $$props.table ? "rounded-none rounded-r" : "rounded-none rounded-e-lg");
      PaginationItem_default(node_7, {
        get size() {
          return $$props.size;
        },
        onclick: () => $$props.next(),
        get class() {
          return get(expression_1);
        },
        children: wrap_snippet(Pagination, ($$anchor3, $$slotProps) => {
          var fragment_3 = comment();
          var node_8 = first_child(fragment_3);
          {
            var consequent_2 = ($$anchor4) => {
              var fragment_4 = comment();
              var node_9 = first_child(fragment_4);
              snippet(node_9, () => $$props.nextContent);
              append($$anchor4, fragment_4);
            };
            var alternate_1 = ($$anchor4) => {
              var text_2 = text("Next");
              append($$anchor4, text_2);
            };
            if_block(node_8, ($$render) => {
              if ($$props.nextContent) $$render(consequent_2);
              else $$render(alternate_1, false);
            });
          }
          append($$anchor3, fragment_3);
        }),
        $$slots: { default: true }
      });
      reset(li_2);
      template_effect(() => attributes_2 = set_attributes(li_2, attributes_2, { ...restProps }));
      append($$anchor2, li_2);
    };
    if_block(node_6, ($$render) => {
      if (strict_equals(typeof $$props.next, "function")) $$render(consequent_3);
    });
  }
  reset(ul);
  reset(nav);
  template_effect(() => {
    set_attribute(nav, "aria-label", $$props.ariaLabel);
    set_class(ul, 1, clsx2(get(paginationClass)));
  });
  append($$anchor, nav);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pagination = hmr(Pagination, () => Pagination[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pagination[HMR].source;
    set(Pagination[HMR].source, module.default[HMR].original);
  });
}
var Pagination_default = Pagination;

// node_modules/flowbite-svelte/dist/pagination/PaginationItem.svelte
PaginationItem[FILENAME] = "node_modules/flowbite-svelte/dist/pagination/PaginationItem.svelte";
var root_130 = add_locations(from_html(`<a><!></a>`), PaginationItem[FILENAME], [[15, 2]]);
var root_317 = add_locations(from_html(`<button><!></button>`), PaginationItem[FILENAME], [[21, 2]]);
function PaginationItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, PaginationItem);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "size",
      "class",
      "href",
      "active"
    ],
    "restProps"
  );
  const group2 = getContext("group");
  const table2 = getContext("table");
  const paginationClass = user_derived(() => paginationItem({
    size: getContext("size") ?? $$props.size,
    active: $$props.active,
    group: group2,
    table: table2,
    class: clsx_default($$props.class)
  }));
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var a = root_130();
      let attributes;
      var node_1 = child(a);
      {
        var consequent = ($$anchor3) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          snippet(node_2, () => $$props.children);
          append($$anchor3, fragment_1);
        };
        if_block(node_1, ($$render) => {
          if ($$props.children) $$render(consequent);
        });
      }
      reset(a);
      template_effect(() => attributes = set_attributes(a, attributes, {
        href: $$props.href,
        ...restProps,
        class: get(paginationClass)
      }));
      append($$anchor2, a);
    };
    var alternate = ($$anchor2) => {
      var button2 = root_317();
      let attributes_1;
      var node_3 = child(button2);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_4 = first_child(fragment_2);
          snippet(node_4, () => $$props.children);
          append($$anchor3, fragment_2);
        };
        if_block(node_3, ($$render) => {
          if ($$props.children) $$render(consequent_2);
        });
      }
      reset(button2);
      template_effect(() => attributes_1 = set_attributes(button2, attributes_1, {
        ...restProps,
        class: get(paginationClass)
      }));
      append($$anchor2, button2);
    };
    if_block(node, ($$render) => {
      if ($$props.href) $$render(consequent_1);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PaginationItem = hmr(PaginationItem, () => PaginationItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PaginationItem[HMR].source;
    set(PaginationItem[HMR].source, module.default[HMR].original);
  });
}
var PaginationItem_default = PaginationItem;

// node_modules/flowbite-svelte/dist/popover/theme.js
var popover = ce({
  slots: {
    base: "rounded-lg shadow-md bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400 border border-gray-200 dark:border-gray-700 divide-gray-200 dark:divide-gray-700",
    content: "p-2",
    title: "py-2 px-3 rounded-t-md border-b ",
    h3: "font-semibold",
    arrowBase: "absolute pointer-events-none block w-[10px] h-[10px] rotate-45 bg-inherit border-inherit shadow-md"
  },
  variants: {
    color: {
      default: {
        title: "bg-gray-100 border-gray-200 dark:border-gray-600 dark:bg-gray-700",
        h3: "text-gray-900 dark:text-white"
      },
      primary: {
        title: "bg-primary-700",
        h3: "text-white"
      },
      secondary: {
        title: "bg-secondary-700",
        h3: "text-white"
      },
      gray: {
        title: "bg-gray-700",
        h3: "text-white"
      },
      red: {
        title: "bg-red-700",
        h3: "text-white"
      },
      orange: {
        title: "bg-orange-700",
        h3: "text-white"
      },
      amber: {
        title: "bg-amber-700",
        h3: "text-white"
      },
      yellow: {
        title: "bg-yellow-500",
        h3: "text-gray-800"
      },
      lime: {
        title: "bg-lime-700",
        h3: "text-white"
      },
      green: {
        title: "bg-green-700",
        h3: "text-white"
      },
      emerald: {
        title: "bg-emerald-700",
        h3: "text-white"
      },
      teal: {
        title: "bg-teal-700",
        h3: "text-white"
      },
      cyan: {
        title: "bg-cyan-700",
        h3: "text-white"
      },
      sky: {
        title: "bg-sky-700",
        h3: "text-white"
      },
      blue: {
        title: "bg-blue-700",
        h3: "text-white"
      },
      indigo: {
        title: "bg-indigo-700",
        h3: "text-white"
      },
      violet: {
        title: "bg-violet-700",
        h3: "text-white"
      },
      purple: {
        title: "bg-purple-700",
        h3: "text-white"
      },
      fuchsia: {
        title: "bg-fuchsia-700",
        h3: "text-white"
      },
      pink: {
        title: "bg-pink-700",
        h3: "text-white"
      },
      rose: {
        title: "bg-rose-700",
        h3: "text-white"
      }
    }
  }
});

// node_modules/flowbite-svelte/dist/popover/Popover.svelte
Popover[FILENAME] = "node_modules/flowbite-svelte/dist/popover/Popover.svelte";
var root_218 = add_locations(from_html(`<div><h3> </h3></div>`), Popover[FILENAME], [[14, 4, [[15, 6]]]]);
var root_131 = add_locations(from_html(`<!> <div><!></div>`, 1), Popover[FILENAME], [[20, 2]]);
function Popover($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Popover);
  var $$ownership_validator = create_ownership_validator($$props);
  let color = prop($$props, "color", 3, "default"), trigger = prop($$props, "trigger", 3, "hover"), arrow2 = prop($$props, "arrow", 3, true), placement = prop($$props, "placement", 3, "top"), isOpen = prop($$props, "isOpen", 15, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "title",
      "color",
      "trigger",
      "defaultClass",
      "arrow",
      "children",
      "placement",
      "class",
      "isOpen"
    ],
    "restProps"
  );
  let $$d = user_derived(() => popover({ color: color() })), base = user_derived(() => {
    let {
      base: $$1,
      title: $$2,
      h3: $$3,
      content: $$4
    } = get($$d);
    return $$1;
  }), title = user_derived(() => {
    let {
      base: $$1,
      title: $$2,
      h3: $$3,
      content: $$4
    } = get($$d);
    return $$2;
  }), h3 = user_derived(() => {
    let {
      base: $$1,
      title: $$2,
      h3: $$3,
      content: $$4
    } = get($$d);
    return $$3;
  }), content = user_derived(() => {
    let {
      base: $$1,
      title: $$2,
      h3: $$3,
      content: $$4
    } = get($$d);
    return $$4;
  });
  var fragment = comment();
  var node = first_child(fragment);
  const expression = user_derived(() => get(base)({ class: clsx_default($$props.class) }));
  {
    $$ownership_validator.binding("isOpen", Popper_default, isOpen);
    Popper_default(node, spread_props(() => restProps, {
      get placement() {
        return placement();
      },
      get trigger() {
        return trigger();
      },
      get arrow() {
        return arrow2();
      },
      get class() {
        return get(expression);
      },
      get isOpen() {
        return isOpen();
      },
      set isOpen($$value) {
        isOpen($$value);
      },
      children: wrap_snippet(Popover, ($$anchor2, $$slotProps) => {
        var fragment_1 = root_131();
        var node_1 = first_child(fragment_1);
        {
          var consequent = ($$anchor3) => {
            var div = root_218();
            var h3_1 = child(div);
            var text2 = child(h3_1, true);
            reset(h3_1);
            reset(div);
            template_effect(
              ($0, $1) => {
                set_class(div, 1, $0);
                set_class(h3_1, 1, $1);
                set_text(text2, $$props.title);
              },
              [
                () => clsx2(get(title)()),
                () => clsx2(get(h3)())
              ]
            );
            append($$anchor3, div);
          };
          var alternate = ($$anchor3, $$elseif) => {
            {
              var consequent_1 = ($$anchor4) => {
                var fragment_2 = comment();
                var node_2 = first_child(fragment_2);
                snippet(node_2, () => $$props.title);
                append($$anchor4, fragment_2);
              };
              if_block(
                $$anchor3,
                ($$render) => {
                  if ($$props.title) $$render(consequent_1);
                },
                $$elseif
              );
            }
          };
          if_block(node_1, ($$render) => {
            if (strict_equals(typeof $$props.title, "string")) $$render(consequent);
            else $$render(alternate, false);
          });
        }
        var div_1 = sibling(node_1, 2);
        var node_3 = child(div_1);
        snippet(node_3, () => $$props.children);
        reset(div_1);
        template_effect(($0) => set_class(div_1, 1, $0), [
          () => clsx2(get(content)({ class: $$props.defaultClass }))
        ]);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    }));
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Popover = hmr(Popover, () => Popover[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Popover[HMR].source;
    set(Popover[HMR].source, module.default[HMR].original);
  });
}
var Popover_default = Popover;

// node_modules/flowbite-svelte/dist/progress/Progressbar.svelte
Progressbar[FILENAME] = "node_modules/flowbite-svelte/dist/progress/Progressbar.svelte";
var root_132 = add_locations(from_html(`<div><span> </span> <span> </span></div>`), Progressbar[FILENAME], [[27, 2, [[28, 4], [29, 4]]]]);
var root_219 = add_locations(from_html(`<div> </div>`), Progressbar[FILENAME], [[34, 4]]);
var root_318 = add_locations(from_html(`<div></div>`), Progressbar[FILENAME], [[38, 4]]);
var root49 = add_locations(from_html(`<!> <div><!></div>`, 1), Progressbar[FILENAME], [[32, 0]]);
function Progressbar($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Progressbar);
  let progress = prop($$props, "progress", 3, "45"), precision = prop($$props, "precision", 3, 0), tweenDuration = prop($$props, "tweenDuration", 3, 400), animate = prop($$props, "animate", 3, false), size = prop($$props, "size", 3, "h-2.5"), labelInside = prop($$props, "labelInside", 3, false), labelOutside = prop($$props, "labelOutside", 3, ""), easing = prop($$props, "easing", 3, cubicOut), color = prop($$props, "color", 3, "primary"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "progress",
      "precision",
      "tweenDuration",
      "animate",
      "size",
      "labelInside",
      "labelOutside",
      "easing",
      "color",
      "labelInsideClass",
      "oustsideSpanClass",
      "oustsideProgressClass",
      "labeloutsidedivClass",
      "divClass"
    ],
    "restProps"
  );
  let _progress = new Tween(0, {
    duration: animate() ? tweenDuration() : 0,
    easing: easing()
  });
  const $$d = user_derived(() => progressbar({
    color: color(),
    labelInside: labelInside()
  })), base = user_derived(() => {
    let {
      base: $$1,
      labelInsideDiv: $$2,
      insideDiv: $$3,
      outsideDiv: $$4,
      oustsideSpan: $$5,
      outsideProgress: $$6
    } = get($$d);
    return $$1;
  }), labelInsideDiv = user_derived(() => {
    let {
      base: $$1,
      labelInsideDiv: $$2,
      insideDiv: $$3,
      outsideDiv: $$4,
      oustsideSpan: $$5,
      outsideProgress: $$6
    } = get($$d);
    return $$2;
  }), insideDiv = user_derived(() => {
    let {
      base: $$1,
      labelInsideDiv: $$2,
      insideDiv: $$3,
      outsideDiv: $$4,
      oustsideSpan: $$5,
      outsideProgress: $$6
    } = get($$d);
    return $$3;
  }), outsideDiv = user_derived(() => {
    let {
      base: $$1,
      labelInsideDiv: $$2,
      insideDiv: $$3,
      outsideDiv: $$4,
      oustsideSpan: $$5,
      outsideProgress: $$6
    } = get($$d);
    return $$4;
  }), oustsideSpan = user_derived(() => {
    let {
      base: $$1,
      labelInsideDiv: $$2,
      insideDiv: $$3,
      outsideDiv: $$4,
      oustsideSpan: $$5,
      outsideProgress: $$6
    } = get($$d);
    return $$5;
  }), outsideProgress = user_derived(() => {
    let {
      base: $$1,
      labelInsideDiv: $$2,
      insideDiv: $$3,
      outsideDiv: $$4,
      oustsideSpan: $$5,
      outsideProgress: $$6
    } = get($$d);
    return $$6;
  });
  user_effect(() => {
    _progress.set(Number(progress()));
  });
  var fragment = root49();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_132();
      let attributes;
      var span2 = child(div);
      var text2 = child(span2, true);
      reset(span2);
      var span_1 = sibling(span2, 2);
      var text_1 = child(span_1);
      reset(span_1);
      reset(div);
      template_effect(
        ($0, $1, $2) => {
          attributes = set_attributes(div, attributes, { ...restProps, class: $0 });
          set_class(span2, 1, $1);
          set_text(text2, labelOutside());
          set_class(span_1, 1, $2);
          set_text(text_1, `${progress() ?? ""}%`);
        },
        [
          () => get(outsideDiv)({ class: $$props.labeloutsidedivClass }),
          () => clsx2(get(oustsideSpan)({ class: $$props.oustsideSpanClass })),
          () => clsx2(get(outsideProgress)({ class: $$props.oustsideProgressClass }))
        ]
      );
      append($$anchor2, div);
    };
    if_block(node, ($$render) => {
      if (labelOutside()) $$render(consequent);
    });
  }
  var div_1 = sibling(node, 2);
  let attributes_1;
  var node_1 = child(div_1);
  {
    var consequent_1 = ($$anchor2) => {
      var div_2 = root_219();
      var text_2 = child(div_2);
      reset(div_2);
      template_effect(
        ($0, $1) => {
          set_class(div_2, 1, $0);
          set_style(div_2, `width: ${_progress.current ?? ""}%`);
          set_text(text_2, `${$1 ?? ""}%`);
        },
        [
          () => clsx2(twMerge(get(labelInsideDiv)({ class: $$props.labelInsideClass }), size())),
          () => _progress.current.toFixed(precision())
        ]
      );
      append($$anchor2, div_2);
    };
    var alternate = ($$anchor2) => {
      var div_3 = root_318();
      template_effect(
        ($0) => {
          set_class(div_3, 1, $0);
          set_style(div_3, `width: ${_progress.current ?? ""}%`);
        },
        [
          () => clsx2(twMerge(get(insideDiv)({ class: $$props.labelInsideClass }), size()))
        ]
      );
      append($$anchor2, div_3);
    };
    if_block(node_1, ($$render) => {
      if (labelInside()) $$render(consequent_1);
      else $$render(alternate, false);
    });
  }
  reset(div_1);
  template_effect(($0) => attributes_1 = set_attributes(div_1, attributes_1, { ...restProps, class: $0 }), [
    () => twMerge(get(base)({ class: $$props.divClass }), size())
  ]);
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Progressbar = hmr(Progressbar, () => Progressbar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Progressbar[HMR].source;
    set(Progressbar[HMR].source, module.default[HMR].original);
  });
}
var Progressbar_default = Progressbar;

// node_modules/flowbite-svelte/dist/progress/theme.js
var progressbar = ce({
  slots: {
    base: "w-full bg-gray-200 rounded-full dark:bg-gray-700",
    labelInsideDiv: "text-primary-100 text-xs font-medium text-center leading-none rounded-full",
    insideDiv: "rounded-full",
    outsideDiv: "mb-1 flex justify-between",
    oustsideSpan: "text-base font-medium text-blue-700 dark:text-white",
    outsideProgress: "text-sm font-medium text-blue-700 dark:text-white"
  },
  variants: {
    color: {
      primary: {
        labelInsideDiv: "bg-primary-600",
        insideDiv: "bg-primary-600"
      },
      secondary: {
        labelInsideDiv: "bg-secondary-600",
        insideDiv: "bg-secondary-600"
      },
      gray: {
        labelInsideDiv: "bg-gray-600 dark:bg-gray-300",
        insideDiv: "bg-gray-600 dark:bg-gray-300"
      },
      red: {
        labelInsideDiv: "bg-red-600 dark:bg-red-500",
        insideDiv: "bg-red-600 dark:bg-red-500"
      },
      orange: {
        labelInsideDiv: "bg-orange-600 dark:bg-orange-500",
        insideDiv: "bg-orange-600 dark:bg-orange-500"
      },
      amber: {
        labelInsideDiv: "bg-amber-600 dark:bg-amber-500",
        insideDiv: "bg-amber-600 dark:bg-amber-500"
      },
      yellow: {
        labelInsideDiv: "bg-yellow-400",
        insideDiv: "bg-yellow-400"
      },
      lime: {
        labelInsideDiv: "bg-lime-600 dark:bg-lime-500",
        insideDiv: "bg-lime-600 dark:bg-lime-500"
      },
      green: {
        labelInsideDiv: "bg-green-600 dark:bg-green-500",
        insideDiv: "bg-green-600 dark:bg-green-500"
      },
      emerald: {
        labelInsideDiv: "bg-emerald-600 dark:bg-emerald-500",
        insideDiv: "bg-emerald-600 dark:bg-emerald-500"
      },
      teal: {
        labelInsideDiv: "bg-teal-600 dark:bg-teal-500",
        insideDiv: "bg-teal-600 dark:bg-teal-500"
      },
      cyan: {
        labelInsideDiv: "bg-cyan-600 dark:bg-cyan-500",
        insideDiv: "bg-cyan-600 dark:bg-cyan-500"
      },
      sky: {
        labelInsideDiv: "bg-sky-600 dark:bg-sky-500",
        insideDiv: "bg-sky-600 dark:bg-sky-500"
      },
      blue: {
        labelInsideDiv: "bg-blue-600",
        insideDiv: "bg-blue-600"
      },
      indigo: {
        labelInsideDiv: "bg-indigo-600 dark:bg-indigo-500",
        insideDiv: "bg-indigo-600 dark:bg-indigo-500"
      },
      violet: {
        labelInsideDiv: "bg-violet-600 dark:bg-violet-500",
        insideDiv: "bg-violet-600 dark:bg-violet-500"
      },
      purple: {
        labelInsideDiv: "bg-purple-600 dark:bg-purple-500",
        insideDiv: "bg-purple-600 dark:bg-purple-500"
      },
      fuchsia: {
        labelInsideDiv: "bg-fuchsia-600 dark:bg-fuchsia-500",
        insideDiv: "bg-fuchsia-600 dark:bg-fuchsia-500"
      },
      pink: {
        labelInsideDiv: "bg-pink-600 dark:bg-pink-500",
        insideDiv: "bg-pink-600 dark:bg-pink-500"
      },
      rose: {
        labelInsideDiv: "bg-rose-600 dark:bg-rose-500",
        insideDiv: "bg-rose-600 dark:bg-rose-500"
      }
    },
    labelInside: {
      true: "",
      false: ""
    }
  },
  compoundVariants: [
    {
      labelInside: true,
      class: {
        base: "text-primary-100 text-xs font-medium text-center leading-none rounded-full",
        labelInsideDiv: "p-0.5"
      }
    },
    {
      labelInside: false,
      class: { base: "rounded-full" }
    }
  ],
  defaultVariants: {
    color: "primary",
    labelInside: false
  }
});
var progressradial = ce({
  slots: {
    base: "relative inline-flex",
    labelInsideDiv: "absolute inset-0 flex items-center justify-center text-sm font-medium",
    circleBackground: "opacity-25",
    circleForeground: "transition-all",
    outsideDiv: "flex flex-col items-center mb-2 text-center",
    outsideSpan: "text-base font-medium",
    outsideProgress: "text-sm font-medium ml-1"
  },
  variants: {
    color: {
      primary: {
        circleBackground: "stroke-primary-600",
        circleForeground: "stroke-primary-600"
      },
      secondary: {
        circleBackground: "stroke-secondary-600",
        circleForeground: "stroke-secondary-600"
      },
      gray: {
        circleBackground: "stroke-gray-600 dark:stroke-gray-300",
        circleForeground: "stroke-gray-600 dark:stroke-gray-300"
      },
      red: {
        circleBackground: "stroke-red-600 dark:stroke-red-500",
        circleForeground: "stroke-red-600 dark:stroke-red-500"
      },
      orange: {
        circleBackground: "stroke-orange-600 dark:stroke-orange-500",
        circleForeground: "stroke-orange-600 dark:stroke-orange-500"
      },
      amber: {
        circleBackground: "stroke-amber-600 dark:stroke-amber-500",
        circleForeground: "stroke-amber-600 dark:stroke-amber-500"
      },
      yellow: {
        circleBackground: "stroke-yellow-400",
        circleForeground: "stroke-yellow-400"
      },
      lime: {
        circleBackground: "stroke-lime-600 dark:stroke-lime-500",
        circleForeground: "stroke-lime-600 dark:stroke-lime-500"
      },
      green: {
        circleBackground: "stroke-green-600 dark:stroke-green-500",
        circleForeground: "stroke-green-600 dark:stroke-green-500"
      },
      emerald: {
        circleBackground: "stroke-emerald-600 dark:stroke-emerald-500",
        circleForeground: "stroke-emerald-600 dark:stroke-emerald-500"
      },
      teal: {
        circleBackground: "stroke-teal-600 dark:stroke-teal-500",
        circleForeground: "stroke-teal-600 dark:stroke-teal-500"
      },
      cyan: {
        circleBackground: "stroke-cyan-600 dark:stroke-cyan-500",
        circleForeground: "stroke-cyan-600 dark:stroke-cyan-500"
      },
      sky: {
        circleBackground: "stroke-sky-600 dark:stroke-sky-500",
        circleForeground: "stroke-sky-600 dark:stroke-sky-500"
      },
      blue: {
        circleBackground: "stroke-blue-600",
        circleForeground: "stroke-blue-600"
      },
      indigo: {
        circleBackground: "stroke-indigo-600 dark:stroke-indigo-500",
        circleForeground: "stroke-indigo-600 dark:stroke-indigo-500"
      },
      violet: {
        circleBackground: "stroke-violet-600 dark:stroke-violet-500",
        circleForeground: "stroke-violet-600 dark:stroke-violet-500"
      },
      purple: {
        circleBackground: "stroke-purple-600 dark:stroke-purple-500",
        circleForeground: "stroke-purple-600 dark:stroke-purple-500"
      },
      fuchsia: {
        circleBackground: "stroke-fuchsia-600 dark:stroke-fuchsia-500",
        circleForeground: "stroke-fuchsia-600 dark:stroke-fuchsia-500"
      },
      pink: {
        circleBackground: "stroke-pink-600 dark:stroke-pink-500",
        circleForeground: "stroke-pink-600 dark:stroke-pink-500"
      },
      rose: {
        circleBackground: "stroke-rose-600 dark:stroke-rose-500",
        circleForeground: "stroke-rose-600 dark:stroke-rose-500"
      }
    },
    labelInside: {
      true: {}
    }
  }
});

// node_modules/flowbite-svelte/dist/progress/Progressradial.svelte
Progressradial[FILENAME] = "node_modules/flowbite-svelte/dist/progress/Progressradial.svelte";
var root_133 = add_locations(from_html(`<div><span> </span> <span> </span></div>`), Progressradial[FILENAME], [[38, 4, [[39, 6], [40, 6]]]]);
var root_220 = add_locations(from_html(`<div> </div>`), Progressradial[FILENAME], [[54, 6]]);
var root50 = add_locations(from_html(`<div class="flex flex-col items-center"><!> <div><svg viewBox="0 0 100 100" class="h-full w-full"><circle cx="50" cy="50" fill="none"></circle><circle cx="50" cy="50" fill="none" stroke-linecap="round"></circle></svg> <!></div></div>`), Progressradial[FILENAME], [
  [
    36,
    0,
    [
      [
        44,
        2,
        [[45, 4, [[47, 6], [50, 6]]]]
      ]
    ]
  ]
]);
function Progressradial($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Progressradial);
  let progress = prop($$props, "progress", 3, 45), radius = prop($$props, "radius", 3, 42), startingPosition = prop($$props, "startingPosition", 3, "top"), precision = prop($$props, "precision", 3, 0), tweenDuration = prop($$props, "tweenDuration", 3, 400), animate = prop($$props, "animate", 3, false), size = prop($$props, "size", 3, "h-24 w-24"), thickness = prop($$props, "thickness", 3, 4), labelInside = prop($$props, "labelInside", 3, false), labelOutside = prop($$props, "labelOutside", 3, ""), easing = prop($$props, "easing", 3, cubicOut), color = prop($$props, "color", 3, "primary"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "progress",
      "radius",
      "startingPosition",
      "precision",
      "tweenDuration",
      "animate",
      "size",
      "thickness",
      "labelInside",
      "labelOutside",
      "easing",
      "color",
      "labelInsideClass",
      "outsideSpanClass",
      "outsideProgressClass",
      "labelOutsideDivClass",
      "divClass"
    ],
    "restProps"
  );
  const _progress = new Tween(0, {
    duration: animate() ? tweenDuration() : 0,
    easing: easing()
  });
  const $$d = user_derived(() => progressradial({
    color: color(),
    labelInside: labelInside()
  })), base = user_derived(() => {
    let {
      base: $$1,
      labelInsideDiv: $$2,
      circleBackground: $$3,
      circleForeground: $$4,
      outsideDiv: $$5,
      outsideSpan: $$6,
      outsideProgress: $$7
    } = get($$d);
    return $$1;
  }), labelInsideDiv = user_derived(() => {
    let {
      base: $$1,
      labelInsideDiv: $$2,
      circleBackground: $$3,
      circleForeground: $$4,
      outsideDiv: $$5,
      outsideSpan: $$6,
      outsideProgress: $$7
    } = get($$d);
    return $$2;
  }), circleBackground = user_derived(() => {
    let {
      base: $$1,
      labelInsideDiv: $$2,
      circleBackground: $$3,
      circleForeground: $$4,
      outsideDiv: $$5,
      outsideSpan: $$6,
      outsideProgress: $$7
    } = get($$d);
    return $$3;
  }), circleForeground = user_derived(() => {
    let {
      base: $$1,
      labelInsideDiv: $$2,
      circleBackground: $$3,
      circleForeground: $$4,
      outsideDiv: $$5,
      outsideSpan: $$6,
      outsideProgress: $$7
    } = get($$d);
    return $$4;
  }), outsideDiv = user_derived(() => {
    let {
      base: $$1,
      labelInsideDiv: $$2,
      circleBackground: $$3,
      circleForeground: $$4,
      outsideDiv: $$5,
      outsideSpan: $$6,
      outsideProgress: $$7
    } = get($$d);
    return $$5;
  }), outsideSpan = user_derived(() => {
    let {
      base: $$1,
      labelInsideDiv: $$2,
      circleBackground: $$3,
      circleForeground: $$4,
      outsideDiv: $$5,
      outsideSpan: $$6,
      outsideProgress: $$7
    } = get($$d);
    return $$6;
  }), outsideProgress = user_derived(() => {
    let {
      base: $$1,
      labelInsideDiv: $$2,
      circleBackground: $$3,
      circleForeground: $$4,
      outsideDiv: $$5,
      outsideSpan: $$6,
      outsideProgress: $$7
    } = get($$d);
    return $$7;
  });
  user_effect(() => {
    _progress.set(Number(progress()));
  });
  let circumference = 2 * Math.PI * radius();
  let strokeDashoffset = user_derived(() => circumference - _progress.current / 100 * circumference);
  let rotationAngle = user_derived(() => strict_equals(startingPosition(), "top") ? -90 : strict_equals(startingPosition(), "right") ? 0 : strict_equals(startingPosition(), "bottom") ? 90 : strict_equals(startingPosition(), "left") ? 180 : -90);
  let formattedProgress = user_derived(() => _progress.current.toFixed(precision()));
  var div = root50();
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var div_1 = root_133();
      var span2 = child(div_1);
      var text2 = child(span2, true);
      reset(span2);
      var span_1 = sibling(span2, 2);
      var text_1 = child(span_1);
      reset(span_1);
      reset(div_1);
      template_effect(
        ($0, $1, $2) => {
          set_class(div_1, 1, $0);
          set_class(span2, 1, $1);
          set_text(text2, labelOutside());
          set_class(span_1, 1, $2);
          set_text(text_1, `${get(formattedProgress) ?? ""}%`);
        },
        [
          () => clsx2(get(outsideDiv)({ class: $$props.labelOutsideDivClass })),
          () => clsx2(get(outsideSpan)({ class: $$props.outsideSpanClass })),
          () => clsx2(get(outsideProgress)({ class: $$props.outsideProgressClass }))
        ]
      );
      append($$anchor2, div_1);
    };
    if_block(node, ($$render) => {
      if (labelOutside()) $$render(consequent);
    });
  }
  var div_2 = sibling(node, 2);
  let attributes;
  var svg = child(div_2);
  var circle = child(svg);
  var circle_1 = sibling(circle);
  set_attribute(circle_1, "stroke-dasharray", circumference);
  reset(svg);
  var node_1 = sibling(svg, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var div_3 = root_220();
      var text_2 = child(div_3);
      reset(div_3);
      template_effect(
        ($0) => {
          set_class(div_3, 1, $0);
          set_text(text_2, `${get(formattedProgress) ?? ""}%`);
        },
        [
          () => clsx2(get(labelInsideDiv)())
        ]
      );
      append($$anchor2, div_3);
    };
    if_block(node_1, ($$render) => {
      if (labelInside()) $$render(consequent_1);
    });
  }
  reset(div_2);
  reset(div);
  template_effect(
    ($0, $1, $2) => {
      attributes = set_attributes(div_2, attributes, { ...restProps, class: $0 });
      set_style(svg, `transform: rotate(${get(rotationAngle) ?? ""}deg)`);
      set_attribute(circle, "r", radius());
      set_class(circle, 0, $1);
      set_attribute(circle, "stroke-width", thickness());
      set_attribute(circle_1, "r", radius());
      set_class(circle_1, 0, $2);
      set_attribute(circle_1, "stroke-width", thickness());
      set_attribute(circle_1, "stroke-dashoffset", get(strokeDashoffset));
    },
    [
      () => twMerge(get(base)({ class: $$props.divClass }), size()),
      () => clsx2(get(circleBackground)()),
      () => clsx2(get(circleForeground)())
    ]
  );
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Progressradial = hmr(Progressradial, () => Progressradial[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Progressradial[HMR].source;
    set(Progressradial[HMR].source, module.default[HMR].original);
  });
}
var Progressradial_default = Progressradial;

// node_modules/flowbite-svelte/dist/rating/AdvancedRating.svelte
AdvancedRating[FILENAME] = "node_modules/flowbite-svelte/dist/rating/AdvancedRating.svelte";
var root_319 = add_locations(from_html(`<div><span> </span> <div><div></div></div> <span> </span></div>`), AdvancedRating[FILENAME], [
  [
    17,
    2,
    [
      [18, 4],
      [19, 4, [[20, 6]]],
      [22, 4]
    ]
  ]
]);
var root51 = add_locations(from_html(`<!> <!> <!>`, 1), AdvancedRating[FILENAME], []);
function AdvancedRating($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, AdvancedRating);
  const $$d = user_derived(advancedrating), base = user_derived(() => {
    let {
      base: $$1,
      span: $$2,
      div2: $$3,
      div3: $$4,
      span2: $$5
    } = get($$d);
    return $$1;
  }), span2 = user_derived(() => {
    let {
      base: $$1,
      span: $$2,
      div2: $$3,
      div3: $$4,
      span2: $$5
    } = get($$d);
    return $$2;
  }), div2 = user_derived(() => {
    let {
      base: $$1,
      span: $$2,
      div2: $$3,
      div3: $$4,
      span2: $$5
    } = get($$d);
    return $$3;
  }), div3 = user_derived(() => {
    let {
      base: $$1,
      span: $$2,
      div2: $$3,
      div3: $$4,
      span2: $$5
    } = get($$d);
    return $$4;
  }), span22 = user_derived(() => {
    let {
      base: $$1,
      span: $$2,
      div2: $$3,
      div3: $$4,
      span2: $$5
    } = get($$d);
    return $$5;
  });
  var fragment = root51();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      snippet(node_1, () => $$props.rating);
      append($$anchor2, fragment_1);
    };
    if_block(node, ($$render) => {
      if ($$props.rating) $$render(consequent);
    });
  }
  var node_2 = sibling(node, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_2 = comment();
      var node_3 = first_child(fragment_2);
      snippet(node_3, () => $$props.globalText);
      append($$anchor2, fragment_2);
    };
    if_block(node_2, ($$render) => {
      if ($$props.globalText) $$render(consequent_1);
    });
  }
  var node_4 = sibling(node_2, 2);
  each(node_4, 17, () => $$props.ratings, index, ($$anchor2, $$item, $$index, $$array) => {
    let label2 = () => get($$item).label;
    label2();
    let rating2 = () => get($$item).rating;
    rating2();
    var div = root_319();
    var span_1 = child(div);
    var text2 = child(span_1, true);
    reset(span_1);
    var div_1 = sibling(span_1, 2);
    var div_2 = child(div_1);
    reset(div_1);
    var span_2 = sibling(div_1, 2);
    var text_1 = child(span_2);
    reset(span_2);
    reset(div);
    template_effect(
      ($0, $1, $2, $3, $4) => {
        set_class(div, 1, $0);
        set_class(span_1, 1, $1);
        set_text(text2, label2());
        set_class(div_1, 1, $2);
        set_class(div_2, 1, $3);
        set_style(div_2, `width: ${rating2() ?? ""}%`);
        set_class(span_2, 1, $4);
        set_text(text_1, `${rating2() ?? ""}${$$props.unit ?? ""}`);
      },
      [
        () => clsx2(get(base)({ class: $$props.divClass })),
        () => clsx2(get(span2)({ class: $$props.spanClass })),
        () => clsx2(get(div2)({ class: $$props.div2Class })),
        () => clsx2(get(div3)({ class: $$props.div3Class })),
        () => clsx2(get(span22)({ class: $$props.span2Class }))
      ]
    );
    append($$anchor2, div);
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AdvancedRating = hmr(AdvancedRating, () => AdvancedRating[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AdvancedRating[HMR].source;
    set(AdvancedRating[HMR].source, module.default[HMR].original);
  });
}
var AdvancedRating_default = AdvancedRating;

// node_modules/flowbite-svelte/dist/rating/Heart.svelte
Heart[FILENAME] = "node_modules/flowbite-svelte/dist/rating/Heart.svelte";
var root_134 = add_locations(from_svg(`<stop offset="0%"></stop><stop></stop><stop stop-color="transparent"></stop><stop offset="100%" stop-color="transparent"></stop>`, 1), Heart[FILENAME], [
  [13, 8],
  [14, 8],
  [15, 8],
  [16, 8]
]);
var root_221 = add_locations(from_svg(`<stop offset="0%"></stop><stop offset="100%"></stop>`, 1), Heart[FILENAME], [[18, 8], [19, 8]]);
var root52 = add_locations(from_svg(`<svg><defs><linearGradient><!></linearGradient></defs><path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"></path></svg>`), Heart[FILENAME], [
  [
    9,
    0,
    [[10, 2, [[11, 4]]], [23, 2]]
  ]
]);
function Heart($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Heart);
  let fillPercent = prop($$props, "fillPercent", 3, 100), fillColor = prop($$props, "fillColor", 3, "#ff0000"), strokeColor = prop($$props, "strokeColor", 3, "#ff0000"), size = prop($$props, "size", 3, 24), ariaLabel = prop($$props, "ariaLabel", 3, "star"), iconIndex = prop($$props, "iconIndex", 3, 0), groupId = prop($$props, "groupId", 3, "star"), role = prop($$props, "role", 3, "img"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "fillPercent",
      "fillColor",
      "strokeColor",
      "size",
      "ariaLabel",
      "iconIndex",
      "groupId",
      "role",
      "svgClass"
    ],
    "restProps"
  );
  const uniqueId = `${groupId()}-${iconIndex()}`;
  var svg = root52();
  let attributes;
  var defs = child(svg);
  var linearGradient = child(defs);
  set_attribute(linearGradient, "id", uniqueId);
  var node = child(linearGradient);
  {
    var consequent = ($$anchor2) => {
      var fragment = root_134();
      var stop = first_child(fragment);
      var stop_1 = sibling(stop);
      var stop_2 = sibling(stop_1);
      next();
      template_effect(() => {
        set_attribute(stop, "stop-color", fillColor());
        set_attribute(stop_1, "offset", `${fillPercent() ?? ""}%`);
        set_attribute(stop_1, "stop-color", fillColor());
        set_attribute(stop_2, "offset", `${fillPercent() ?? ""}%`);
      });
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = root_221();
      var stop_3 = first_child(fragment_1);
      var stop_4 = sibling(stop_3);
      template_effect(() => {
        set_attribute(stop_3, "stop-color", fillColor());
        set_attribute(stop_4, "stop-color", fillColor());
      });
      append($$anchor2, fragment_1);
    };
    if_block(node, ($$render) => {
      if (strict_equals(fillPercent(), 100, false)) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  reset(linearGradient);
  reset(defs);
  var path = sibling(defs);
  set_attribute(path, "fill", `url(#${uniqueId})`);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(svg, attributes, {
      width: size(),
      height: size(),
      class: $$props.svgClass,
      ...restProps,
      "aria-label": ariaLabel(),
      viewBox: "0 0 24 24",
      role: role(),
      "stroke-width": "1.5",
      stroke: "currentColor",
      fill: "none"
    });
    set_attribute(path, "stroke", strokeColor());
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heart = hmr(Heart, () => Heart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heart[HMR].source;
    set(Heart[HMR].source, module.default[HMR].original);
  });
}
var Heart_default = Heart;

// node_modules/flowbite-svelte/dist/rating/Star.svelte
Star[FILENAME] = "node_modules/flowbite-svelte/dist/rating/Star.svelte";
var root_135 = add_locations(from_svg(`<stop offset="0%"></stop><stop></stop><stop stop-color="transparent"></stop><stop offset="100%" stop-color="transparent"></stop>`, 1), Star[FILENAME], [
  [13, 8],
  [14, 8],
  [15, 8],
  [16, 8]
]);
var root_222 = add_locations(from_svg(`<stop offset="0%"></stop><stop offset="100%"></stop>`, 1), Star[FILENAME], [[18, 8], [19, 8]]);
var root53 = add_locations(
  from_svg(`<svg><defs><linearGradient><!></linearGradient></defs><g stroke-width="2"><polygon points="165.000, 185.000, 188.511, 197.361, 184.021, 171.180, 
      203.042, 152.639, 176.756, 148.820, 165.000, 125.000, 
      153.244, 148.820, 126.958, 152.639, 145.979, 171.180,
      141.489, 197.361, 165.000, 185.000"></polygon></g></svg>`),
  Star[FILENAME],
  [
    [
      9,
      0,
      [
        [10, 2, [[11, 4]]],
        [23, 2, [[24, 4]]]
      ]
    ]
  ]
);
function Star($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Star);
  let fillPercent = prop($$props, "fillPercent", 3, 100), fillColor = prop($$props, "fillColor", 3, "#F5CA14"), strokeColor = prop($$props, "strokeColor", 3, "#F5CA14"), size = prop($$props, "size", 3, 24), ariaLabel = prop($$props, "ariaLabel", 3, "star"), iconIndex = prop($$props, "iconIndex", 3, 0), groupId = prop($$props, "groupId", 3, "star"), role = prop($$props, "role", 3, "img"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "fillPercent",
      "fillColor",
      "strokeColor",
      "size",
      "ariaLabel",
      "iconIndex",
      "groupId",
      "role",
      "svgClass"
    ],
    "restProps"
  );
  const uniqueId = `${groupId()}-${iconIndex()}`;
  var svg = root53();
  let attributes;
  var defs = child(svg);
  var linearGradient = child(defs);
  set_attribute(linearGradient, "id", uniqueId);
  var node = child(linearGradient);
  {
    var consequent = ($$anchor2) => {
      var fragment = root_135();
      var stop = first_child(fragment);
      var stop_1 = sibling(stop);
      var stop_2 = sibling(stop_1);
      next();
      template_effect(() => {
        set_attribute(stop, "stop-color", fillColor());
        set_attribute(stop_1, "offset", `${fillPercent() ?? ""}%`);
        set_attribute(stop_1, "stop-color", fillColor());
        set_attribute(stop_2, "offset", `${fillPercent() ?? ""}%`);
      });
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = root_222();
      var stop_3 = first_child(fragment_1);
      var stop_4 = sibling(stop_3);
      template_effect(() => {
        set_attribute(stop_3, "stop-color", fillColor());
        set_attribute(stop_4, "stop-color", fillColor());
      });
      append($$anchor2, fragment_1);
    };
    if_block(node, ($$render) => {
      if (strict_equals(fillPercent(), 100, false)) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  reset(linearGradient);
  reset(defs);
  var g = sibling(defs);
  set_attribute(g, "fill", `url(#${uniqueId})`);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(svg, attributes, {
      width: size(),
      height: size(),
      ...restProps,
      class: $$props.svgClass,
      "aria-label": ariaLabel(),
      viewBox: "100 100 120 120",
      role: role()
    });
    set_attribute(g, "stroke", strokeColor());
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Star = hmr(Star, () => Star[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Star[HMR].source;
    set(Star[HMR].source, module.default[HMR].original);
  });
}
var Star_default = Star;

// node_modules/flowbite-svelte/dist/rating/Rating.svelte
Rating[FILENAME] = "node_modules/flowbite-svelte/dist/rating/Rating.svelte";
var root_136 = add_locations(from_html(`<!> <p> </p> <!>`, 1), Rating[FILENAME], [[20, 4]]);
var root_223 = add_locations(from_html(`<!> <!> <!> <!>`, 1), Rating[FILENAME], []);
var root54 = add_locations(from_html(`<div><!></div>`), Rating[FILENAME], [[17, 0]]);
function Rating($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Rating);
  let size = prop($$props, "size", 3, 24), total = prop($$props, "total", 3, 5), rating2 = prop($$props, "rating", 3, 4), Icon = prop($$props, "icon", 3, Star_default), count = prop($$props, "count", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "text",
      "class",
      "size",
      "total",
      "rating",
      "icon",
      "count",
      "pClass"
    ],
    "restProps"
  );
  const $$d = user_derived(rating), base = user_derived(() => {
    let { base: $$1, p: $$2 } = get($$d);
    return $$1;
  }), p = user_derived(() => {
    let { base: $$1, p: $$2 } = get($$d);
    return $$2;
  });
  const ratingGroupId = crypto.randomUUID();
  let fullStars = Math.floor(rating2());
  let rateDiffence = rating2() - fullStars;
  let percentRating = Math.round(rateDiffence * 100);
  let grayStars = total() - (fullStars + Math.ceil(rateDiffence));
  var div = root54();
  let attributes;
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var fragment = root_136();
      var node_1 = first_child(fragment);
      component(node_1, Icon, ($$anchor3, $$component) => {
        $$component($$anchor3, {
          fillPercent: 100,
          get size() {
            return size();
          },
          iconIndex: 0,
          groupId: ratingGroupId
        });
      });
      var p_1 = sibling(node_1, 2);
      var text_1 = child(p_1, true);
      reset(p_1);
      var node_2 = sibling(p_1, 2);
      snippet(node_2, () => $$props.children);
      template_effect(
        ($0) => {
          set_class(p_1, 1, $0);
          set_text(text_1, rating2());
        },
        [
          () => clsx2(get(p)({ class: $$props.pClass }))
        ]
      );
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = root_223();
      var node_3 = first_child(fragment_1);
      each(node_3, 17, () => Array(fullStars), index, ($$anchor3, _, index2) => {
        var fragment_2 = comment();
        var node_4 = first_child(fragment_2);
        component(node_4, Icon, ($$anchor4, $$component) => {
          $$component($$anchor4, {
            get size() {
              return size();
            },
            fillPercent: 100,
            iconIndex: index2,
            groupId: `rating-${ratingGroupId}-full`
          });
        });
        append($$anchor3, fragment_2);
      });
      var node_5 = sibling(node_3, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_3 = comment();
          var node_6 = first_child(fragment_3);
          component(node_6, Icon, ($$anchor4, $$component) => {
            $$component($$anchor4, {
              get size() {
                return size();
              },
              fillPercent: percentRating,
              iconIndex: fullStars,
              groupId: `rating-${ratingGroupId}-partial`
            });
          });
          append($$anchor3, fragment_3);
        };
        if_block(node_5, ($$render) => {
          if (percentRating) $$render(consequent_1);
        });
      }
      var node_7 = sibling(node_5, 2);
      each(node_7, 17, () => Array(grayStars), index, ($$anchor3, _, index2) => {
        var fragment_4 = comment();
        var node_8 = first_child(fragment_4);
        component(node_8, Icon, ($$anchor4, $$component) => {
          $$component($$anchor4, {
            get size() {
              return size();
            },
            fillPercent: 0,
            iconIndex: index2,
            groupId: `rating-${ratingGroupId}-empty`
          });
        });
        append($$anchor3, fragment_4);
      });
      var node_9 = sibling(node_7, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_5 = comment();
          var node_10 = first_child(fragment_5);
          snippet(node_10, () => $$props.text);
          append($$anchor3, fragment_5);
        };
        if_block(node_9, ($$render) => {
          if ($$props.text) $$render(consequent_2);
        });
      }
      append($$anchor2, fragment_1);
    };
    if_block(node, ($$render) => {
      if (count() && $$props.children) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  reset(div);
  template_effect(($0) => attributes = set_attributes(div, attributes, { class: $0, ...restProps }), [
    () => get(base)({ class: clsx_default($$props.class) })
  ]);
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rating = hmr(Rating, () => Rating[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rating[HMR].source;
    set(Rating[HMR].source, module.default[HMR].original);
  });
}
var Rating_default = Rating;

// node_modules/flowbite-svelte/dist/rating/RatingComment.svelte
RatingComment[FILENAME] = "node_modules/flowbite-svelte/dist/rating/RatingComment.svelte";
var root_137 = add_locations(from_html(`<p class="ms-2 pt-1 text-sm font-medium text-gray-500 dark:text-gray-400"> </p>`), RatingComment[FILENAME], [[24, 8]]);
var root_224 = add_locations(from_html(`<h3 class="ms-2 text-sm font-semibold text-gray-900 dark:text-white"> </h3>`), RatingComment[FILENAME], [[30, 6]]);
var root_320 = add_locations(from_html(`<footer class="mb-5 text-sm text-gray-500 dark:text-gray-400"><p> </p></footer>`), RatingComment[FILENAME], [[36, 4, [[37, 6]]]]);
var root_84 = add_locations(from_html(`<a class="text-primary-600 dark:text-primary-500 ps-4 text-sm font-medium hover:underline">Report abuse</a>`), RatingComment[FILENAME], [[55, 10]]);
var root_59 = add_locations(from_html(`<div class="mt-3 flex items-center space-x-3 divide-x divide-gray-200 rtl:space-x-reverse rtl:divide-x-reverse dark:divide-gray-600"><!> <!></div>`), RatingComment[FILENAME], [[50, 6]]);
var root55 = add_locations(from_html(`<article><div class="mb-4 flex items-center space-x-4 rtl:space-x-reverse"><img class="h-10 w-10 rounded-full"/> <div class="space-y-1 font-medium dark:text-white"><p> <time datetime="2014-08-16 19:00" class="block text-sm text-gray-500 dark:text-gray-400"> </time></p></div></div> <div class="mb-1 flex items-center"><!> <!></div> <!> <!> <aside><p class="mt-1 text-xs text-gray-500 dark:text-gray-400"><!></p> <!></aside></article>`), RatingComment[FILENAME], [
  [
    9,
    0,
    [
      [
        10,
        2,
        [
          [11, 4],
          [12, 4, [[13, 6, [[15, 8]]]]]
        ]
      ],
      [21, 2],
      [43, 2, [[44, 4]]]
    ]
  ]
]);
function RatingComment($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, RatingComment);
  var article = root55();
  var div = child(article);
  var img2 = child(div);
  var div_1 = sibling(img2, 2);
  var p = child(div_1);
  var text_1 = child(p);
  var time = sibling(text_1);
  var text_2 = child(time, true);
  reset(time);
  reset(p);
  reset(div_1);
  reset(div);
  var div_2 = sibling(div, 2);
  var node = child(div_2);
  {
    const text2 = wrap_snippet(RatingComment, function($$anchor2) {
      validate_snippet_args(...arguments);
      var p_1 = root_137();
      var text_3 = child(p_1);
      reset(p_1);
      template_effect(() => set_text(text_3, `${$$props.comment.rating ?? ""} out of ${$$props.comment.total ?? ""}`));
      append($$anchor2, p_1);
    });
    Rating_default(node, {
      get total() {
        return $$props.comment.total;
      },
      get rating() {
        return $$props.comment.rating;
      },
      text: text2,
      $$slots: { text: true }
    });
  }
  var node_1 = sibling(node, 2);
  {
    var consequent = ($$anchor2) => {
      var h3 = root_224();
      var text_4 = child(h3, true);
      reset(h3);
      template_effect(() => set_text(text_4, $$props.comment.heading));
      append($$anchor2, h3);
    };
    if_block(node_1, ($$render) => {
      if ($$props.comment.heading) $$render(consequent);
    });
  }
  reset(div_2);
  var node_2 = sibling(div_2, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var footer2 = root_320();
      var p_2 = child(footer2);
      var text_5 = child(p_2);
      reset(p_2);
      reset(footer2);
      template_effect(() => set_text(text_5, `Reviewed in ${$$props.comment.address ?? ""} on ${$$props.comment.datetime ?? ""}`));
      append($$anchor2, footer2);
    };
    if_block(node_2, ($$render) => {
      if ($$props.comment.address || $$props.comment.datetime) $$render(consequent_1);
    });
  }
  var node_3 = sibling(node_2, 2);
  snippet(node_3, () => $$props.children);
  var aside = sibling(node_3, 2);
  var p_3 = child(aside);
  var node_4 = child(p_3);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment = comment();
      var node_5 = first_child(fragment);
      snippet(node_5, () => $$props.evaluation);
      append($$anchor2, fragment);
    };
    if_block(node_4, ($$render) => {
      if ($$props.evaluation) $$render(consequent_2);
    });
  }
  reset(p_3);
  var node_6 = sibling(p_3, 2);
  {
    var consequent_5 = ($$anchor2) => {
      var div_3 = root_59();
      var node_7 = child(div_3);
      {
        var consequent_3 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_8 = first_child(fragment_1);
          Button_default(node_8, {
            size: "xs",
            href: "/",
            color: "dark",
            children: wrap_snippet(RatingComment, ($$anchor4, $$slotProps) => {
              next();
              var text_6 = text("Helpful");
              append($$anchor4, text_6);
            }),
            $$slots: { default: true }
          });
          append($$anchor3, fragment_1);
        };
        if_block(node_7, ($$render) => {
          if ($$props.helpfullink) $$render(consequent_3);
        });
      }
      var node_9 = sibling(node_7, 2);
      {
        var consequent_4 = ($$anchor3) => {
          var a = root_84();
          template_effect(() => set_attribute(a, "href", $$props.abuselink));
          append($$anchor3, a);
        };
        if_block(node_9, ($$render) => {
          if ($$props.abuselink) $$render(consequent_4);
        });
      }
      reset(div_3);
      append($$anchor2, div_3);
    };
    if_block(node_6, ($$render) => {
      if ($$props.helpfullink || $$props.abuselink) $$render(consequent_5);
    });
  }
  reset(aside);
  reset(article);
  template_effect(() => {
    set_attribute(img2, "src", $$props.comment.user.img.src);
    set_attribute(img2, "alt", $$props.comment.user.img.alt);
    set_text(text_1, `${$$props.comment.user.name ?? ""} `);
    set_text(text_2, $$props.comment.user.joined);
  });
  append($$anchor, article);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RatingComment = hmr(RatingComment, () => RatingComment[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RatingComment[HMR].source;
    set(RatingComment[HMR].source, module.default[HMR].original);
  });
}
var RatingComment_default = RatingComment;

// node_modules/flowbite-svelte/dist/rating/Review.svelte
Review[FILENAME] = "node_modules/flowbite-svelte/dist/rating/Review.svelte";
var root_321 = add_locations(from_html(`<div><!></div>`), Review[FILENAME], [[20, 14]]);
var root_510 = add_locations(from_html(`<li><!></li>`), Review[FILENAME], [[30, 12]]);
var root_75 = add_locations(from_html(`<li><!></li>`), Review[FILENAME], [[37, 12]]);
var root_94 = add_locations(from_html(`<li><!></li>`), Review[FILENAME], [[44, 12]]);
var root_49 = add_locations(from_html(`<ul><!> <!> <!></ul>`), Review[FILENAME], [[28, 8]]);
var root_11 = add_locations(from_html(`<footer><p class="mb-2 text-sm text-gray-500 dark:text-gray-400"> </p></footer>`), Review[FILENAME], [[58, 12, [[59, 14]]]]);
var root_138 = add_locations(from_html(`<article><div><div><img/> <div><p> </p> <!></div></div> <!></div> <div class="col-span-2 mt-6 md:mt-0"><div class="mb-5 flex items-start"><div class="pe-4"><!> <h4 class="text-xl font-bold text-gray-900 dark:text-white"> </h4></div> <p class="bg-primary-700 inline-flex items-center rounded-sm p-1.5 text-sm font-semibold text-white"> </p></div> <!></div></article>`), Review[FILENAME], [
  [
    12,
    2,
    [
      [
        13,
        4,
        [
          [
            14,
            6,
            [[15, 8], [16, 8, [[17, 10]]]]
          ]
        ]
      ],
      [
        54,
        4,
        [
          [
            55,
            6,
            [[56, 8, [[64, 10]]], [68, 8]]
          ]
        ]
      ]
    ]
  ]
]);
function Review($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Review);
  const $$d = user_derived(review), article = user_derived(() => {
    let {
      article: $$1,
      div: $$2,
      div2: $$3,
      div3: $$4,
      img: $$5,
      ul: $$6,
      li: $$7
    } = get($$d);
    return $$1;
  }), div = user_derived(() => {
    let {
      article: $$1,
      div: $$2,
      div2: $$3,
      div3: $$4,
      img: $$5,
      ul: $$6,
      li: $$7
    } = get($$d);
    return $$2;
  }), div2 = user_derived(() => {
    let {
      article: $$1,
      div: $$2,
      div2: $$3,
      div3: $$4,
      img: $$5,
      ul: $$6,
      li: $$7
    } = get($$d);
    return $$3;
  }), div3 = user_derived(() => {
    let {
      article: $$1,
      div: $$2,
      div2: $$3,
      div3: $$4,
      img: $$5,
      ul: $$6,
      li: $$7
    } = get($$d);
    return $$4;
  }), img2 = user_derived(() => {
    let {
      article: $$1,
      div: $$2,
      div2: $$3,
      div3: $$4,
      img: $$5,
      ul: $$6,
      li: $$7
    } = get($$d);
    return $$5;
  }), ul = user_derived(() => {
    let {
      article: $$1,
      div: $$2,
      div2: $$3,
      div3: $$4,
      img: $$5,
      ul: $$6,
      li: $$7
    } = get($$d);
    return $$6;
  }), li = user_derived(() => {
    let {
      article: $$1,
      div: $$2,
      div2: $$3,
      div3: $$4,
      img: $$5,
      ul: $$6,
      li: $$7
    } = get($$d);
    return $$7;
  });
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_10 = ($$anchor2) => {
      var article_1 = root_138();
      var div_1 = child(article_1);
      var div_2 = child(div_1);
      var img_1 = child(div_2);
      var div_3 = sibling(img_1, 2);
      var p = child(div_3);
      var text2 = child(p, true);
      reset(p);
      var node_1 = sibling(p, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          {
            var consequent = ($$anchor4) => {
              var div_4 = root_321();
              var node_3 = child(div_4);
              snippet(node_3, () => $$props.address);
              reset(div_4);
              template_effect(($0) => set_class(div_4, 1, $0), [
                () => clsx2(get(div3)({ class: $$props.div3Class }))
              ]);
              append($$anchor4, div_4);
            };
            if_block(node_2, ($$render) => {
              if ($$props.address) $$render(consequent);
            });
          }
          append($$anchor3, fragment_1);
        };
        if_block(node_1, ($$render) => {
          if ($$props.review.address) $$render(consequent_1);
        });
      }
      reset(div_3);
      reset(div_2);
      var node_4 = sibling(div_2, 2);
      {
        var consequent_8 = ($$anchor3) => {
          var ul_1 = root_49();
          var node_5 = child(ul_1);
          {
            var consequent_3 = ($$anchor4) => {
              var li_1 = root_510();
              var node_6 = child(li_1);
              {
                var consequent_2 = ($$anchor5) => {
                  var fragment_2 = comment();
                  var node_7 = first_child(fragment_2);
                  snippet(node_7, () => $$props.item1);
                  append($$anchor5, fragment_2);
                };
                if_block(node_6, ($$render) => {
                  if ($$props.item1) $$render(consequent_2);
                });
              }
              reset(li_1);
              template_effect(($0) => set_class(li_1, 1, $0), [
                () => clsx2(twMerge(get(li)({ class: $$props.liClass })))
              ]);
              append($$anchor4, li_1);
            };
            if_block(node_5, ($$render) => {
              if ($$props.review.item1) $$render(consequent_3);
            });
          }
          var node_8 = sibling(node_5, 2);
          {
            var consequent_5 = ($$anchor4) => {
              var li_2 = root_75();
              var node_9 = child(li_2);
              {
                var consequent_4 = ($$anchor5) => {
                  var fragment_3 = comment();
                  var node_10 = first_child(fragment_3);
                  snippet(node_10, () => $$props.item2);
                  append($$anchor5, fragment_3);
                };
                if_block(node_9, ($$render) => {
                  if ($$props.item2) $$render(consequent_4);
                });
              }
              reset(li_2);
              template_effect(() => set_class(li_2, 1, clsx2($$props.liClass)));
              append($$anchor4, li_2);
            };
            if_block(node_8, ($$render) => {
              if ($$props.review.item2) $$render(consequent_5);
            });
          }
          var node_11 = sibling(node_8, 2);
          {
            var consequent_7 = ($$anchor4) => {
              var li_3 = root_94();
              var node_12 = child(li_3);
              {
                var consequent_6 = ($$anchor5) => {
                  var fragment_4 = comment();
                  var node_13 = first_child(fragment_4);
                  snippet(node_13, () => $$props.item3);
                  append($$anchor5, fragment_4);
                };
                if_block(node_12, ($$render) => {
                  if ($$props.item3) $$render(consequent_6);
                });
              }
              reset(li_3);
              template_effect(($0) => set_class(li_3, 1, $0), [() => clsx2(twMerge($$props.liClass))]);
              append($$anchor4, li_3);
            };
            if_block(node_11, ($$render) => {
              if ($$props.review.item3) $$render(consequent_7);
            });
          }
          reset(ul_1);
          template_effect(($0) => set_class(ul_1, 1, $0), [
            () => clsx2(get(ul)({ class: $$props.ulClass }))
          ]);
          append($$anchor3, ul_1);
        };
        if_block(node_4, ($$render) => {
          if ($$props.review.item1 || $$props.review.item2 || $$props.review.item3) $$render(consequent_8);
        });
      }
      reset(div_1);
      var div_5 = sibling(div_1, 2);
      var div_6 = child(div_5);
      var div_7 = child(div_6);
      var node_14 = child(div_7);
      {
        var consequent_9 = ($$anchor3) => {
          var footer2 = root_11();
          var p_1 = child(footer2);
          var text_1 = child(p_1);
          reset(p_1);
          reset(footer2);
          template_effect(() => set_text(text_1, `Reviewed: ${$$props.review.reviewDate ?? ""}`));
          append($$anchor3, footer2);
        };
        if_block(node_14, ($$render) => {
          if ($$props.review.reviewDate) $$render(consequent_9);
        });
      }
      var h4 = sibling(node_14, 2);
      var text_2 = child(h4, true);
      reset(h4);
      reset(div_7);
      var p_2 = sibling(div_7, 2);
      var text_3 = child(p_2, true);
      reset(p_2);
      reset(div_6);
      var node_15 = sibling(div_6, 2);
      snippet(node_15, () => $$props.children);
      reset(div_5);
      reset(article_1);
      template_effect(
        ($0, $1, $2, $3) => {
          set_class(article_1, 1, $0);
          set_class(div_2, 1, $1);
          set_class(img_1, 1, $2);
          set_attribute(img_1, "src", $$props.review.imgSrc);
          set_attribute(img_1, "alt", $$props.review.imgAlt);
          set_class(div_3, 1, $3);
          set_text(text2, $$props.review.name);
          set_text(text_2, $$props.review.title);
          set_text(text_3, $$props.review.rating);
        },
        [
          () => clsx2(get(article)({ class: $$props.articleClass })),
          () => clsx2(get(div)({ class: $$props.divClass })),
          () => clsx2(get(img2)({ class: $$props.imgClass })),
          () => clsx2(get(div2)({ class: $$props.div2Class }))
        ]
      );
      append($$anchor2, article_1);
    };
    if_block(node, ($$render) => {
      if ($$props.review) $$render(consequent_10);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Review = hmr(Review, () => Review[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Review[HMR].source;
    set(Review[HMR].source, module.default[HMR].original);
  });
}
var Review_default = Review;

// node_modules/flowbite-svelte/dist/rating/ScoreRating.svelte
ScoreRating[FILENAME] = "node_modules/flowbite-svelte/dist/rating/ScoreRating.svelte";
var root_225 = add_locations(from_html(`<p> </p>`), ScoreRating[FILENAME], [[13, 6]]);
var root_322 = add_locations(from_html(`<p> </p>`), ScoreRating[FILENAME], [[16, 6]]);
var root_410 = add_locations(from_html(`<span></span> <p> </p>`, 1), ScoreRating[FILENAME], [[19, 6], [20, 6]]);
var root_511 = add_locations(from_html(`<a> </a>`), ScoreRating[FILENAME], [[23, 6]]);
var root_139 = add_locations(from_html(`<!> <!> <!> <!>`, 1), ScoreRating[FILENAME], []);
var root_76 = add_locations(from_html(`<dl><dt class="text-sm font-medium text-gray-500 dark:text-gray-400"> </dt> <dd class="mb-3 flex items-center"><div class="me-2 h-2.5 w-full rounded-sm bg-gray-200 dark:bg-gray-700"><div></div></div> <span class="text-sm font-medium text-gray-500 dark:text-gray-400"> </span></dd></dl>`), ScoreRating[FILENAME], [
  [
    31,
    8,
    [
      [32, 10],
      [
        35,
        10,
        [
          [36, 12, [[37, 14]]],
          [39, 12]
        ]
      ]
    ]
  ]
]);
var root_95 = add_locations(from_html(`<dl><dt class="text-sm font-medium text-gray-500 dark:text-gray-400"> </dt> <dd class="mb-3 flex items-center"><div class="me-2 h-2.5 w-full rounded-sm bg-gray-200 dark:bg-gray-700"><div></div></div> <span class="text-sm font-medium text-gray-500 dark:text-gray-400"> </span></dd></dl>`), ScoreRating[FILENAME], [
  [
    48,
    8,
    [
      [49, 10],
      [
        52,
        10,
        [
          [53, 12, [[54, 14]]],
          [56, 12]
        ]
      ]
    ]
  ]
]);
var root56 = add_locations(from_html(`<div class="mb-5 flex items-center"><!></div> <div class="gap-8 sm:grid sm:grid-cols-2"><div><!></div> <div><!></div></div>`, 1), ScoreRating[FILENAME], [
  [10, 0],
  [27, 0, [[28, 2], [45, 2]]]
]);
function ScoreRating($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ScoreRating);
  const $$d = user_derived(scorerating), desc1 = user_derived(() => {
    let {
      desc1: $$1,
      desc2: $$2,
      desc3span: $$3,
      desc3p: $$4,
      link: $$5,
      bar: $$6
    } = get($$d);
    return $$1;
  }), desc2 = user_derived(() => {
    let {
      desc1: $$1,
      desc2: $$2,
      desc3span: $$3,
      desc3p: $$4,
      link: $$5,
      bar: $$6
    } = get($$d);
    return $$2;
  }), desc3span = user_derived(() => {
    let {
      desc1: $$1,
      desc2: $$2,
      desc3span: $$3,
      desc3p: $$4,
      link: $$5,
      bar: $$6
    } = get($$d);
    return $$3;
  }), desc3p = user_derived(() => {
    let {
      desc1: $$1,
      desc2: $$2,
      desc3span: $$3,
      desc3p: $$4,
      link: $$5,
      bar: $$6
    } = get($$d);
    return $$4;
  }), link = user_derived(() => {
    let {
      desc1: $$1,
      desc2: $$2,
      desc3span: $$3,
      desc3p: $$4,
      link: $$5,
      bar: $$6
    } = get($$d);
    return $$5;
  }), bar = user_derived(() => {
    let {
      desc1: $$1,
      desc2: $$2,
      desc3span: $$3,
      desc3p: $$4,
      link: $$5,
      bar: $$6
    } = get($$d);
    return $$6;
  });
  var fragment = root56();
  var div = first_child(fragment);
  var node = child(div);
  {
    var consequent_4 = ($$anchor2) => {
      var fragment_1 = root_139();
      var node_1 = first_child(fragment_1);
      {
        var consequent = ($$anchor3) => {
          var p = root_225();
          var text2 = child(p, true);
          reset(p);
          template_effect(
            ($0) => {
              set_class(p, 1, $0);
              set_text(text2, $$props.headerLabel.desc1);
            },
            [() => clsx2(get(desc1)())]
          );
          append($$anchor3, p);
        };
        if_block(node_1, ($$render) => {
          if ($$props.headerLabel.desc1) $$render(consequent);
        });
      }
      var node_2 = sibling(node_1, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var p_1 = root_322();
          var text_1 = child(p_1, true);
          reset(p_1);
          template_effect(
            ($0) => {
              set_class(p_1, 1, $0);
              set_text(text_1, $$props.headerLabel.desc2);
            },
            [() => clsx2(get(desc2)())]
          );
          append($$anchor3, p_1);
        };
        if_block(node_2, ($$render) => {
          if ($$props.headerLabel.desc2) $$render(consequent_1);
        });
      }
      var node_3 = sibling(node_2, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_2 = root_410();
          var span2 = first_child(fragment_2);
          var p_2 = sibling(span2, 2);
          var text_2 = child(p_2, true);
          reset(p_2);
          template_effect(
            ($0, $1) => {
              set_class(span2, 1, $0);
              set_class(p_2, 1, $1);
              set_text(text_2, $$props.headerLabel.desc3);
            },
            [
              () => clsx2(get(desc3span)()),
              () => clsx2(get(desc3p)())
            ]
          );
          append($$anchor3, fragment_2);
        };
        if_block(node_3, ($$render) => {
          if ($$props.headerLabel.desc3) $$render(consequent_2);
        });
      }
      var node_4 = sibling(node_3, 2);
      {
        var consequent_3 = ($$anchor3) => {
          var a = root_511();
          var text_3 = child(a, true);
          reset(a);
          template_effect(
            ($0) => {
              set_attribute(a, "href", $$props.headerLabel.link.url);
              set_class(a, 1, $0);
              set_text(text_3, $$props.headerLabel.link.label);
            },
            [() => clsx2(get(link)())]
          );
          append($$anchor3, a);
        };
        if_block(node_4, ($$render) => {
          if ($$props.headerLabel.link) $$render(consequent_3);
        });
      }
      append($$anchor2, fragment_1);
    };
    if_block(node, ($$render) => {
      if ($$props.headerLabel) $$render(consequent_4);
    });
  }
  reset(div);
  var div_1 = sibling(div, 2);
  var div_2 = child(div_1);
  var node_5 = child(div_2);
  {
    var consequent_5 = ($$anchor2) => {
      var fragment_3 = comment();
      var node_6 = first_child(fragment_3);
      each(node_6, 17, () => $$props.ratings, index, ($$anchor3, $$item) => {
        let label2 = () => get($$item).label;
        label2();
        let rating2 = () => get($$item).rating;
        rating2();
        var dl = root_76();
        var dt = child(dl);
        var text_4 = child(dt, true);
        reset(dt);
        var dd = sibling(dt, 2);
        var div_3 = child(dd);
        var div_4 = child(div_3);
        reset(div_3);
        var span_1 = sibling(div_3, 2);
        var text_5 = child(span_1, true);
        reset(span_1);
        reset(dd);
        reset(dl);
        template_effect(
          ($0) => {
            set_text(text_4, label2());
            set_class(div_4, 1, $0);
            set_style(div_4, `width: ${rating2() * 10}%`);
            set_text(text_5, rating2());
          },
          [() => clsx2(get(bar)())]
        );
        append($$anchor3, dl);
      });
      append($$anchor2, fragment_3);
    };
    if_block(node_5, ($$render) => {
      if ($$props.ratings) $$render(consequent_5);
    });
  }
  reset(div_2);
  var div_5 = sibling(div_2, 2);
  var node_7 = child(div_5);
  {
    var consequent_6 = ($$anchor2) => {
      var fragment_4 = comment();
      var node_8 = first_child(fragment_4);
      each(node_8, 17, () => $$props.ratings2, index, ($$anchor3, $$item) => {
        let label2 = () => get($$item).label;
        label2();
        let rating2 = () => get($$item).rating;
        rating2();
        var dl_1 = root_95();
        var dt_1 = child(dl_1);
        var text_6 = child(dt_1, true);
        reset(dt_1);
        var dd_1 = sibling(dt_1, 2);
        var div_6 = child(dd_1);
        var div_7 = child(div_6);
        reset(div_6);
        var span_2 = sibling(div_6, 2);
        var text_7 = child(span_2, true);
        reset(span_2);
        reset(dd_1);
        reset(dl_1);
        template_effect(
          ($0) => {
            set_text(text_6, label2());
            set_class(div_7, 1, $0);
            set_style(div_7, `width: ${rating2() * 10}%`);
            set_text(text_7, rating2());
          },
          [() => clsx2(get(bar)())]
        );
        append($$anchor3, dl_1);
      });
      append($$anchor2, fragment_4);
    };
    if_block(node_7, ($$render) => {
      if ($$props.ratings2) $$render(consequent_6);
    });
  }
  reset(div_5);
  reset(div_1);
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ScoreRating = hmr(ScoreRating, () => ScoreRating[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ScoreRating[HMR].source;
    set(ScoreRating[HMR].source, module.default[HMR].original);
  });
}
var ScoreRating_default = ScoreRating;

// node_modules/flowbite-svelte/dist/rating/Thumbup.svelte
Thumbup[FILENAME] = "node_modules/flowbite-svelte/dist/rating/Thumbup.svelte";
var root_140 = add_locations(from_svg(`<stop offset="0%"></stop><stop></stop><stop stop-color="transparent"></stop><stop offset="100%" stop-color="transparent"></stop>`, 1), Thumbup[FILENAME], [
  [13, 8],
  [14, 8],
  [15, 8],
  [16, 8]
]);
var root_226 = add_locations(from_svg(`<stop offset="0%"></stop><stop offset="100%"></stop>`, 1), Thumbup[FILENAME], [[18, 8], [19, 8]]);
var root57 = add_locations(from_svg(`<svg><defs><linearGradient><!></linearGradient></defs><path stroke-linecap="round" stroke-linejoin="round" d="M6.633 10.5c.806 0 1.533-.446 2.031-1.08a9.041 9.041 0 012.861-2.4c.723-.384 1.35-.956 1.653-1.715a4.498 4.498 0 00.322-1.672V3a.75.75 0 01.75-.75A2.25 2.25 0 0116.5 4.5c0 1.152-.26 2.243-.723 3.218-.266.558.107 1.282.725 1.282h3.126c1.026 0 1.945.694 2.054 1.715.045.422.068.85.068 1.285a11.95 11.95 0 01-2.649 7.521c-.388.482-.987.729-1.605.729H13.48c-.483 0-.964-.078-1.423-.23l-3.114-1.04a4.501 4.501 0 00-1.423-.23H5.904M14.25 9h2.25M5.904 18.75c.083.205.173.405.27.602.197.4-.078.898-.523.898h-.908c-.889 0-1.713-.518-1.972-1.368a12 12 0 01-.521-3.507c0-1.553.295-3.036.831-4.398C3.387 10.203 4.167 9.75 5 9.75h1.053c.472 0 .745.556.5.96a8.958 8.958 0 00-1.302 4.665c0 1.194.232 2.333.654 3.375z"></path></svg>`), Thumbup[FILENAME], [
  [
    9,
    0,
    [[10, 2, [[11, 4]]], [23, 2]]
  ]
]);
function Thumbup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Thumbup);
  let fillPercent = prop($$props, "fillPercent", 3, 100), fillColor = prop($$props, "fillColor", 3, "#00b500"), strokeColor = prop($$props, "strokeColor", 3, "#00b500"), size = prop($$props, "size", 3, 24), ariaLabel = prop($$props, "ariaLabel", 3, "thumbup"), iconIndex = prop($$props, "iconIndex", 3, 0), groupId = prop($$props, "groupId", 3, "star"), role = prop($$props, "role", 3, "img"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "fillPercent",
      "fillColor",
      "strokeColor",
      "size",
      "ariaLabel",
      "iconIndex",
      "groupId",
      "role",
      "svgClass"
    ],
    "restProps"
  );
  const uniqueId = `${groupId()}-${iconIndex()}`;
  var svg = root57();
  let attributes;
  var defs = child(svg);
  var linearGradient = child(defs);
  set_attribute(linearGradient, "id", uniqueId);
  var node = child(linearGradient);
  {
    var consequent = ($$anchor2) => {
      var fragment = root_140();
      var stop = first_child(fragment);
      var stop_1 = sibling(stop);
      var stop_2 = sibling(stop_1);
      next();
      template_effect(() => {
        set_attribute(stop, "stop-color", fillColor());
        set_attribute(stop_1, "offset", `${fillPercent() ?? ""}%`);
        set_attribute(stop_1, "stop-color", fillColor());
        set_attribute(stop_2, "offset", `${fillPercent() ?? ""}%`);
      });
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = root_226();
      var stop_3 = first_child(fragment_1);
      var stop_4 = sibling(stop_3);
      template_effect(() => {
        set_attribute(stop_3, "stop-color", fillColor());
        set_attribute(stop_4, "stop-color", fillColor());
      });
      append($$anchor2, fragment_1);
    };
    if_block(node, ($$render) => {
      if (strict_equals(fillPercent(), 100, false)) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  reset(linearGradient);
  reset(defs);
  var path = sibling(defs);
  set_attribute(path, "fill", `url(#${uniqueId})`);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(svg, attributes, {
      width: size(),
      height: size(),
      ...restProps,
      class: $$props.svgClass,
      "aria-label": ariaLabel(),
      viewBox: "0 0 24 24",
      role: role(),
      "stroke-width": "1.5",
      stroke: "currentColor",
      fill: "none"
    });
    set_attribute(path, "stroke", strokeColor());
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Thumbup = hmr(Thumbup, () => Thumbup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Thumbup[HMR].source;
    set(Thumbup[HMR].source, module.default[HMR].original);
  });
}
var Thumbup_default = Thumbup;

// node_modules/flowbite-svelte/dist/rating/CustomIcon.svelte
CustomIcon[FILENAME] = "node_modules/flowbite-svelte/dist/rating/CustomIcon.svelte";
var root_141 = add_locations(from_svg(`<stop offset="0%"></stop><stop></stop><stop stop-color="transparent"></stop><stop offset="100%" stop-color="transparent"></stop>`, 1), CustomIcon[FILENAME], [
  [13, 8],
  [14, 8],
  [15, 8],
  [16, 8]
]);
var root_227 = add_locations(from_svg(`<stop offset="0%"></stop><stop offset="100%"></stop>`, 1), CustomIcon[FILENAME], [[18, 8], [19, 8]]);
var root58 = add_locations(from_svg(`<svg><defs><linearGradient x1="0%" y1="0%" x2="100%" y2="0%"><!></linearGradient></defs><path stroke-linecap="round" stroke-linejoin="round"></path></svg>`), CustomIcon[FILENAME], [
  [
    9,
    0,
    [[10, 2, [[11, 4]]], [24, 2]]
  ]
]);
function CustomIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, CustomIcon);
  let fillPercent = prop($$props, "fillPercent", 3, 100), fillColor = prop($$props, "fillColor", 3, "#00ff00"), strokeColor = prop($$props, "strokeColor", 3, "#00ff00"), size = prop($$props, "size", 3, 24), ariaLabel = prop($$props, "ariaLabel", 3, "custom icon"), iconIndex = prop($$props, "iconIndex", 3, 0), groupId = prop($$props, "groupId", 3, "custom"), role = prop($$props, "role", 3, "img"), pathd = prop($$props, "pathd", 3, "M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "fillPercent",
      "fillColor",
      "strokeColor",
      "size",
      "ariaLabel",
      "iconIndex",
      "groupId",
      "role",
      "svgClass",
      "pathd"
    ],
    "restProps"
  );
  const uniqueId = `${groupId()}-${iconIndex()}`;
  var svg = root58();
  let attributes;
  var defs = child(svg);
  var linearGradient = child(defs);
  set_attribute(linearGradient, "id", uniqueId);
  var node = child(linearGradient);
  {
    var consequent = ($$anchor2) => {
      var fragment = root_141();
      var stop = first_child(fragment);
      var stop_1 = sibling(stop);
      var stop_2 = sibling(stop_1);
      next();
      template_effect(() => {
        set_attribute(stop, "stop-color", fillColor());
        set_attribute(stop_1, "offset", `${fillPercent() ?? ""}%`);
        set_attribute(stop_1, "stop-color", fillColor());
        set_attribute(stop_2, "offset", `${fillPercent() ?? ""}%`);
      });
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = root_227();
      var stop_3 = first_child(fragment_1);
      var stop_4 = sibling(stop_3);
      template_effect(() => {
        set_attribute(stop_3, "stop-color", fillColor());
        set_attribute(stop_4, "stop-color", fillColor());
      });
      append($$anchor2, fragment_1);
    };
    if_block(node, ($$render) => {
      if (strict_equals(fillPercent(), 100, false)) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  reset(linearGradient);
  reset(defs);
  var path = sibling(defs);
  set_attribute(path, "fill", `url(#${uniqueId})`);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(svg, attributes, {
      width: size(),
      height: size(),
      class: $$props.svgClass,
      ...restProps,
      "aria-label": ariaLabel(),
      viewBox: "0 0 24 24",
      role: role(),
      "stroke-width": "1.5"
    });
    set_attribute(path, "d", pathd());
    set_attribute(path, "stroke", strokeColor());
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CustomIcon = hmr(CustomIcon, () => CustomIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CustomIcon[HMR].source;
    set(CustomIcon[HMR].source, module.default[HMR].original);
  });
}
var CustomIcon_default = CustomIcon;

// node_modules/flowbite-svelte/dist/rating/theme.js
var advancedrating = ce({
  // divClass = 'flex items-center mt-4', spanClass = 'text-sm font-medium text-gray-600 dark:text-gray-500', div2Class = 'mx-4 w-2/4 h-5 bg-gray-200 rounded-sm dark:bg-gray-700', div3Class = 'h-5 bg-yellow-400 rounded-sm', span2Class = 'text-sm font-medium text-gray-600 dark:text-gray-500',
  slots: {
    base: "flex items-center mt-4",
    span: "text-sm font-medium text-gray-600 dark:text-gray-500",
    div2: "mx-4 w-2/4 h-5 bg-gray-200 rounded-sm dark:bg-gray-700",
    div3: "h-5 bg-yellow-400 rounded-sm",
    span2: "text-sm font-medium text-gray-600 dark:text-gray-500"
  }
});
var rating = ce({
  slots: {
    base: "flex items-center",
    p: "ms-2 text-sm font-bold text-gray-900 dark:text-white"
  }
});
var review = ce({
  slots: {
    article: "md:grid md:grid-cols-3 md:gap-8",
    div: "mb-6 flex items-center space-x-4 rtl:space-x-reverse",
    div2: "space-y-1 font-medium dark:text-white",
    div3: "flex items-center text-sm text-gray-500 dark:text-gray-400",
    img: "h-10 w-10 rounded-full",
    ul: "space-y-4 text-sm text-gray-500 dark:text-gray-400",
    li: "flex items-center"
  }
});
var scorerating = ce({
  slots: {
    desc1: "bg-primary-100 w-8 text-primary-800 text-sm font-semibold inline-flex items-center p-1.5 rounded-sm dark:bg-primary-200 dark:text-primary-800",
    desc2: "ms-2 font-medium text-gray-900 dark:text-white",
    desc3: "mx-2 w-1 h-1 mx-2 bg-gray-900 rounded-full dark:bg-gray-500",
    desc3span: "text-sm w-24 font-medium text-gray-500 dark:text-gray-400",
    desc3p: "text-sm w-24 font-medium text-gray-500 dark:text-gray-400",
    link: "ms-auto w-32 text-sm font-medium text-primary-600 hover:underline dark:text-primary-500",
    bar: "bg-primary-600 h-2.5 rounded-sm dark:bg-primary-500"
  }
});

// node_modules/flowbite-svelte/dist/sidebar/Sidebar.svelte
Sidebar[FILENAME] = "node_modules/flowbite-svelte/dist/sidebar/Sidebar.svelte";
var root_323 = add_locations(from_html(`<div role="presentation"></div>`), Sidebar[FILENAME], [[60, 6]]);
var root_512 = add_locations(from_html(`<div role="presentation"></div>`), Sidebar[FILENAME], [[62, 6]]);
var root_77 = add_locations(from_html(`<div role="presentation" class="fixed start-0 top-0 z-50 h-full w-full"></div>`), Sidebar[FILENAME], [[64, 6]]);
var root_96 = add_locations(from_html(`<div role="presentation" class="fixed start-0 top-0 z-50 h-full w-full"></div>`), Sidebar[FILENAME], [[66, 6]]);
var root_142 = add_locations(from_html(`<!> <aside><div><!></div></aside>`, 1), Sidebar[FILENAME], [[69, 2, [[70, 4]]]]);
function Sidebar($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Sidebar);
  let isOpen = prop($$props, "isOpen", 3, false), isSingle = prop($$props, "isSingle", 3, true), breakpoint = prop($$props, "breakpoint", 3, "md"), alwaysOpen = prop($$props, "alwaysOpen", 3, false), position = prop($$props, "position", 3, "fixed"), activateClickOutside = prop($$props, "activateClickOutside", 3, true), backdrop = prop($$props, "backdrop", 3, true), transition2 = prop($$props, "transition", 3, fly), activeUrl = prop($$props, "activeUrl", 3, ""), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "isOpen",
      "closeSidebar",
      "isSingle",
      "breakpoint",
      "alwaysOpen",
      "position",
      "activateClickOutside",
      "backdrop",
      "backdropClass",
      "transition",
      "params",
      "divClass",
      "ariaLabel",
      "nonActiveClass",
      "activeClass",
      "activeUrl",
      "class"
    ],
    "restProps"
  );
  const breakpointValues = {
    sm: 640,
    md: 768,
    lg: 1024,
    xl: 1280,
    "2xl": 1536
  };
  let innerWidth = state(-1);
  let isLargeScreen = user_derived(() => alwaysOpen() || get(innerWidth) >= breakpointValues[breakpoint()]);
  const activeUrlStore = writable("");
  setContext("activeUrl", activeUrlStore);
  user_effect(() => {
    activeUrlStore.set(activeUrl());
  });
  const $$d = user_derived(() => sidebar({
    isOpen: isOpen(),
    breakpoint: breakpoint(),
    position: position(),
    backdrop: backdrop(),
    alwaysOpen: alwaysOpen()
  })), base = user_derived(() => {
    let {
      base: $$1,
      active: $$2,
      nonactive: $$3,
      div: $$4,
      backdrop: $$5
    } = get($$d);
    return $$1;
  }), active = user_derived(() => {
    let {
      base: $$1,
      active: $$2,
      nonactive: $$3,
      div: $$4,
      backdrop: $$5
    } = get($$d);
    return $$2;
  }), nonactive = user_derived(() => {
    let {
      base: $$1,
      active: $$2,
      nonactive: $$3,
      div: $$4,
      backdrop: $$5
    } = get($$d);
    return $$3;
  }), div = user_derived(() => {
    let {
      base: $$1,
      active: $$2,
      nonactive: $$3,
      div: $$4,
      backdrop: $$5
    } = get($$d);
    return $$4;
  }), backdropCls = user_derived(() => {
    let {
      base: $$1,
      active: $$2,
      nonactive: $$3,
      div: $$4,
      backdrop: $$5
    } = get($$d);
    return $$5;
  });
  let sidebarCtx = {
    get closeSidebar() {
      return $$props.closeSidebar;
    },
    get activeClass() {
      return get(active)({ class: $$props.activeClass });
    },
    get nonActiveClass() {
      return get(nonactive)({ class: $$props.nonActiveClass });
    },
    isSingle: isSingle()
  };
  let transitionParams = $$props.params ? $$props.params : { x: -320, duration: 200, easing: sineIn };
  setContext("sidebarContext", sidebarCtx);
  const handleEscape = () => {
    var _a;
    (_a = $$props.closeSidebar) == null ? void 0 : _a.call($$props);
  };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_5 = ($$anchor2) => {
      var fragment_1 = root_142();
      var node_1 = first_child(fragment_1);
      {
        var consequent_4 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_2 = first_child(fragment_2);
          {
            var consequent = ($$anchor4) => {
              var div_1 = root_323();
              div_1.__click = function(...$$args) {
                apply(() => $$props.closeSidebar, this, $$args, Sidebar, [60, 86]);
              };
              template_effect(($0) => set_class(div_1, 1, $0), [
                () => clsx2(get(backdropCls)({ class: $$props.backdropClass }))
              ]);
              append($$anchor4, div_1);
            };
            var alternate = ($$anchor4, $$elseif) => {
              {
                var consequent_1 = ($$anchor5) => {
                  var div_2 = root_512();
                  template_effect(($0) => set_class(div_2, 1, $0), [
                    () => clsx2(get(backdropCls)({ class: $$props.backdropClass }))
                  ]);
                  append($$anchor5, div_2);
                };
                var alternate_1 = ($$anchor5, $$elseif2) => {
                  {
                    var consequent_2 = ($$anchor6) => {
                      var div_3 = root_77();
                      div_3.__click = function(...$$args) {
                        apply(() => $$props.closeSidebar, this, $$args, Sidebar, [64, 87]);
                      };
                      append($$anchor6, div_3);
                    };
                    var alternate_2 = ($$anchor6, $$elseif3) => {
                      {
                        var consequent_3 = ($$anchor7) => {
                          var div_4 = root_96();
                          append($$anchor7, div_4);
                        };
                        if_block(
                          $$anchor6,
                          ($$render) => {
                            if (!backdrop() && !activateClickOutside()) $$render(consequent_3);
                          },
                          $$elseif3
                        );
                      }
                    };
                    if_block(
                      $$anchor5,
                      ($$render) => {
                        if (!backdrop() && activateClickOutside()) $$render(consequent_2);
                        else $$render(alternate_2, false);
                      },
                      $$elseif2
                    );
                  }
                };
                if_block(
                  $$anchor4,
                  ($$render) => {
                    if (backdrop() && !activateClickOutside()) $$render(consequent_1);
                    else $$render(alternate_1, false);
                  },
                  $$elseif
                );
              }
            };
            if_block(node_2, ($$render) => {
              if (backdrop() && activateClickOutside()) $$render(consequent);
              else $$render(alternate, false);
            });
          }
          append($$anchor3, fragment_2);
        };
        if_block(node_1, ($$render) => {
          if (isOpen() && !alwaysOpen()) $$render(consequent_4);
        });
      }
      var aside = sibling(node_1, 2);
      let attributes;
      var div_5 = child(aside);
      var node_3 = child(div_5);
      snippet(node_3, () => $$props.children);
      reset(div_5);
      reset(aside);
      action(aside, ($$node, $$action_arg) => {
        var _a;
        return (_a = trapFocus) == null ? void 0 : _a($$node, $$action_arg);
      }, () => !get(isLargeScreen) && isOpen() && !alwaysOpen() ? {
        onEscape: $$props.closeSidebar ? handleEscape : void 0
      } : null);
      template_effect(
        ($0, $1) => {
          attributes = set_attributes(aside, attributes, {
            ...restProps,
            class: $0,
            "aria-label": $$props.ariaLabel
          });
          set_class(div_5, 1, $1);
        },
        [
          () => get(base)({ class: clsx_default($$props.class) }),
          () => clsx2(get(div)({ class: $$props.divClass }))
        ]
      );
      transition(3, aside, transition2, () => !alwaysOpen() ? transitionParams : void 0);
      append($$anchor2, fragment_1);
    };
    if_block(node, ($$render) => {
      if (isOpen() || get(isLargeScreen)) $$render(consequent_5);
    });
  }
  bind_window_size("innerWidth", ($$value) => set(innerWidth, $$value, true));
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sidebar = hmr(Sidebar, () => Sidebar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sidebar[HMR].source;
    set(Sidebar[HMR].source, module.default[HMR].original);
  });
}
var Sidebar_default = Sidebar;
delegate(["click"]);

// node_modules/flowbite-svelte/dist/sidebar/SidebarWrapper.svelte
SidebarWrapper[FILENAME] = "node_modules/flowbite-svelte/dist/sidebar/SidebarWrapper.svelte";
var root59 = add_locations(from_html(`<div><!></div>`), SidebarWrapper[FILENAME], [[6, 0]]);
function SidebarWrapper($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SidebarWrapper);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children"
    ],
    "restProps"
  );
  var div = root59();
  let attributes;
  var node = child(div);
  snippet(node, () => $$props.children ?? noop);
  reset(div);
  template_effect(() => attributes = set_attributes(div, attributes, { ...restProps }));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SidebarWrapper = hmr(SidebarWrapper, () => SidebarWrapper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarWrapper[HMR].source;
    set(SidebarWrapper[HMR].source, module.default[HMR].original);
  });
}
var SidebarWrapper_default = SidebarWrapper;

// node_modules/flowbite-svelte/dist/sidebar/SidebarDropdownWrapper.svelte
SidebarDropdownWrapper[FILENAME] = "node_modules/flowbite-svelte/dist/sidebar/SidebarDropdownWrapper.svelte";
var root_411 = add_locations(from_svg(`<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5"></path></svg>`), SidebarDropdownWrapper[FILENAME], [[61, 8, [[62, 10]]]]);
var root_78 = add_locations(from_svg(`<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"></path></svg>`), SidebarDropdownWrapper[FILENAME], [[68, 6, [[69, 8]]]]);
var root_85 = add_locations(from_html(`<ul><!></ul>`), SidebarDropdownWrapper[FILENAME], [[74, 4]]);
var root60 = add_locations(from_html(`<li><button><!> <span> </span> <!></button> <!></li>`), SidebarDropdownWrapper[FILENAME], [
  [51, 0, [[52, 2, [[56, 4]]]]]
]);
function SidebarDropdownWrapper($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SidebarDropdownWrapper);
  const [$$stores, $$cleanup] = setup_stores();
  const $selected = () => (validate_store(selected, "selected"), store_get(selected, "$selected", $$stores));
  let isOpen = prop($$props, "isOpen", 7, false), transition2 = prop($$props, "transition", 3, slide), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "arrowup",
      "arrowdown",
      "icon",
      "isOpen",
      "btnClass",
      "label",
      "spanClass",
      "ulClass",
      "transition",
      "params",
      "svgClass",
      "class",
      "onclick"
    ],
    "restProps"
  );
  const $$d = user_derived(sidebardropdownwrapper), base = user_derived(() => {
    let {
      base: $$1,
      btn: $$2,
      span: $$3,
      svg: $$4,
      ul: $$5
    } = get($$d);
    return $$1;
  }), btn = user_derived(() => {
    let {
      base: $$1,
      btn: $$2,
      span: $$3,
      svg: $$4,
      ul: $$5
    } = get($$d);
    return $$2;
  }), span2 = user_derived(() => {
    let {
      base: $$1,
      btn: $$2,
      span: $$3,
      svg: $$4,
      ul: $$5
    } = get($$d);
    return $$3;
  }), svg = user_derived(() => {
    let {
      base: $$1,
      btn: $$2,
      span: $$3,
      svg: $$4,
      ul: $$5
    } = get($$d);
    return $$4;
  }), ul = user_derived(() => {
    let {
      base: $$1,
      btn: $$2,
      span: $$3,
      svg: $$4,
      ul: $$5
    } = get($$d);
    return $$5;
  });
  let sidebarDropdown = uiHelpers();
  sidebarDropdown.isOpen = isOpen();
  let ctx = getContext("sidebarContext") || { isSingle: false };
  let self = {};
  if (ctx.isSingle && !ctx.selected) {
    ctx.selected = writable(null);
  }
  let selected = ctx.isSingle ? ctx.selected : writable(self);
  user_effect(() => {
    if (ctx.isSingle) {
      isOpen(strict_equals($selected(), self));
    } else {
      isOpen(sidebarDropdown.isOpen);
    }
  });
  function handleDropdown() {
    if (ctx.isSingle) {
      selected.update((current) => strict_equals(current, self) ? null : self);
    } else {
      sidebarDropdown.toggle();
    }
    if ($$props.onclick) $$props.onclick();
  }
  var li = root60();
  var button2 = child(li);
  let attributes;
  var node = child(button2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.icon);
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if ($$props.icon) $$render(consequent);
    });
  }
  var span_1 = sibling(node, 2);
  var text2 = child(span_1, true);
  reset(span_1);
  var node_2 = sibling(span_1, 2);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_3 = first_child(fragment_1);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_4 = first_child(fragment_2);
          snippet(node_4, () => $$props.arrowup);
          append($$anchor3, fragment_2);
        };
        var alternate = ($$anchor3) => {
          var svg_1 = root_411();
          template_effect(($0) => set_class(svg_1, 0, $0), [
            () => clsx2(get(svg)({ class: $$props.svgClass }))
          ]);
          append($$anchor3, svg_1);
        };
        if_block(node_3, ($$render) => {
          if ($$props.arrowup) $$render(consequent_1);
          else $$render(alternate, false);
        });
      }
      append($$anchor2, fragment_1);
    };
    var alternate_1 = ($$anchor2, $$elseif) => {
      {
        var consequent_3 = ($$anchor3) => {
          var fragment_3 = comment();
          var node_5 = first_child(fragment_3);
          snippet(node_5, () => $$props.arrowdown);
          append($$anchor3, fragment_3);
        };
        var alternate_2 = ($$anchor3) => {
          var svg_2 = root_78();
          template_effect(($0) => set_class(svg_2, 0, $0), [
            () => clsx2(get(svg)({ class: $$props.svgClass }))
          ]);
          append($$anchor3, svg_2);
        };
        if_block(
          $$anchor2,
          ($$render) => {
            if ($$props.arrowdown) $$render(consequent_3);
            else $$render(alternate_2, false);
          },
          $$elseif
        );
      }
    };
    if_block(node_2, ($$render) => {
      if (isOpen()) $$render(consequent_2);
      else $$render(alternate_1, false);
    });
  }
  reset(button2);
  var node_6 = sibling(button2, 2);
  {
    var consequent_4 = ($$anchor2) => {
      var ul_1 = root_85();
      var node_7 = child(ul_1);
      snippet(node_7, () => $$props.children);
      reset(ul_1);
      template_effect(($0) => set_class(ul_1, 1, $0), [
        () => clsx2(get(ul)({ class: $$props.ulClass }))
      ]);
      transition(3, ul_1, transition2, () => $$props.params);
      append($$anchor2, ul_1);
    };
    if_block(node_6, ($$render) => {
      if (isOpen()) $$render(consequent_4);
    });
  }
  reset(li);
  template_effect(
    ($0, $1, $2) => {
      set_class(li, 1, $0);
      attributes = set_attributes(button2, attributes, {
        ...restProps,
        onclick: handleDropdown,
        type: "button",
        class: $1,
        "aria-controls": "sidebar-dropdown"
      });
      set_class(span_1, 1, $2);
      set_text(text2, $$props.label);
    },
    [
      () => clsx2(get(base)({ class: clsx_default($$props.class) })),
      () => get(btn)({ class: $$props.btnClass }),
      () => clsx2(get(span2)({ class: $$props.spanClass }))
    ]
  );
  append($$anchor, li);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  SidebarDropdownWrapper = hmr(SidebarDropdownWrapper, () => SidebarDropdownWrapper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarDropdownWrapper[HMR].source;
    set(SidebarDropdownWrapper[HMR].source, module.default[HMR].original);
  });
}
var SidebarDropdownWrapper_default = SidebarDropdownWrapper;

// node_modules/flowbite-svelte/dist/sidebar/SidebarGroup.svelte
SidebarGroup[FILENAME] = "node_modules/flowbite-svelte/dist/sidebar/SidebarGroup.svelte";
var root61 = add_locations(from_html(`<ul><!></ul>`), SidebarGroup[FILENAME], [[7, 0]]);
function SidebarGroup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SidebarGroup);
  let className = prop($$props, "class", 3, "space-y-2"), borderClass = prop($$props, "borderClass", 3, "pt-4 mt-4 border-t border-gray-200 dark:border-gray-700"), border = prop($$props, "border", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "borderClass",
      "border"
    ],
    "restProps"
  );
  var ul = root61();
  let attributes;
  var node = child(ul);
  snippet(node, () => $$props.children);
  reset(ul);
  template_effect(() => attributes = set_attributes(ul, attributes, {
    ...restProps,
    class: border() ? borderClass() : className()
  }));
  append($$anchor, ul);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SidebarGroup = hmr(SidebarGroup, () => SidebarGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarGroup[HMR].source;
    set(SidebarGroup[HMR].source, module.default[HMR].original);
  });
}
var SidebarGroup_default = SidebarGroup;

// node_modules/flowbite-svelte/dist/sidebar/SidebarItem.svelte
SidebarItem[FILENAME] = "node_modules/flowbite-svelte/dist/sidebar/SidebarItem.svelte";
var root62 = add_locations(from_html(`<li><a><!> <span> </span> <!></a></li>`), SidebarItem[FILENAME], [
  [30, 0, [[31, 2, [[35, 4]]]]]
]);
function SidebarItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SidebarItem);
  let spanClass = prop($$props, "spanClass", 3, "ms-3"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "icon",
      "subtext",
      "href",
      "label",
      "spanClass",
      "activeClass",
      "nonActiveClass",
      "aClass",
      "active",
      "class"
    ],
    "restProps"
  );
  const context = getContext("sidebarContext") ?? {};
  const activeUrlStore = getContext("activeUrl");
  let sidebarUrl = state("");
  activeUrlStore.subscribe((value) => {
    set(sidebarUrl, value, true);
  });
  let activeItem = state(void 0);
  user_effect(() => {
    set(activeItem, strict_equals($$props.active, void 0, false) ? $$props.active : get(sidebarUrl) ? strict_equals($$props.href, get(sidebarUrl)) : false, true);
  });
  let aCls = user_derived(() => get(activeItem) ?? strict_equals(get(sidebarUrl), $$props.href) ? $$props.activeClass ?? context.activeClass : $$props.nonActiveClass ?? context.nonActiveClass);
  var li = root62();
  var a = child(li);
  let attributes;
  var node = child(a);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.icon);
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if ($$props.icon) $$render(consequent);
    });
  }
  var span2 = sibling(node, 2);
  var text2 = child(span2, true);
  reset(span2);
  var node_2 = sibling(span2, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_3 = first_child(fragment_1);
      snippet(node_3, () => $$props.subtext);
      append($$anchor2, fragment_1);
    };
    if_block(node_2, ($$render) => {
      if ($$props.subtext) $$render(consequent_1);
    });
  }
  reset(a);
  reset(li);
  template_effect(
    ($0) => {
      set_class(li, 1, clsx2($$props.class));
      attributes = set_attributes(a, attributes, {
        onclick: context.closeSidebar,
        ...restProps,
        href: $$props.href,
        "aria-current": get(activeItem) ?? strict_equals(get(sidebarUrl), $$props.href) ? "page" : void 0,
        class: $0
      });
      set_class(span2, 1, clsx2(spanClass()));
      set_text(text2, $$props.label);
    },
    [
      () => twMerge(get(aCls), $$props.aClass)
    ]
  );
  append($$anchor, li);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SidebarItem = hmr(SidebarItem, () => SidebarItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarItem[HMR].source;
    set(SidebarItem[HMR].source, module.default[HMR].original);
  });
}
var SidebarItem_default = SidebarItem;

// node_modules/flowbite-svelte/dist/sidebar/SidebarButton.svelte
SidebarButton[FILENAME] = "node_modules/flowbite-svelte/dist/sidebar/SidebarButton.svelte";
var root63 = add_locations(from_html(`<button><span class="sr-only">Open sidebar</span> <svg class="h-6 w-6" aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" fill-rule="evenodd" d="M2 4.75A.75.75 0 012.75 4h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 4.75zm0 10.5a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5a.75.75 0 01-.75-.75zM2 10a.75.75 0 01.75-.75h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 10z"></path></svg></button>`), SidebarButton[FILENAME], [
  [
    10,
    0,
    [[11, 2], [12, 2, [[13, 4]]]]
  ]
]);
function SidebarButton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SidebarButton);
  let breakpoint = prop($$props, "breakpoint", 3, "md"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "breakpoint",
      "class"
    ],
    "restProps"
  );
  const base = user_derived(() => sidebarbutton({
    breakpoint: breakpoint(),
    class: clsx_default($$props.class)
  }));
  var button2 = root63();
  let attributes;
  template_effect(() => attributes = set_attributes(button2, attributes, {
    ...restProps,
    type: "button",
    class: get(base)
  }));
  append($$anchor, button2);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SidebarButton = hmr(SidebarButton, () => SidebarButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarButton[HMR].source;
    set(SidebarButton[HMR].source, module.default[HMR].original);
  });
}
var SidebarButton_default = SidebarButton;

// node_modules/flowbite-svelte/dist/sidebar/SidebarCta.svelte
SidebarCta[FILENAME] = "node_modules/flowbite-svelte/dist/sidebar/SidebarCta.svelte";
var root64 = add_locations(from_html(`<div><div><span> </span> <!></div> <!></div>`), SidebarCta[FILENAME], [
  [10, 0, [[11, 2, [[12, 4]]]]]
]);
function SidebarCta($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SidebarCta);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "icon",
      "divClass",
      "spanClass",
      "label",
      "class"
    ],
    "restProps"
  );
  const $$d = user_derived(sidebarcta), base = user_derived(() => {
    let { base: $$1, div: $$2, span: $$3 } = get($$d);
    return $$1;
  }), div = user_derived(() => {
    let { base: $$1, div: $$2, span: $$3 } = get($$d);
    return $$2;
  }), span2 = user_derived(() => {
    let { base: $$1, div: $$2, span: $$3 } = get($$d);
    return $$3;
  });
  var div_1 = root64();
  let attributes;
  var div_2 = child(div_1);
  var span_1 = child(div_2);
  var text2 = child(span_1, true);
  reset(span_1);
  var node = sibling(span_1, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.icon);
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if ($$props.icon) $$render(consequent);
    });
  }
  reset(div_2);
  var node_2 = sibling(div_2, 2);
  snippet(node_2, () => $$props.children ?? noop);
  reset(div_1);
  template_effect(
    ($0, $1, $2) => {
      attributes = set_attributes(div_1, attributes, {
        ...restProps,
        id: "dropdown-cta",
        class: $0,
        role: "alert"
      });
      set_class(div_2, 1, $1);
      set_class(span_1, 1, $2);
      set_text(text2, $$props.label);
    },
    [
      () => get(base)({ class: clsx_default($$props.class) }),
      () => clsx2(get(div)({ class: $$props.divClass })),
      () => clsx2(get(span2)({ class: $$props.spanClass }))
    ]
  );
  append($$anchor, div_1);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SidebarCta = hmr(SidebarCta, () => SidebarCta[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarCta[HMR].source;
    set(SidebarCta[HMR].source, module.default[HMR].original);
  });
}
var SidebarCta_default = SidebarCta;

// node_modules/flowbite-svelte/dist/sidebar/SidebarBrand.svelte
SidebarBrand[FILENAME] = "node_modules/flowbite-svelte/dist/sidebar/SidebarBrand.svelte";
var root_143 = add_locations(from_html(`<img/> <span> </span>`, 1), SidebarBrand[FILENAME], [[13, 4], [14, 4]]);
var root65 = add_locations(from_html(`<a><!></a>`), SidebarBrand[FILENAME], [[11, 0]]);
function SidebarBrand($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SidebarBrand);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "site",
      "imgClass",
      "spanClass",
      "class"
    ],
    "restProps"
  );
  const $$d = user_derived(sitebarbrand), base = user_derived(() => {
    let { base: $$1, img: $$2, span: $$3 } = get($$d);
    return $$1;
  }), img2 = user_derived(() => {
    let { base: $$1, img: $$2, span: $$3 } = get($$d);
    return $$2;
  }), span2 = user_derived(() => {
    let { base: $$1, img: $$2, span: $$3 } = get($$d);
    return $$3;
  });
  var a = root65();
  let attributes;
  var node = child(a);
  {
    var consequent = ($$anchor2) => {
      var fragment = root_143();
      var img_1 = first_child(fragment);
      var span_1 = sibling(img_1, 2);
      var text2 = child(span_1, true);
      reset(span_1);
      template_effect(
        ($0, $1) => {
          set_attribute(img_1, "src", $$props.site.img);
          set_class(img_1, 1, $0);
          set_attribute(img_1, "alt", $$props.site.name);
          set_class(span_1, 1, $1);
          set_text(text2, $$props.site.name);
        },
        [
          () => clsx2(get(img2)({ class: $$props.imgClass })),
          () => clsx2(get(span2)({ class: $$props.spanClass }))
        ]
      );
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2, $$elseif) => {
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_1 = first_child(fragment_1);
          snippet(node_1, () => $$props.children);
          append($$anchor3, fragment_1);
        };
        if_block(
          $$anchor2,
          ($$render) => {
            if ($$props.children) $$render(consequent_1);
          },
          $$elseif
        );
      }
    };
    if_block(node, ($$render) => {
      if ($$props.site) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  reset(a);
  template_effect(
    ($0) => {
      var _a;
      return attributes = set_attributes(a, attributes, {
        ...restProps,
        href: ((_a = $$props.site) == null ? void 0 : _a.href) ? $$props.site.href : "/",
        class: $0
      });
    },
    [
      () => get(base)({ class: clsx_default($$props.class) })
    ]
  );
  append($$anchor, a);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SidebarBrand = hmr(SidebarBrand, () => SidebarBrand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarBrand[HMR].source;
    set(SidebarBrand[HMR].source, module.default[HMR].original);
  });
}
var SidebarBrand_default = SidebarBrand;

// node_modules/flowbite-svelte/dist/sidebar/theme.js
var sidebar = ce({
  slots: {
    base: "top-0 left-0 z-50 w-64 transition-transform bg-gray-50 dark:bg-gray-800",
    active: "flex items-center group-has-[ul]:ms-6 p-2 text-base font-normal text-gray-900 bg-gray-200 dark:bg-gray-700 rounded-sm dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700",
    nonactive: "flex items-center group-has-[ul]:ms-6 p-2 text-base font-normal text-gray-900 rounded-sm dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700",
    div: "overflow-y-auto px-3 py-4 bg-gray-50 dark:bg-gray-800",
    backdrop: "fixed top-0 start-0 z-40 w-full h-full"
  },
  variants: {
    position: {
      fixed: { base: "fixed" },
      absolute: { base: "absolute" },
      static: { base: "static" }
    },
    isOpen: {
      true: "block",
      false: "hidden"
    },
    breakpoint: {
      sm: { base: "sm:block" },
      md: { base: "md:block" },
      lg: { base: "lg:block" },
      xl: { base: "xl:block" },
      "2xl": { base: "2xl:block" }
    },
    alwaysOpen: {
      true: { base: "block" }
      // Always display the sidebar when alwaysOpen is true
    },
    backdrop: {
      true: { backdrop: "bg-gray-900 opacity-75" }
    }
  },
  compoundVariants: [
    // When alwaysOpen is true, override the breakpoint display classes
    {
      alwaysOpen: true,
      class: {
        base: "!block"
      }
    }
  ]
});
var sidebarbutton = ce({
  base: "inline-flex items-center p-0 mt-0 ms-3 text-sm text-gray-500 rounded-lg hover:bg-gray-100 focus:outline-hidden focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600",
  variants: {
    breakpoint: {
      sm: "sm:hidden",
      md: "md:hidden",
      lg: "lg:hidden",
      xl: "xl:hidden",
      "2xl": "2xl:hidden"
    }
  }
});
var sidebarcta = ce({
  slots: {
    base: "p-4 mt-6 bg-primary-50 rounded-lg dark:bg-primary-900",
    div: "flex items-center mb-3",
    span: "bg-primary-100 text-primary-800 text-sm font-semibold me-2 px-2.5 py-0.5 rounded-sm dark:bg-primary-200 dark:text-primary-900"
  }
});
var sitebarbrand = ce({
  slots: {
    base: "flex items-center ps-2.5 mb-5",
    img: "h-6 me-3 sm:h-7",
    span: "self-center text-xl font-semibold whitespace-nowrap dark:text-white"
  }
});
var sidebardropdownwrapper = ce({
  slots: {
    base: "group",
    btn: "flex items-center p-2 w-full text-base font-normal text-gray-900 rounded-sm transition duration-75 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700",
    span: "flex-1 ms-3 text-left whitespace-nowrap",
    svg: "h-3 w-3 text-gray-800 dark:text-white",
    ul: "py-2 space-y-0"
  }
});

// node_modules/flowbite-svelte/dist/skeleton/CardPlaceholder.svelte
CardPlaceholder[FILENAME] = "node_modules/flowbite-svelte/dist/skeleton/CardPlaceholder.svelte";
var root66 = add_locations(from_html(`<div><div><svg width="48" height="48" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" fill="currentColor" viewBox="0 0 640 512"><path d="M480 80C480 35.82 515.8 0 560 0C604.2 0 640 35.82 640 80C640 124.2 604.2 160 560 160C515.8 160 480 124.2 480 80zM0 456.1C0 445.6 2.964 435.3 8.551 426.4L225.3 81.01C231.9 70.42 243.5 64 256 64C268.5 64 280.1 70.42 286.8 81.01L412.7 281.7L460.9 202.7C464.1 196.1 472.2 192 480 192C487.8 192 495 196.1 499.1 202.7L631.1 419.1C636.9 428.6 640 439.7 640 450.9C640 484.6 612.6 512 578.9 512H55.91C25.03 512 .0006 486.1 .0006 456.1L0 456.1z"></path></svg></div> <div></div> <div></div> <div></div> <div></div> <div><svg aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd"></path></svg> <div></div> <div></div></div> <span class="sr-only">Loading...</span></div>`), CardPlaceholder[FILENAME], [
  [
    11,
    0,
    [
      [12, 2, [[13, 4, [[14, 6]]]]],
      [17, 2],
      [18, 2],
      [19, 2],
      [20, 2],
      [
        21,
        2,
        [
          [22, 4, [[23, 6]]],
          [25, 4],
          [26, 4]
        ]
      ],
      [28, 2]
    ]
  ]
]);
function CardPlaceholder($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, CardPlaceholder);
  let size = prop($$props, "size", 3, "sm"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "size",
      "class"
    ],
    "restProps"
  );
  const $$d = user_derived(() => cardPlaceholder({ size: size() })), base = user_derived(() => {
    let {
      base: $$1,
      imageArea: $$2,
      imageIcon: $$3,
      line: $$4,
      footerArea: $$5
    } = get($$d);
    return $$1;
  }), imageArea = user_derived(() => {
    let {
      base: $$1,
      imageArea: $$2,
      imageIcon: $$3,
      line: $$4,
      footerArea: $$5
    } = get($$d);
    return $$2;
  }), imageIcon = user_derived(() => {
    let {
      base: $$1,
      imageArea: $$2,
      imageIcon: $$3,
      line: $$4,
      footerArea: $$5
    } = get($$d);
    return $$3;
  }), line = user_derived(() => {
    let {
      base: $$1,
      imageArea: $$2,
      imageIcon: $$3,
      line: $$4,
      footerArea: $$5
    } = get($$d);
    return $$4;
  }), footerArea = user_derived(() => {
    let {
      base: $$1,
      imageArea: $$2,
      imageIcon: $$3,
      line: $$4,
      footerArea: $$5
    } = get($$d);
    return $$5;
  });
  var div = root66();
  let attributes;
  var div_1 = child(div);
  var svg = child(div_1);
  reset(div_1);
  var div_2 = sibling(div_1, 2);
  var div_3 = sibling(div_2, 2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  var div_6 = sibling(div_5, 2);
  var svg_1 = child(div_6);
  var div_7 = sibling(svg_1, 2);
  var div_8 = sibling(div_7, 2);
  reset(div_6);
  next(2);
  reset(div);
  template_effect(
    ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) => {
      attributes = set_attributes(div, attributes, { role: "status", ...restProps, class: $0 });
      set_class(div_1, 1, $1);
      set_class(svg, 0, $2);
      set_class(div_2, 1, $3);
      set_class(div_3, 1, $4);
      set_class(div_4, 1, $5);
      set_class(div_5, 1, $6);
      set_class(div_6, 1, $7);
      set_class(svg_1, 0, $8);
      set_class(div_7, 1, $9);
      set_class(div_8, 1, $10);
    },
    [
      () => get(base)({ class: clsx_default($$props.class) }),
      () => clsx2(get(imageArea)()),
      () => clsx2(get(imageIcon)()),
      () => clsx2(get(line)({ class: "mb-4 h-2.5 w-1/2" })),
      () => clsx2(get(line)({ class: "mb-2.5 h-2" })),
      () => clsx2(get(line)({ class: "mb-2.5 h-2" })),
      () => clsx2(get(line)({ class: "h-2" })),
      () => clsx2(get(footerArea)()),
      () => clsx2(get(line)({ class: "h-14 w-14" })),
      () => clsx2(get(line)({ class: "mb-2 h-2.5 w-32" })),
      () => clsx2(get(line)({ class: "mb-2 h-2 w-32" }))
    ]
  );
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CardPlaceholder = hmr(CardPlaceholder, () => CardPlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardPlaceholder[HMR].source;
    set(CardPlaceholder[HMR].source, module.default[HMR].original);
  });
}
var CardPlaceholder_default = CardPlaceholder;

// node_modules/flowbite-svelte/dist/skeleton/ImagePlaceholder.svelte
ImagePlaceholder[FILENAME] = "node_modules/flowbite-svelte/dist/skeleton/ImagePlaceholder.svelte";
var root_144 = add_locations(from_html(`<div><div></div> <div></div> <div></div> <div></div> <div></div> <div></div> <div></div></div>`), ImagePlaceholder[FILENAME], [
  [
    23,
    4,
    [
      [24, 6],
      [25, 6],
      [26, 6],
      [27, 6],
      [28, 6],
      [29, 6],
      [30, 6]
    ]
  ]
]);
var root67 = add_locations(from_html(`<div><div><svg width="48" height="48" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" fill="currentColor" viewBox="0 0 640 512"><path d="M480 80C480 35.82 515.8 0 560 0C604.2 0 640 35.82 640 80C640 124.2 604.2 160 560 160C515.8 160 480 124.2 480 80zM0 456.1C0 445.6 2.964 435.3 8.551 426.4L225.3 81.01C231.9 70.42 243.5 64 256 64C268.5 64 280.1 70.42 286.8 81.01L412.7 281.7L460.9 202.7C464.1 196.1 472.2 192 480 192C487.8 192 495 196.1 499.1 202.7L631.1 419.1C636.9 428.6 640 439.7 640 450.9C640 484.6 612.6 512 578.9 512H55.91C25.03 512 .0006 486.1 .0006 456.1L0 456.1z"></path></svg></div> <!> <span class="sr-only">Loading...</span></div>`), ImagePlaceholder[FILENAME], [
  [
    16,
    0,
    [
      [17, 2, [[18, 4, [[19, 6]]]]],
      [33, 2]
    ]
  ]
]);
function ImagePlaceholder($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ImagePlaceholder);
  let size = prop($$props, "size", 3, "md"), imgOnly = prop($$props, "imgOnly", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "size",
      "rounded",
      "imgOnly",
      "class"
    ],
    "restProps"
  );
  const $$d = user_derived(() => imagePlaceholder({ size: size(), rounded: $$props.rounded })), base = user_derived(() => {
    let {
      base: $$1,
      image: $$2,
      svg: $$3,
      content: $$4,
      line: $$5
    } = get($$d);
    return $$1;
  }), image = user_derived(() => {
    let {
      base: $$1,
      image: $$2,
      svg: $$3,
      content: $$4,
      line: $$5
    } = get($$d);
    return $$2;
  }), svg = user_derived(() => {
    let {
      base: $$1,
      image: $$2,
      svg: $$3,
      content: $$4,
      line: $$5
    } = get($$d);
    return $$3;
  }), content = user_derived(() => {
    let {
      base: $$1,
      image: $$2,
      svg: $$3,
      content: $$4,
      line: $$5
    } = get($$d);
    return $$4;
  }), line = user_derived(() => {
    let {
      base: $$1,
      image: $$2,
      svg: $$3,
      content: $$4,
      line: $$5
    } = get($$d);
    return $$5;
  });
  var div = root67();
  let attributes;
  var div_1 = child(div);
  var svg_1 = child(div_1);
  reset(div_1);
  var node = sibling(div_1, 2);
  {
    var consequent = ($$anchor2) => {
      var div_2 = root_144();
      var div_3 = child(div_2);
      var div_4 = sibling(div_3, 2);
      var div_5 = sibling(div_4, 2);
      var div_6 = sibling(div_5, 2);
      var div_7 = sibling(div_6, 2);
      var div_8 = sibling(div_7, 2);
      var div_9 = sibling(div_8, 2);
      reset(div_2);
      template_effect(
        ($0, $1, $2, $3, $4, $5, $6, $7) => {
          set_class(div_2, 1, $0);
          set_class(div_3, 1, $1);
          set_class(div_4, 1, $2);
          set_class(div_5, 1, $3);
          set_class(div_6, 1, $4);
          set_class(div_7, 1, $5);
          set_class(div_8, 1, $6);
          set_class(div_9, 1, $7);
        },
        [
          () => clsx2(get(content)()),
          () => clsx2(get(line)({ class: "mb-4 h-2.5 w-1/2" })),
          () => clsx2(get(line)({ class: "mb-2.5 h-2 w-9/12" })),
          () => clsx2(get(line)({ class: "mb-2.5 h-2" })),
          () => clsx2(get(line)({ class: "mb-2.5 h-2" })),
          () => clsx2(get(line)({ class: "mb-2.5 h-2 w-10/12" })),
          () => clsx2(get(line)({ class: "mb-2.5 h-2 w-11/12" })),
          () => clsx2(get(line)({ class: "h-2 w-9/12" }))
        ]
      );
      append($$anchor2, div_2);
    };
    if_block(node, ($$render) => {
      if (!imgOnly()) $$render(consequent);
    });
  }
  next(2);
  reset(div);
  template_effect(
    ($0, $1, $2) => {
      attributes = set_attributes(div, attributes, { role: "status", ...restProps, class: $0 });
      set_class(div_1, 1, $1);
      set_class(svg_1, 0, $2);
    },
    [
      () => get(base)({ class: clsx_default($$props.class) }),
      () => clsx2(get(image)()),
      () => clsx2(get(svg)())
    ]
  );
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ImagePlaceholder = hmr(ImagePlaceholder, () => ImagePlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ImagePlaceholder[HMR].source;
    set(ImagePlaceholder[HMR].source, module.default[HMR].original);
  });
}
var ImagePlaceholder_default = ImagePlaceholder;

// node_modules/flowbite-svelte/dist/skeleton/ListPlaceholder.svelte
ListPlaceholder[FILENAME] = "node_modules/flowbite-svelte/dist/skeleton/ListPlaceholder.svelte";
var root_145 = add_locations(from_html(`<div><div><div></div> <div></div></div> <div></div></div>`), ListPlaceholder[FILENAME], [
  [
    16,
    4,
    [
      [17, 6, [[18, 8], [19, 8]]],
      [21, 6]
    ]
  ]
]);
var root68 = add_locations(from_html(`<div><!> <span class="sr-only">Loading...</span></div>`), ListPlaceholder[FILENAME], [[13, 0, [[24, 2]]]]);
function ListPlaceholder($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ListPlaceholder);
  let itemNumber = prop($$props, "itemNumber", 3, 5), size = prop($$props, "size", 3, "md"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "itemNumber",
      "size",
      "rounded",
      "class"
    ],
    "restProps"
  );
  const $$d = user_derived(() => listPlaceholder({ size: size(), rounded: $$props.rounded })), base = user_derived(() => {
    let {
      base: $$1,
      item: $$2,
      itemContent: $$3,
      itemTitle: $$4,
      itemSubtitle: $$5,
      itemExtra: $$6
    } = get($$d);
    return $$1;
  }), item = user_derived(() => {
    let {
      base: $$1,
      item: $$2,
      itemContent: $$3,
      itemTitle: $$4,
      itemSubtitle: $$5,
      itemExtra: $$6
    } = get($$d);
    return $$2;
  }), itemContent = user_derived(() => {
    let {
      base: $$1,
      item: $$2,
      itemContent: $$3,
      itemTitle: $$4,
      itemSubtitle: $$5,
      itemExtra: $$6
    } = get($$d);
    return $$3;
  }), itemTitle = user_derived(() => {
    let {
      base: $$1,
      item: $$2,
      itemContent: $$3,
      itemTitle: $$4,
      itemSubtitle: $$5,
      itemExtra: $$6
    } = get($$d);
    return $$4;
  }), itemSubtitle = user_derived(() => {
    let {
      base: $$1,
      item: $$2,
      itemContent: $$3,
      itemTitle: $$4,
      itemSubtitle: $$5,
      itemExtra: $$6
    } = get($$d);
    return $$5;
  }), itemExtra = user_derived(() => {
    let {
      base: $$1,
      item: $$2,
      itemContent: $$3,
      itemTitle: $$4,
      itemSubtitle: $$5,
      itemExtra: $$6
    } = get($$d);
    return $$6;
  });
  let items = user_derived(() => [...Array(itemNumber()).keys()]);
  var div = root68();
  let attributes;
  var node = child(div);
  each(node, 17, () => get(items), index, ($$anchor2, _, i) => {
    var div_1 = root_145();
    var div_2 = child(div_1);
    var div_3 = child(div_2);
    var div_4 = sibling(div_3, 2);
    reset(div_2);
    var div_5 = sibling(div_2, 2);
    reset(div_1);
    template_effect(
      ($0, $1, $2, $3, $4) => {
        set_class(div_1, 1, $0);
        set_class(div_2, 1, $1);
        set_class(div_3, 1, $2);
        set_class(div_4, 1, $3);
        set_class(div_5, 1, $4);
      },
      [
        () => clsx2(get(item)({ class: i > 0 ? "pt-4" : "" })),
        () => clsx2(get(itemContent)()),
        () => clsx2(get(itemTitle)()),
        () => clsx2(get(itemSubtitle)()),
        () => clsx2(get(itemExtra)())
      ]
    );
    append($$anchor2, div_1);
  });
  next(2);
  reset(div);
  template_effect(($0) => attributes = set_attributes(div, attributes, { role: "status", ...restProps, class: $0 }), [
    () => get(base)({ class: clsx_default($$props.class) })
  ]);
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ListPlaceholder = hmr(ListPlaceholder, () => ListPlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListPlaceholder[HMR].source;
    set(ListPlaceholder[HMR].source, module.default[HMR].original);
  });
}
var ListPlaceholder_default = ListPlaceholder;

// node_modules/flowbite-svelte/dist/skeleton/Skeleton.svelte
Skeleton[FILENAME] = "node_modules/flowbite-svelte/dist/skeleton/Skeleton.svelte";
var root69 = add_locations(from_html(`<div><div></div> <div></div> <div></div> <div></div> <div></div> <div></div> <div></div> <span class="sr-only">Loading...</span></div>`), Skeleton[FILENAME], [
  [
    10,
    0,
    [
      [11, 2],
      [12, 2],
      [13, 2],
      [14, 2],
      [15, 2],
      [16, 2],
      [17, 2],
      [18, 2]
    ]
  ]
]);
function Skeleton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Skeleton);
  let size = prop($$props, "size", 3, "sm"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "size",
      "class"
    ],
    "restProps"
  );
  const $$d = user_derived(() => skeleton({ size: size() })), wrapper = user_derived(() => {
    let { wrapper: $$1, line: $$2 } = get($$d);
    return $$1;
  }), line = user_derived(() => {
    let { wrapper: $$1, line: $$2 } = get($$d);
    return $$2;
  });
  var div = root69();
  let attributes;
  var div_1 = child(div);
  var div_2 = sibling(div_1, 2);
  var div_3 = sibling(div_2, 2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  var div_6 = sibling(div_5, 2);
  var div_7 = sibling(div_6, 2);
  next(2);
  reset(div);
  template_effect(
    ($0, $1, $2, $3, $4, $5, $6, $7) => {
      attributes = set_attributes(div, attributes, { role: "status", ...restProps, class: $0 });
      set_class(div_1, 1, $1);
      set_class(div_2, 1, $2);
      set_class(div_3, 1, $3);
      set_class(div_4, 1, $4);
      set_class(div_5, 1, $5);
      set_class(div_6, 1, $6);
      set_class(div_7, 1, $7);
    },
    [
      () => get(wrapper)({ class: clsx_default($$props.class) }),
      () => clsx2(get(line)({ class: "mb-4 h-2.5 w-1/2" })),
      () => clsx2(get(line)({ class: "mb-2.5 h-2 w-9/12" })),
      () => clsx2(get(line)({ class: "mb-2.5 h-2" })),
      () => clsx2(get(line)({ class: "mb-2.5 h-2" })),
      () => clsx2(get(line)({ class: "mb-2.5 h-2 w-10/12" })),
      () => clsx2(get(line)({ class: "mb-2.5 h-2 w-11/12" })),
      () => clsx2(get(line)({ class: "h-2 w-9/12" }))
    ]
  );
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Skeleton = hmr(Skeleton, () => Skeleton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Skeleton[HMR].source;
    set(Skeleton[HMR].source, module.default[HMR].original);
  });
}
var Skeleton_default = Skeleton;

// node_modules/flowbite-svelte/dist/skeleton/TestimonialPlaceholder.svelte
TestimonialPlaceholder[FILENAME] = "node_modules/flowbite-svelte/dist/skeleton/TestimonialPlaceholder.svelte";
var root70 = add_locations(from_html(`<div><div></div> <div></div> <div><svg aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd"></path></svg> <div></div> <div></div></div> <span class="sr-only">Loading...</span></div>`), TestimonialPlaceholder[FILENAME], [
  [
    10,
    0,
    [
      [11, 2],
      [12, 2],
      [
        13,
        2,
        [
          [14, 4, [[15, 6]]],
          [17, 4],
          [18, 4]
        ]
      ],
      [20, 2]
    ]
  ]
]);
function TestimonialPlaceholder($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TestimonialPlaceholder);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "class"], "restProps");
  const { wrapper, line1, line2, svg, subContent } = testimonialPlaceholder();
  var div = root70();
  let attributes;
  var div_1 = child(div);
  var div_2 = sibling(div_1, 2);
  var div_3 = sibling(div_2, 2);
  var svg_1 = child(div_3);
  var div_4 = sibling(svg_1, 2);
  var div_5 = sibling(div_4, 2);
  reset(div_3);
  next(2);
  reset(div);
  template_effect(
    ($0, $1, $2, $3, $4, $5, $6) => {
      attributes = set_attributes(div, attributes, { role: "status", ...restProps, class: $0 });
      set_class(div_1, 1, $1);
      set_class(div_2, 1, $2);
      set_class(div_3, 1, $3);
      set_class(svg_1, 0, $4);
      set_class(div_4, 1, $5);
      set_class(div_5, 1, $6);
    },
    [
      () => wrapper({ class: clsx_default($$props.class) }),
      () => clsx2(line2({ class: "mx-auto mb-2.5 h-2.5 max-w-[640px]" })),
      () => clsx2(line2({ class: "mx-auto h-2.5 max-w-[540px]" })),
      () => clsx2(subContent()),
      () => clsx2(svg()),
      () => clsx2(line1({ class: "me-3 h-2.5 w-20" })),
      () => clsx2(line1({ class: "h-2 w-24" }))
    ]
  );
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TestimonialPlaceholder = hmr(TestimonialPlaceholder, () => TestimonialPlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TestimonialPlaceholder[HMR].source;
    set(TestimonialPlaceholder[HMR].source, module.default[HMR].original);
  });
}
var TestimonialPlaceholder_default = TestimonialPlaceholder;

// node_modules/flowbite-svelte/dist/skeleton/TextPlaceholder.svelte
TextPlaceholder[FILENAME] = "node_modules/flowbite-svelte/dist/skeleton/TextPlaceholder.svelte";
var root71 = add_locations(from_html(`<div><div><div></div> <div></div> <div></div></div> <div><div></div> <div></div> <div></div></div> <div><div></div> <div></div> <div></div></div> <div><div></div> <div></div> <div></div></div> <div><div></div> <div></div> <div></div></div> <div><div></div> <div></div> <div></div></div> <span class="sr-only">Loading...</span></div>`), TextPlaceholder[FILENAME], [
  [
    14,
    0,
    [
      [
        15,
        2,
        [[16, 4], [17, 4], [18, 4]]
      ],
      [
        20,
        2,
        [[21, 4], [22, 4], [23, 4]]
      ],
      [
        25,
        2,
        [[26, 4], [27, 4], [28, 4]]
      ],
      [
        30,
        2,
        [[31, 4], [32, 4], [33, 4]]
      ],
      [
        35,
        2,
        [[36, 4], [37, 4], [38, 4]]
      ],
      [
        40,
        2,
        [[41, 4], [42, 4], [43, 4]]
      ],
      [45, 2]
    ]
  ]
]);
function TextPlaceholder($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TextPlaceholder);
  let size = prop($$props, "size", 3, "sm"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "size",
      "class"
    ],
    "restProps"
  );
  const $$d = user_derived(() => textPlaceholder({ size: size() })), baseWrapper = user_derived(() => {
    let {
      baseWrapper: $$1,
      divWrapper: $$2,
      lineA: $$3,
      lineB: $$4
    } = get($$d);
    return $$1;
  }), divWrapper = user_derived(() => {
    let {
      baseWrapper: $$1,
      divWrapper: $$2,
      lineA: $$3,
      lineB: $$4
    } = get($$d);
    return $$2;
  }), lineA = user_derived(() => {
    let {
      baseWrapper: $$1,
      divWrapper: $$2,
      lineA: $$3,
      lineB: $$4
    } = get($$d);
    return $$3;
  }), lineB = user_derived(() => {
    let {
      baseWrapper: $$1,
      divWrapper: $$2,
      lineA: $$3,
      lineB: $$4
    } = get($$d);
    return $$4;
  });
  var div = root71();
  let attributes;
  var div_1 = child(div);
  var div_2 = child(div_1);
  var div_3 = sibling(div_2, 2);
  var div_4 = sibling(div_3, 2);
  reset(div_1);
  var div_5 = sibling(div_1, 2);
  var div_6 = child(div_5);
  var div_7 = sibling(div_6, 2);
  var div_8 = sibling(div_7, 2);
  reset(div_5);
  var div_9 = sibling(div_5, 2);
  var div_10 = child(div_9);
  var div_11 = sibling(div_10, 2);
  var div_12 = sibling(div_11, 2);
  reset(div_9);
  var div_13 = sibling(div_9, 2);
  var div_14 = child(div_13);
  var div_15 = sibling(div_14, 2);
  var div_16 = sibling(div_15, 2);
  reset(div_13);
  var div_17 = sibling(div_13, 2);
  var div_18 = child(div_17);
  var div_19 = sibling(div_18, 2);
  var div_20 = sibling(div_19, 2);
  reset(div_17);
  var div_21 = sibling(div_17, 2);
  var div_22 = child(div_21);
  var div_23 = sibling(div_22, 2);
  var div_24 = sibling(div_23, 2);
  reset(div_21);
  next(2);
  reset(div);
  template_effect(
    ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24) => {
      attributes = set_attributes(div, attributes, { role: "status", ...restProps, class: $0 });
      set_class(div_1, 1, $1);
      set_class(div_2, 1, $2);
      set_class(div_3, 1, $3);
      set_class(div_4, 1, $4);
      set_class(div_5, 1, $5);
      set_class(div_6, 1, $6);
      set_class(div_7, 1, $7);
      set_class(div_8, 1, $8);
      set_class(div_9, 1, $9);
      set_class(div_10, 1, $10);
      set_class(div_11, 1, $11);
      set_class(div_12, 1, $12);
      set_class(div_13, 1, $13);
      set_class(div_14, 1, $14);
      set_class(div_15, 1, $15);
      set_class(div_16, 1, $16);
      set_class(div_17, 1, $17);
      set_class(div_18, 1, $18);
      set_class(div_19, 1, $19);
      set_class(div_20, 1, $20);
      set_class(div_21, 1, $21);
      set_class(div_22, 1, $22);
      set_class(div_23, 1, $23);
      set_class(div_24, 1, $24);
    },
    [
      () => get(baseWrapper)({ class: clsx_default($$props.class) }),
      () => clsx2(get(divWrapper)({ class: "w-full" })),
      () => clsx2(get(lineA)({ class: "h-2.5 w-32" })),
      () => clsx2(get(lineB)({ class: "h-2.5 w-24" })),
      () => clsx2(get(lineB)({ class: "h-2.5 w-full" })),
      () => clsx2(get(divWrapper)({ class: "w-11/12" })),
      () => clsx2(get(lineA)({ class: "h-2.5 w-full" })),
      () => clsx2(get(lineB)({ class: "h-2.5 w-full" })),
      () => clsx2(get(lineB)({ class: "h-2.5 w-24" })),
      () => clsx2(get(divWrapper)({ class: "w-9/12" })),
      () => clsx2(get(lineB)({ class: "h-2.5 w-full" })),
      () => clsx2(get(lineA)({ class: "h-2.5 w-80" })),
      () => clsx2(get(lineB)({ class: "h-2.5 w-full" })),
      () => clsx2(get(divWrapper)({ class: "w-11/12" })),
      () => clsx2(get(lineA)({ class: "h-2.5 w-full" })),
      () => clsx2(get(lineB)({ class: "h-2.5 w-full" })),
      () => clsx2(get(lineB)({ class: "h-2.5 w-24" })),
      () => clsx2(get(divWrapper)({ class: "w-10/12" })),
      () => clsx2(get(lineB)({ class: "h-2.5 w-32" })),
      () => clsx2(get(lineB)({ class: "h-2.5 w-24" })),
      () => clsx2(get(lineA)({ class: "h-2.5 w-full" })),
      () => clsx2(get(divWrapper)({ class: "w-8/12" })),
      () => clsx2(get(lineB)({ class: "h-2.5 w-full" })),
      () => clsx2(get(lineA)({ class: "h-2.5 w-80" })),
      () => clsx2(get(lineB)({ class: "h-2.5 w-full" }))
    ]
  );
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TextPlaceholder = hmr(TextPlaceholder, () => TextPlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TextPlaceholder[HMR].source;
    set(TextPlaceholder[HMR].source, module.default[HMR].original);
  });
}
var TextPlaceholder_default = TextPlaceholder;

// node_modules/flowbite-svelte/dist/skeleton/VideoPlaceholder.svelte
VideoPlaceholder[FILENAME] = "node_modules/flowbite-svelte/dist/skeleton/VideoPlaceholder.svelte";
var root72 = add_locations(from_html(`<div role="status"><svg width="48" height="48" class="text-gray-200 dark:text-gray-600" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" fill="currentColor" viewBox="0 0 384 512"><path d="M361 215C375.3 223.8 384 239.3 384 256C384 272.7 375.3 288.2 361 296.1L73.03 472.1C58.21 482 39.66 482.4 24.52 473.9C9.377 465.4 0 449.4 0 432V80C0 62.64 9.377 46.63 24.52 38.13C39.66 29.64 58.21 29.99 73.03 39.04L361 215z"></path></svg> <span class="sr-only">Loading...</span></div>`), VideoPlaceholder[FILENAME], [
  [
    10,
    0,
    [[11, 2, [[12, 4]]], [14, 2]]
  ]
]);
function VideoPlaceholder($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, VideoPlaceholder);
  let size = prop($$props, "size", 3, "sm");
  const base = user_derived(() => videoPlaceholder({
    size: size(),
    class: clsx_default($$props.class)
  }));
  var div = root72();
  template_effect(() => set_class(div, 1, clsx2(get(base))));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  VideoPlaceholder = hmr(VideoPlaceholder, () => VideoPlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VideoPlaceholder[HMR].source;
    set(VideoPlaceholder[HMR].source, module.default[HMR].original);
  });
}
var VideoPlaceholder_default = VideoPlaceholder;

// node_modules/flowbite-svelte/dist/skeleton/WidgetPlaceholder.svelte
WidgetPlaceholder[FILENAME] = "node_modules/flowbite-svelte/dist/skeleton/WidgetPlaceholder.svelte";
var root73 = add_locations(from_html(`<div role="status"><div></div> <div></div> <div><div></div> <div></div> <div></div> <div></div> <div></div> <div></div> <div></div></div> <span class="sr-only">Loading...</span></div>`), WidgetPlaceholder[FILENAME], [
  [
    10,
    0,
    [
      [11, 2],
      [12, 2],
      [
        13,
        2,
        [
          [14, 4],
          [15, 4],
          [16, 4],
          [17, 4],
          [18, 4],
          [19, 4],
          [20, 4]
        ]
      ],
      [22, 2]
    ]
  ]
]);
function WidgetPlaceholder($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, WidgetPlaceholder);
  const { base, wrapper, vLine, hLine } = widgetPlaceholder({});
  var div = root73();
  var div_1 = child(div);
  var div_2 = sibling(div_1, 2);
  var div_3 = sibling(div_2, 2);
  var div_4 = child(div_3);
  var div_5 = sibling(div_4, 2);
  var div_6 = sibling(div_5, 2);
  var div_7 = sibling(div_6, 2);
  var div_8 = sibling(div_7, 2);
  var div_9 = sibling(div_8, 2);
  var div_10 = sibling(div_9, 2);
  reset(div_3);
  next(2);
  reset(div);
  template_effect(
    ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) => {
      set_class(div, 1, $0);
      set_class(div_1, 1, $1);
      set_class(div_2, 1, $2);
      set_class(div_3, 1, $3);
      set_class(div_4, 1, $4);
      set_class(div_5, 1, $5);
      set_class(div_6, 1, $6);
      set_class(div_7, 1, $7);
      set_class(div_8, 1, $8);
      set_class(div_9, 1, $9);
      set_class(div_10, 1, $10);
    },
    [
      () => clsx2(base({ class: clsx_default($$props.class) })),
      () => clsx2(hLine({ class: "mb-2.5 h-2.5 w-32" })),
      () => clsx2(hLine({ class: "mb-10 h-2 w-48" })),
      () => clsx2(wrapper()),
      () => clsx2(vLine({ class: "h-72" })),
      () => clsx2(vLine({ class: "h-56" })),
      () => clsx2(vLine({ class: "h-72" })),
      () => clsx2(vLine({ class: "h-64" })),
      () => clsx2(vLine({ class: "h-80" })),
      () => clsx2(vLine({ class: "h-72" })),
      () => clsx2(vLine({ class: "h-80" }))
    ]
  );
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WidgetPlaceholder = hmr(WidgetPlaceholder, () => WidgetPlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WidgetPlaceholder[HMR].source;
    set(WidgetPlaceholder[HMR].source, module.default[HMR].original);
  });
}
var WidgetPlaceholder_default = WidgetPlaceholder;

// node_modules/flowbite-svelte/dist/skeleton/theme.js
var cardPlaceholder = ce({
  slots: {
    base: "p-4 rounded-sm border border-gray-200 shadow-sm animate-pulse md:p-6 dark:border-gray-700",
    imageArea: "mb-4 flex h-48 items-center justify-center rounded-sm bg-gray-300 dark:bg-gray-700",
    imageIcon: "text-gray-200 dark:text-gray-600",
    line: "rounded-full bg-gray-200 dark:bg-gray-700",
    footerArea: "mt-4 flex items-center space-x-3 rtl:space-x-reverse"
  },
  variants: {
    size: {
      sm: { base: "max-w-sm" },
      md: { base: "max-w-md" },
      lg: { base: "max-w-lg" },
      xl: { base: "max-w-xl" },
      "2xl": { base: "max-w-2xl" }
    }
  }
});
var imagePlaceholder = ce({
  slots: {
    base: "space-y-8 animate-pulse md:space-y-0 md:space-x-8 rtl:space-x-reverse md:flex md:items-center",
    image: "flex w-full items-center justify-center rounded-sm bg-gray-300 sm:w-96 dark:bg-gray-700",
    svg: "text-gray-200",
    content: "w-full",
    line: "rounded-full bg-gray-200 dark:bg-gray-700"
  },
  variants: {
    size: {
      sm: {
        image: "h-32",
        content: "space-y-2"
      },
      md: {
        image: "h-48",
        content: "space-y-3"
      },
      lg: {
        image: "h-64",
        content: "space-y-4"
      }
    },
    rounded: {
      none: {
        image: "rounded-none",
        line: "rounded-none"
      },
      sm: {
        image: "rounded-xs",
        line: "rounded-xs"
      },
      md: {
        image: "rounded-sm",
        line: "rounded-sm"
      },
      lg: {
        image: "rounded-lg",
        line: "rounded-lg"
      },
      full: {
        image: "rounded-full",
        line: "rounded-full"
      }
    }
  }
});
var listPlaceholder = ce({
  slots: {
    base: "p-4 space-y-4 max-w-md rounded-sm border border-gray-200 divide-y divide-gray-200 shadow-sm animate-pulse dark:divide-gray-700 md:p-6 dark:border-gray-700",
    item: "flex items-center justify-between",
    itemContent: "",
    itemTitle: "mb-2.5 h-2.5 w-24 rounded-full bg-gray-300 dark:bg-gray-600",
    itemSubtitle: "h-2 w-32 rounded-full bg-gray-200 dark:bg-gray-700",
    itemExtra: "h-2.5 w-12 rounded-full bg-gray-300 dark:bg-gray-700"
  },
  variants: {
    size: {
      sm: {
        base: "p-3 space-y-3 max-w-sm md:p-4",
        itemTitle: "mb-2 h-2 w-20",
        itemSubtitle: "h-1.5 w-28",
        itemExtra: "h-2 w-10"
      },
      md: {},
      // default size
      lg: {
        base: "p-5 space-y-5 max-w-lg md:p-7",
        itemTitle: "mb-3 h-3 w-28",
        itemSubtitle: "h-2.5 w-36",
        itemExtra: "h-3 w-14"
      }
    },
    rounded: {
      none: { base: "rounded-none" },
      sm: { base: "rounded-xs" },
      md: { base: "rounded-sm" },
      lg: { base: "rounded-lg" },
      full: { base: "rounded-full p-8 md:p-16" }
    }
  }
});
var skeleton = ce({
  slots: {
    wrapper: "animate-pulse",
    line: "rounded-full bg-gray-200 dark:bg-gray-700"
  },
  variants: {
    size: {
      sm: {
        wrapper: "max-w-sm"
      },
      md: {
        wrapper: "max-w-md"
      },
      lg: {
        wrapper: "max-w-lg"
      },
      xl: {
        wrapper: "max-w-xl"
      },
      "2xl": {
        wrapper: "max-w-2xl"
      }
    }
  }
});
var testimonialPlaceholder = ce({
  slots: {
    wrapper: "animate-pulse",
    line1: "rounded-full bg-gray-200 dark:bg-gray-700",
    line2: "rounded-full bg-gray-300 dark:bg-gray-700",
    svg: "me-2 h-10 w-10 text-gray-200 dark:text-gray-700",
    subContent: "mt-4 flex items-center justify-center"
  }
});
var textPlaceholder = ce({
  slots: {
    baseWrapper: "space-y-2.5 animate-pulse",
    divWrapper: "flex items-center space-x-2 rtl:space-x-reverse",
    lineA: "rounded-full bg-gray-200 dark:bg-gray-700",
    lineB: "rounded-full bg-gray-300 dark:bg-gray-600"
  },
  variants: {
    size: {
      sm: { baseWrapper: "max-w-sm" },
      md: { baseWrapper: "max-w-md" },
      lg: { baseWrapper: "max-w-lg" },
      xl: { baseWrapper: "max-w-xl" },
      "2xl": { baseWrapper: "max-w-2xl" }
    }
  }
});
var videoPlaceholder = ce({
  base: "flex justify-center items-center h-56 bg-gray-300 rounded-lg animate-pulse dark:bg-gray-700",
  variants: {
    size: {
      sm: "max-w-sm",
      md: "max-w-md",
      lg: "max-w-lg",
      xl: "max-w-xl",
      "2xl": "max-w-2xl"
    }
  }
});
var widgetPlaceholder = ce({
  slots: {
    base: "p-4 max-w-sm rounded-sm border border-gray-200 shadow-sm animate-pulse md:p-6 dark:border-gray-700",
    wrapper: "mt-4 flex items-baseline space-x-6 rtl:space-x-reverse",
    hLine: "rounded-full bg-gray-200 dark:bg-gray-700",
    vLine: "w-full rounded-t-lg bg-gray-200 dark:bg-gray-700"
  }
});

// node_modules/flowbite-svelte/dist/speed-dial/theme.js
var speed_dial = ce({
  slots: {
    base: "group bg-transparent",
    popper: "flex items-center gap-2 bg-transparent text-inherit"
  },
  variants: {
    vertical: {
      true: { popper: "flex-col" }
    }
  },
  defaultVariants: {
    vertical: false
  }
});
var speed_dial_button = ce({
  slots: {
    base: "w-[52px] h-[52px] shadow-xs p-0",
    span: "block mb-px text-xs font-medium"
  },
  variants: {
    textOutside: {
      true: {
        base: "relative",
        span: "absolute -start-12 top-1/2 mb-px text-sm font-medium -translate-y-1/2"
      }
    },
    tooltip: {
      true: {
        base: "flex-col"
      }
    }
  },
  defaultVariants: {}
});

// node_modules/flowbite-svelte/dist/speed-dial/SpeedDial.svelte
SpeedDial[FILENAME] = "node_modules/flowbite-svelte/dist/speed-dial/SpeedDial.svelte";
var root_146 = add_locations(from_html(`<div><!></div>`), SpeedDial[FILENAME], [[21, 2]]);
function SpeedDial($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SpeedDial);
  var $$ownership_validator = create_ownership_validator($$props);
  let placement = prop($$props, "placement", 3, "top"), pill = prop($$props, "pill", 3, true), tooltip2 = prop($$props, "tooltip", 3, "left"), trigger = prop($$props, "trigger", 3, "hover"), textOutside = prop($$props, "textOutside", 3, false), isOpen = prop($$props, "isOpen", 15, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "popperClass",
      "placement",
      "pill",
      "tooltip",
      "trigger",
      "textOutside",
      "class",
      "isOpen"
    ],
    "restProps"
  );
  setContext("speed-dial", {
    pill: pill(),
    tooltip: tooltip2(),
    textOutside: textOutside()
  });
  let vertical = user_derived(() => strict_equals(getSideAxis(placement()), "y"));
  let $$d = user_derived(() => speed_dial({ vertical: get(vertical) })), base = user_derived(() => {
    let { base: $$1, popper: $$2 } = get($$d);
    return $$1;
  }), popper = user_derived(() => {
    let { base: $$1, popper: $$2 } = get($$d);
    return $$2;
  });
  var fragment = comment();
  var node = first_child(fragment);
  const expression = user_derived(() => get(base)({ class: clsx_default($$props.class) }));
  {
    $$ownership_validator.binding("isOpen", Popper_default, isOpen);
    Popper_default(node, spread_props(() => restProps, {
      get trigger() {
        return trigger();
      },
      arrow: false,
      get placement() {
        return placement();
      },
      get class() {
        return get(expression);
      },
      get isOpen() {
        return isOpen();
      },
      set isOpen($$value) {
        isOpen($$value);
      },
      children: wrap_snippet(SpeedDial, ($$anchor2, $$slotProps) => {
        var div = root_146();
        var node_1 = child(div);
        snippet(node_1, () => $$props.children);
        reset(div);
        template_effect(($0) => set_class(div, 1, $0), [
          () => clsx2(get(popper)({ class: $$props.popperClass }))
        ]);
        append($$anchor2, div);
      }),
      $$slots: { default: true }
    }));
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SpeedDial = hmr(SpeedDial, () => SpeedDial[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SpeedDial[HMR].source;
    set(SpeedDial[HMR].source, module.default[HMR].original);
  });
}
var SpeedDial_default = SpeedDial;

// node_modules/flowbite-svelte/dist/tooltip/theme.js
var tooltip = ce({
  slots: {
    base: "absolute px-3 py-2 rounded-lg text-sm z-50 pointer-events-none",
    arrowBase: ""
  },
  variants: {
    type: {
      light: { base: "bg-white text-gray-800 dark:bg-white dark:text-gray-800 border border-gray-200 dark:border-gray-200" },
      auto: { base: "bg-white text-gray-800 dark:bg-gray-800 dark:text-white border border-gray-200 dark:border-gray-700" },
      dark: { base: "bg-gray-800 text-white dark:bg-gray-800 dark:text-white dark:border dark:border-gray-700" }
    },
    color: {
      // default: { base: "bg-gray-800 dark:bg-gray-300 dark:text-gray-800" },
      primary: { base: "bg-primary-600 dark:bg-primary-600" },
      secondary: { base: "bg-secondary-600 dark:bg-secondary-600" },
      gray: { base: "bg-gray-600 dark:bg-gray-600" },
      red: { base: "bg-red-600 dark:bg-red-600" },
      orange: { base: "bg-orange-600 dark:bg-orange-600" },
      amber: { base: "bg-amber-600 dark:bg-amber-600" },
      yellow: { base: "bg-yellow-400 dark:bg-yellow-400" },
      lime: { base: "bg-lime-600 dark:bg-lime-600" },
      green: { base: "bg-green-600 dark:bg-green-600" },
      emerald: { base: "bg-emerald-600 dark:bg-emerald-600" },
      teal: { base: "bg-teal-600 dark:bg-teal-600" },
      cyan: { base: "bg-cyan-600 dark:bg-cyan-600" },
      sky: { base: "bg-sky-600 dark:bg-sky-600" },
      blue: { base: "bg-blue-600 dark:bg-blue-600" },
      indigo: { base: "bg-indigo-600 dark:bg-indigo-600" },
      violet: { base: "bg-violet-600 dark:bg-violet-600" },
      purple: { base: "bg-purple-600 dark:bg-purple-600" },
      fuchsia: { base: "bg-fuchsia-600 dark:bg-fuchsia-600" },
      pink: { base: "bg-pink-600 dark:bg-pink-600" },
      rose: { base: "bg-rose-800 dark:bg-rose-800" }
    }
  }
});

// node_modules/flowbite-svelte/dist/tooltip/Tooltip.svelte
Tooltip[FILENAME] = "node_modules/flowbite-svelte/dist/tooltip/Tooltip.svelte";
var root_147 = add_locations(from_html(`<div class="pointer-events-none"><!></div>`), Tooltip[FILENAME], [[22, 2]]);
function Tooltip($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Tooltip);
  var $$ownership_validator = create_ownership_validator($$props);
  let type = prop($$props, "type", 3, "dark"), color = prop($$props, "color", 3, void 0), trigger = prop($$props, "trigger", 3, "hover"), arrow2 = prop($$props, "arrow", 3, true), placement = prop($$props, "placement", 3, "top"), isOpen = prop($$props, "isOpen", 15, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "type",
      "color",
      "trigger",
      "arrow",
      "children",
      "placement",
      "onbeforetoggle",
      "class",
      "isOpen"
    ],
    "restProps"
  );
  let $$d = user_derived(() => tooltip({ color: color(), type: type() })), base = user_derived(() => {
    let { base: $$1 } = get($$d);
    return $$1;
  });
  function onbeforetoggle(ev) {
    var _a;
    if (ev.target instanceof HTMLElement) {
      ev.target.querySelectorAll('a, button, input, textarea, select, details, [tabindex], [contenteditable="true"]').forEach((element2) => element2.setAttribute("tabindex", "-1"));
    }
    (_a = $$props.onbeforetoggle) == null ? void 0 : _a.call($$props, ev);
  }
  var fragment = comment();
  var node = first_child(fragment);
  const expression = user_derived(() => get(base)({ class: clsx_default($$props.class) }));
  {
    $$ownership_validator.binding("isOpen", Popper_default, isOpen);
    Popper_default(node, spread_props(() => restProps, {
      get placement() {
        return placement();
      },
      get trigger() {
        return trigger();
      },
      get arrow() {
        return arrow2();
      },
      get class() {
        return get(expression);
      },
      onbeforetoggle,
      get isOpen() {
        return isOpen();
      },
      set isOpen($$value) {
        isOpen($$value);
      },
      children: wrap_snippet(Tooltip, ($$anchor2, $$slotProps) => {
        var div = root_147();
        var node_1 = child(div);
        snippet(node_1, () => $$props.children);
        reset(div);
        append($$anchor2, div);
      }),
      $$slots: { default: true }
    }));
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tooltip = hmr(Tooltip, () => Tooltip[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tooltip[HMR].source;
    set(Tooltip[HMR].source, module.default[HMR].original);
  });
}
var Tooltip_default = Tooltip;

// node_modules/flowbite-svelte/dist/speed-dial/SpeedDialButton.svelte
SpeedDialButton[FILENAME] = "node_modules/flowbite-svelte/dist/speed-dial/SpeedDialButton.svelte";
var root_148 = add_locations(from_html(`<!> <span> </span>`, 1), SpeedDialButton[FILENAME], [[19, 2]]);
var root74 = add_locations(from_html(`<!> <!>`, 1), SpeedDialButton[FILENAME], []);
function SpeedDialButton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SpeedDialButton);
  const context = getContext("speed-dial");
  let name = prop($$props, "name", 3, ""), color = prop($$props, "color", 3, "light"), tooltip2 = prop($$props, "tooltip", 19, () => context.tooltip), pill = prop($$props, "pill", 19, () => context.pill), textOutside = prop($$props, "textOutside", 19, () => context.textOutside), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "name",
      "color",
      "tooltip",
      "pill",
      "textOutside",
      "textClass",
      "class"
    ],
    "restProps"
  );
  let $$d = user_derived(() => speed_dial_button({
    textOutside: textOutside(),
    tooltip: equals(tooltip2(), "none")
  })), base = user_derived(() => {
    let { base: $$1, span: $$2 } = get($$d);
    return $$1;
  }), span2 = user_derived(() => {
    let { base: $$1, span: $$2 } = get($$d);
    return $$2;
  });
  let spanClass = user_derived(() => strict_equals(tooltip2(), "none") ? get(span2)({ class: $$props.textClass }) : "sr-only");
  var fragment = root74();
  var node = first_child(fragment);
  const expression = user_derived(() => get(base)({ class: clsx_default($$props.class) }));
  Button_default(node, spread_props(
    {
      get pill() {
        return pill();
      },
      get color() {
        return color();
      }
    },
    () => restProps,
    {
      get class() {
        return get(expression);
      },
      children: wrap_snippet(SpeedDialButton, ($$anchor2, $$slotProps) => {
        var fragment_1 = root_148();
        var node_1 = first_child(fragment_1);
        snippet(node_1, () => $$props.children ?? noop);
        var span_1 = sibling(node_1, 2);
        var text2 = child(span_1, true);
        reset(span_1);
        template_effect(() => {
          set_class(span_1, 1, clsx2(get(spanClass)));
          set_text(text2, name());
        });
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    }
  ));
  var node_2 = sibling(node, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment_2 = comment();
      var node_3 = first_child(fragment_2);
      Tooltip_default(node_3, {
        get placement() {
          return tooltip2();
        },
        type: "dark",
        children: wrap_snippet(SpeedDialButton, ($$anchor3, $$slotProps) => {
          next();
          var text_1 = text();
          template_effect(() => set_text(text_1, name()));
          append($$anchor3, text_1);
        }),
        $$slots: { default: true }
      });
      append($$anchor2, fragment_2);
    };
    if_block(node_2, ($$render) => {
      if (strict_equals(tooltip2(), "none", false)) $$render(consequent);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SpeedDialButton = hmr(SpeedDialButton, () => SpeedDialButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SpeedDialButton[HMR].source;
    set(SpeedDialButton[HMR].source, module.default[HMR].original);
  });
}
var SpeedDialButton_default = SpeedDialButton;

// node_modules/flowbite-svelte/dist/speed-dial/SpeedDialTrigger.svelte
SpeedDialTrigger[FILENAME] = "node_modules/flowbite-svelte/dist/speed-dial/SpeedDialTrigger.svelte";
var moving_cross = wrap_snippet(SpeedDialTrigger, function($$anchor) {
  validate_snippet_args(...arguments);
  var svg = root_149();
  append($$anchor, svg);
});
var root_149 = add_locations(from_svg(`<svg aria-hidden="true" class="h-8 w-8 transition-transform group-hover:rotate-45" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>`), SpeedDialTrigger[FILENAME], [[17, 2, [[18, 4]]]]);
var root_324 = add_locations(from_html(`<!> <span class="sr-only"> </span>`, 1), SpeedDialTrigger[FILENAME], [[29, 4]]);
var root_79 = add_locations(from_html(`<!> <span class="sr-only"> </span>`, 1), SpeedDialTrigger[FILENAME], [[38, 4]]);
function SpeedDialTrigger($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SpeedDialTrigger);
  let name = prop($$props, "name", 3, "Open actions menu"), gradient = prop($$props, "gradient", 3, false), pill = prop($$props, "pill", 3, true), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "name",
      "gradient",
      "icon",
      "pill",
      "color",
      "class"
    ],
    "restProps"
  );
  const buttonProps = user_derived(() => ({
    pill: pill(),
    color: $$props.color,
    ...restProps,
    class: ["group p-3!", $$props.class]
  }));
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      GradientButton_default(node_1, spread_props(() => get(buttonProps), {
        children: wrap_snippet(SpeedDialTrigger, ($$anchor3, $$slotProps) => {
          var fragment_2 = root_324();
          var node_2 = first_child(fragment_2);
          {
            var consequent = ($$anchor4) => {
              var fragment_3 = comment();
              var node_3 = first_child(fragment_3);
              snippet(node_3, () => $$props.icon);
              append($$anchor4, fragment_3);
            };
            var alternate = ($$anchor4) => {
              moving_cross($$anchor4);
            };
            if_block(node_2, ($$render) => {
              if ($$props.icon) $$render(consequent);
              else $$render(alternate, false);
            });
          }
          var span2 = sibling(node_2, 2);
          var text2 = child(span2, true);
          reset(span2);
          template_effect(() => set_text(text2, name()));
          append($$anchor3, fragment_2);
        }),
        $$slots: { default: true }
      }));
      append($$anchor2, fragment_1);
    };
    var alternate_1 = ($$anchor2) => {
      var fragment_5 = comment();
      var node_4 = first_child(fragment_5);
      Button_default(node_4, spread_props(() => get(buttonProps), {
        children: wrap_snippet(SpeedDialTrigger, ($$anchor3, $$slotProps) => {
          var fragment_6 = root_79();
          var node_5 = first_child(fragment_6);
          {
            var consequent_2 = ($$anchor4) => {
              var fragment_7 = comment();
              var node_6 = first_child(fragment_7);
              snippet(node_6, () => $$props.icon);
              append($$anchor4, fragment_7);
            };
            var alternate_2 = ($$anchor4) => {
              moving_cross($$anchor4);
            };
            if_block(node_5, ($$render) => {
              if ($$props.icon) $$render(consequent_2);
              else $$render(alternate_2, false);
            });
          }
          var span_1 = sibling(node_5, 2);
          var text_1 = child(span_1, true);
          reset(span_1);
          template_effect(() => set_text(text_1, name()));
          append($$anchor3, fragment_6);
        }),
        $$slots: { default: true }
      }));
      append($$anchor2, fragment_5);
    };
    if_block(node, ($$render) => {
      if (gradient()) $$render(consequent_1);
      else $$render(alternate_1, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SpeedDialTrigger = hmr(SpeedDialTrigger, () => SpeedDialTrigger[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SpeedDialTrigger[HMR].source;
    set(SpeedDialTrigger[HMR].source, module.default[HMR].original);
  });
}
var SpeedDialTrigger_default = SpeedDialTrigger;

// node_modules/flowbite-svelte/dist/spinner/Spinner.svelte
Spinner[FILENAME] = "node_modules/flowbite-svelte/dist/spinner/Spinner.svelte";
var root75 = add_locations(from_svg(`<svg><path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"></path><path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"></path></svg>`), Spinner[FILENAME], [[11, 0, [[12, 2], [13, 2]]]]);
function Spinner($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Spinner);
  let color = prop($$props, "color", 3, "primary"), size = prop($$props, "size", 3, "8"), currentFill = prop($$props, "currentFill", 3, "currentFill"), currentColor = prop($$props, "currentColor", 3, "currentColor"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "color",
      "size",
      "class",
      "currentFill",
      "currentColor"
    ],
    "restProps"
  );
  let spinnerClass = user_derived(() => spinner({
    color: color(),
    size: size(),
    class: clsx_default($$props.class)
  }));
  var svg = root75();
  let attributes;
  var path = child(svg);
  var path_1 = sibling(path);
  reset(svg);
  template_effect(() => {
    attributes = set_attributes(svg, attributes, {
      ...restProps,
      role: "status",
      class: get(spinnerClass),
      viewBox: "0 0 100 101",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg"
    });
    set_attribute(path, "fill", currentColor());
    set_attribute(path_1, "fill", currentFill());
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Spinner = hmr(Spinner, () => Spinner[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Spinner[HMR].source;
    set(Spinner[HMR].source, module.default[HMR].original);
  });
}
var Spinner_default = Spinner;

// node_modules/flowbite-svelte/dist/spinner/theme.js
var spinner = ce({
  base: "inline-block animate-spin text-gray-300",
  variants: {
    color: {
      // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      primary: "fill-primary-600",
      secondary: "fill-secondary-600",
      gray: "fill-gray-600 dark:fill-gray-300",
      red: "fill-red-600",
      orange: "fill-orange-500",
      amber: "fill-amber-500",
      yellow: "fill-yellow-400",
      lime: "fill-lime-500",
      green: "fill-green-500",
      emerald: "fill-emerald-500",
      teal: "fill-teal-500",
      cyan: "fill-cyan-500",
      sky: "fill-sky-500",
      blue: "fill-blue-600",
      indigo: "fill-indigo-600",
      violet: "fill-violet-600",
      purple: "fill-purple-600",
      fuchsia: "fill-fuchsia-600",
      pink: "fill-pink-600",
      rose: "fill-rose-600"
    },
    size: {
      "4": "w-4 h-4",
      "5": "w-5 h-5",
      "6": "w-6 h-6",
      "8": "w-8 h-8",
      "10": "w-10 h-10",
      "12": "w-12 h-12",
      "16": "w-16 h-16"
    }
  },
  defaultVariants: {
    color: "primary",
    size: "8"
  }
});

// node_modules/flowbite-svelte/dist/stepindicator/StepIndicator.svelte
StepIndicator[FILENAME] = "node_modules/flowbite-svelte/dist/stepindicator/StepIndicator.svelte";
var root_150 = add_locations(from_html(`<h3 class="text-base font-semibold"> </h3>`), StepIndicator[FILENAME], [[51, 4]]);
var root_412 = add_locations(from_html(`<div></div>`), StepIndicator[FILENAME], [[59, 12]]);
var root_325 = add_locations(from_html(`<div class="relative h-full w-full"><div></div> <!></div>`), StepIndicator[FILENAME], [[56, 8, [[57, 10]]]]);
var root_67 = add_locations(from_html(`<div></div>`), StepIndicator[FILENAME], [[63, 8]]);
var root_710 = add_locations(from_html(`<div class="h-full w-full rounded-xs bg-gray-200 dark:bg-gray-700"></div>`), StepIndicator[FILENAME], [[65, 8]]);
var root76 = add_locations(from_html(`<div><!> <div></div></div>`), StepIndicator[FILENAME], [[49, 0, [[53, 2]]]]);
function StepIndicator($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, StepIndicator);
  let steps = prop($$props, "steps", 19, () => [
    "Step 1",
    "Step 2",
    "Step 3",
    "Step 4",
    "Step 5"
  ]), currentStep = prop($$props, "currentStep", 3, 1), size = prop($$props, "size", 3, "h-2.5"), color = prop($$props, "color", 3, "primary"), glow = prop($$props, "glow", 3, false), hideLabel = prop($$props, "hideLabel", 3, false), completedCustom = prop($$props, "completedCustom", 3, ""), currentCustom = prop($$props, "currentCustom", 3, ""), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "steps",
      "currentStep",
      "size",
      "color",
      "glow",
      "hideLabel",
      "completedCustom",
      "currentCustom",
      "class"
    ],
    "restProps"
  );
  const safeColor = color();
  const completedStepColors = {
    primary: "bg-primary-500 dark:bg-primary-900",
    secondary: "bg-secondary-500 dark:bg-secondary-900",
    gray: "bg-gray-400 dark:bg-gray-500",
    red: "bg-red-600 dark:bg-red-900",
    yellow: "bg-yellow-400 dark:bg-yellow-600",
    green: "bg-green-500 dark:bg-green-900",
    indigo: "bg-indigo-500 dark:bg-indigo-900",
    purple: "bg-purple-500 dark:bg-purple-900",
    pink: "bg-pink-500 dark:bg-pink-900",
    blue: "bg-blue-500 dark:bg-blue-900",
    custom: completedCustom()
  };
  const currentStepColors = {
    primary: "bg-primary-800 dark:bg-primary-400",
    secondary: "bg-secondary-800 dark:bg-secondary-400",
    gray: "bg-gray-700 dark:bg-gray-200",
    red: "bg-red-900 dark:bg-red-500",
    yellow: "bg-yellow-600 dark:bg-yellow-400",
    green: "bg-green-800 dark:bg-green-400",
    indigo: "bg-indigo-800 dark:bg-indigo-400",
    purple: "bg-purple-800 dark:bg-purple-400",
    pink: "bg-pink-800 dark:bg-pink-400",
    blue: "bg-blue-800 dark:bg-blue-400",
    custom: currentCustom()
  };
  let safeCurrentStep = user_derived(() => Math.max(1, Math.min(currentStep(), steps().length)));
  let currentStepLabel = user_derived(() => steps()[get(safeCurrentStep) - 1] ?? "Unknown Step");
  function getCompletedColor(colorKey) {
    return completedStepColors[colorKey];
  }
  function getCurrentColor(colorKey) {
    return currentStepColors[colorKey];
  }
  var div = root76();
  let attributes;
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var h3 = root_150();
      var text2 = child(h3, true);
      reset(h3);
      template_effect(() => set_text(text2, get(currentStepLabel)));
      append($$anchor2, h3);
    };
    if_block(node, ($$render) => {
      if (!hideLabel()) $$render(consequent);
    });
  }
  var div_1 = sibling(node, 2);
  each(div_1, 21, steps, index, ($$anchor2, step, i) => {
    var fragment = comment();
    var node_1 = first_child(fragment);
    {
      var consequent_2 = ($$anchor3) => {
        var div_2 = root_325();
        var div_3 = child(div_2);
        var node_2 = sibling(div_3, 2);
        {
          var consequent_1 = ($$anchor4) => {
            var div_4 = root_412();
            template_effect(($0) => set_class(div_4, 1, $0), [
              () => clsx2(twJoin("absolute -inset-1 rounded-xs opacity-30 blur-sm dark:opacity-25", getCurrentColor(safeColor)))
            ]);
            append($$anchor4, div_4);
          };
          if_block(node_2, ($$render) => {
            if (glow()) $$render(consequent_1);
          });
        }
        reset(div_2);
        template_effect(($0) => set_class(div_3, 1, $0), [
          () => clsx2(twJoin("relative h-full w-full rounded-xs", getCurrentColor(safeColor)))
        ]);
        append($$anchor3, div_2);
      };
      var alternate = ($$anchor3, $$elseif) => {
        {
          var consequent_3 = ($$anchor4) => {
            var div_5 = root_67();
            template_effect(($0) => set_class(div_5, 1, $0), [
              () => clsx2(twJoin("h-full w-full rounded-xs", getCompletedColor(safeColor)))
            ]);
            append($$anchor4, div_5);
          };
          var alternate_1 = ($$anchor4) => {
            var div_6 = root_710();
            append($$anchor4, div_6);
          };
          if_block(
            $$anchor3,
            ($$render) => {
              if (i < currentStep() - 1) $$render(consequent_3);
              else $$render(alternate_1, false);
            },
            $$elseif
          );
        }
      };
      if_block(node_1, ($$render) => {
        if (strict_equals(i, currentStep() - 1)) $$render(consequent_2);
        else $$render(alternate, false);
      });
    }
    append($$anchor2, fragment);
  });
  reset(div_1);
  reset(div);
  template_effect(
    ($0, $1) => {
      attributes = set_attributes(div, attributes, { ...restProps, class: $0 });
      set_class(div_1, 1, $1);
    },
    [
      () => twMerge("space-y-2 dark:text-white", $$props.class),
      () => clsx2(twJoin("flex w-full justify-between gap-2", size()))
    ]
  );
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  StepIndicator = hmr(StepIndicator, () => StepIndicator[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = StepIndicator[HMR].source;
    set(StepIndicator[HMR].source, module.default[HMR].original);
  });
}
var StepIndicator_default = StepIndicator;

// node_modules/flowbite-svelte/dist/tabs/TabItem.svelte
TabItem[FILENAME] = "node_modules/flowbite-svelte/dist/tabs/TabItem.svelte";
var on_click3 = (_, open) => open(true);
var root_326 = add_locations(from_html(`<div><div><!></div></div>`), TabItem[FILENAME], [[54, 4, [[55, 6]]]]);
var root77 = add_locations(from_html(`<li><button type="button" role="tab"><!></button> <!></li>`), TabItem[FILENAME], [[33, 0, [[34, 2]]]]);
function TabItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TabItem);
  let open = prop($$props, "open", 7, false), title = prop($$props, "title", 3, "Tab title"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "titleSlot",
      "open",
      "title",
      "activeClass",
      "inactiveClass",
      "class",
      "disabled",
      "tabStyle"
    ],
    "restProps"
  );
  const ctx = getContext("ctx");
  let compoTabStyle = user_derived(() => $$props.tabStyle ? $$props.tabStyle : ctx.tabStyle || "full");
  const $$d = user_derived(() => tabs({
    tabStyle: get(compoTabStyle),
    hasDivider: true
  })), active = user_derived(() => {
    let { active: $$1, inactive: $$2 } = get($$d);
    return $$1;
  }), inactive = user_derived(() => {
    let { active: $$1, inactive: $$2 } = get($$d);
    return $$2;
  });
  let selected = ctx.selected ?? writable();
  const tabId = `tab-${Math.random().toString(36).substring(2)}`;
  function init(node) {
    selected.set(node);
    const destroy = selected.subscribe((x) => {
      if (strict_equals(x, node, false)) {
        open(false);
      }
    });
    return { destroy };
  }
  const $$d_1 = user_derived(() => tabItem({ open: open(), disabled: $$props.disabled })), base = user_derived(() => {
    let { base: $$3, button: $$4, content: $$5 } = get($$d_1);
    return $$3;
  }), button2 = user_derived(() => {
    let { base: $$3, button: $$4, content: $$5 } = get($$d_1);
    return $$4;
  }), content = user_derived(() => {
    let { base: $$3, button: $$4, content: $$5 } = get($$d_1);
    return $$5;
  });
  var li = root77();
  let attributes;
  var button_1 = child(li);
  button_1.__click = [on_click3, open];
  set_attribute(button_1, "id", tabId);
  var node_1 = child(button_1);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_2 = first_child(fragment);
      snippet(node_2, () => $$props.titleSlot);
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var text2 = text();
      template_effect(() => set_text(text2, title()));
      append($$anchor2, text2);
    };
    if_block(node_1, ($$render) => {
      if ($$props.titleSlot) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  reset(button_1);
  var node_3 = sibling(button_1, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var div = root_326();
      var div_1 = child(div);
      var node_4 = child(div_1);
      snippet(node_4, () => $$props.children);
      reset(div_1);
      action(div_1, ($$node) => init == null ? void 0 : init($$node));
      reset(div);
      template_effect(($0) => set_class(div, 1, $0), [() => clsx2(get(content)())]);
      append($$anchor2, div);
    };
    if_block(node_3, ($$render) => {
      if (open() && $$props.children) $$render(consequent_1);
    });
  }
  reset(li);
  template_effect(
    ($0, $1) => {
      attributes = set_attributes(li, attributes, {
        ...restProps,
        class: $0,
        role: "presentation"
      });
      set_attribute(button_1, "aria-controls", ctx.panelId);
      set_attribute(button_1, "aria-selected", open());
      button_1.disabled = $$props.disabled;
      set_class(button_1, 1, $1);
    },
    [
      () => get(base)({ class: clsx_default($$props.class) }),
      () => clsx2(get(button2)({
        class: open() ? $$props.activeClass ?? get(active)() : $$props.inactiveClass ?? get(inactive)()
      }))
    ]
  );
  append($$anchor, li);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TabItem = hmr(TabItem, () => TabItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TabItem[HMR].source;
    set(TabItem[HMR].source, module.default[HMR].original);
  });
}
var TabItem_default = TabItem;
delegate(["click"]);

// node_modules/flowbite-svelte/dist/tabs/Tabs.svelte
Tabs[FILENAME] = "node_modules/flowbite-svelte/dist/tabs/Tabs.svelte";
var root_151 = add_locations(from_html(`<div></div>`), Tabs[FILENAME], [[38, 2]]);
var root78 = add_locations(from_html(`<ul><!></ul> <!> <div role="tabpanel"></div>`, 1), Tabs[FILENAME], [[34, 0], [40, 0]]);
function Tabs($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Tabs);
  let tabStyle = prop($$props, "tabStyle", 3, "none"), divider = prop($$props, "divider", 3, true), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "tabStyle",
      "ulClass",
      "contentClass",
      "divider"
    ],
    "restProps"
  );
  const $$d = user_derived(() => tabs({
    tabStyle: tabStyle(),
    hasDivider: divider()
  })), base = user_derived(() => {
    let { base: $$1, content: $$2, divider: $$3 } = get($$d);
    return $$1;
  }), content = user_derived(() => {
    let { base: $$1, content: $$2, divider: $$3 } = get($$d);
    return $$2;
  }), dividerClass = user_derived(() => {
    let { base: $$1, content: $$2, divider: $$3 } = get($$d);
    return $$3;
  });
  const panelId = `tab-panel-${Math.random().toString(36).substring(2)}`;
  const ctx = {
    get tabStyle() {
      return tabStyle();
    },
    selected: writable(),
    panelId
    // Add panelId to the context
  };
  let dividerBool = user_derived(() => ["full", "pill"].includes(tabStyle()) ? false : divider());
  setContext("ctx", ctx);
  function init(node) {
    const destroy = ctx.selected.subscribe((x) => {
      if (x) node.replaceChildren(x);
    });
    return { destroy };
  }
  var fragment = root78();
  var ul = first_child(fragment);
  let attributes;
  var node_1 = child(ul);
  snippet(node_1, () => $$props.children);
  reset(ul);
  var node_2 = sibling(ul, 2);
  {
    var consequent = ($$anchor2) => {
      var div = root_151();
      template_effect(($0) => set_class(div, 1, $0), [
        () => clsx2(get(dividerClass)())
      ]);
      append($$anchor2, div);
    };
    if_block(node_2, ($$render) => {
      if (get(dividerBool)) $$render(consequent);
    });
  }
  var div_1 = sibling(node_2, 2);
  set_attribute(div_1, "id", panelId);
  set_attribute(div_1, "aria-labelledby", panelId);
  action(div_1, ($$node) => init == null ? void 0 : init($$node));
  template_effect(
    ($0, $1) => {
      attributes = set_attributes(ul, attributes, { role: "tablist", ...restProps, class: $0 });
      set_class(div_1, 1, $1);
    },
    [
      () => get(base)({ class: $$props.ulClass }),
      () => clsx2(get(content)({ class: $$props.contentClass }))
    ]
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tabs = hmr(Tabs, () => Tabs[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tabs[HMR].source;
    set(Tabs[HMR].source, module.default[HMR].original);
  });
}
var Tabs_default = Tabs;

// node_modules/flowbite-svelte/dist/tabs/theme.js
var tabs = ce({
  slots: {
    base: "flex space-x-2 rtl:space-x-reverse",
    content: "p-4 bg-gray-50 rounded-lg dark:bg-gray-800 mt-4",
    divider: "h-px bg-gray-200 dark:bg-gray-700",
    active: "p-4 text-primary-600 bg-gray-100 rounded-t-lg dark:bg-gray-800 dark:text-primary-500",
    inactive: "p-4 text-gray-500 rounded-t-lg hover:text-gray-600 hover:bg-gray-50 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-gray-300"
  },
  variants: {
    tabStyle: {
      full: {
        active: "p-4 w-full rounded-none group-first:rounded-s-lg group-last:rounded-e-lg text-gray-900 bg-gray-100 focus:ring-4 focus:ring-primary-300 focus:outline-hidden dark:bg-gray-700 dark:text-white",
        inactive: "p-4 w-full rounded-none group-first:rounded-s-lg group-last:rounded-e-lg text-gray-500 dark:text-gray-400 bg-white hover:text-gray-700 hover:bg-gray-50 focus:ring-4 focus:ring-primary-300 focus:outline-hidden dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700"
      },
      pill: {
        active: "py-3 px-4 text-white bg-primary-600 rounded-lg",
        inactive: "py-3 px-4 text-gray-500 rounded-lg hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-white"
      },
      underline: {
        base: "-mb-px",
        active: "p-4 text-primary-600 border-b-2 border-primary-600 dark:text-primary-500 dark:border-primary-500 bg-transparent",
        inactive: "p-4 border-b-2 border-transparent hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300 text-gray-500 dark:text-gray-400 bg-transparent"
      },
      none: {
        active: "",
        inactive: ""
      }
    },
    hasDivider: {
      true: {}
    }
  },
  compoundVariants: [
    {
      tabStyle: ["full", "pill"],
      hasDivider: true,
      class: {
        divider: "hidden"
      }
    }
  ],
  defaultVariants: {
    tabStyle: "none",
    hasDivider: true
  }
});
var tabItem = ce({
  slots: {
    base: "group focus-within:z-10",
    button: "inline-block text-sm font-medium text-center disabled:cursor-not-allowed",
    content: "hidden"
  },
  variants: {
    open: {
      true: {
        button: "active"
      }
    },
    disabled: {
      true: {
        button: "cursor-not-allowed"
      }
    }
  },
  compoundVariants: [
    {
      open: true,
      class: {
        button: ""
        // We'll merge this with activeClasses from context
      }
    },
    {
      open: false,
      class: {
        button: ""
        // We'll merge this with inactiveClasses from context
      }
    }
  ],
  defaultVariants: {
    open: false,
    disabled: false
  }
});

// node_modules/flowbite-svelte/dist/table/Table.svelte
Table[FILENAME] = "node_modules/flowbite-svelte/dist/table/Table.svelte";
var root_228 = add_locations(from_html(`<!> <!>`, 1), Table[FILENAME], []);
var root79 = add_locations(from_html(`<div><table><!><!><!></table></div>`), Table[FILENAME], [[32, 0, [[33, 2]]]]);
function Table($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Table);
  let divClass = prop($$props, "divClass", 3, "relative overflow-x-auto"), border = prop($$props, "border", 3, true), color = prop($$props, "color", 3, "default"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "footerSlot",
      "captionSlot",
      "items",
      "divClass",
      "striped",
      "hoverable",
      "border",
      "shadow",
      "color",
      "class"
    ],
    "restProps"
  );
  const $$d = user_derived(() => table({ color: color(), shadow: $$props.shadow })), base = user_derived(() => {
    let { base: $$1, table: $$2 } = get($$d);
    return $$1;
  }), table2 = user_derived(() => {
    let { base: $$1, table: $$2 } = get($$d);
    return $$2;
  });
  let tableCtx = {
    get striped() {
      return $$props.striped;
    },
    get hoverable() {
      return $$props.hoverable;
    },
    get border() {
      return border();
    },
    get color() {
      return color();
    }
  };
  setContext("tableCtx", tableCtx);
  let headItems = user_derived(() => $$props.items && $$props.items.length > 0 ? Object.keys($$props.items[0]).map((key) => ({
    text: key.charAt(0).toUpperCase() + key.slice(1)
  })) : []);
  let bodyItems = user_derived(() => $$props.items && $$props.items.length > 0 ? $$props.items.map((item) => Object.values(item)) : []);
  var div = root79();
  var table_1 = child(div);
  let attributes;
  var node = child(table_1);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.captionSlot);
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if ($$props.captionSlot) $$render(consequent);
    });
  }
  var node_2 = sibling(node);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = root_228();
      var node_3 = first_child(fragment_1);
      TableHead_default(node_3, {
        get headItems() {
          return get(headItems);
        }
      });
      var node_4 = sibling(node_3, 2);
      TableBody_default(node_4, {
        get bodyItems() {
          return get(bodyItems);
        }
      });
      append($$anchor2, fragment_1);
    };
    var alternate = ($$anchor2, $$elseif) => {
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_5 = first_child(fragment_2);
          snippet(node_5, () => $$props.children);
          append($$anchor3, fragment_2);
        };
        if_block(
          $$anchor2,
          ($$render) => {
            if ($$props.children) $$render(consequent_2);
          },
          $$elseif
        );
      }
    };
    if_block(node_2, ($$render) => {
      if ($$props.items && $$props.items.length > 0) $$render(consequent_1);
      else $$render(alternate, false);
    });
  }
  var node_6 = sibling(node_2);
  {
    var consequent_3 = ($$anchor2) => {
      var fragment_3 = comment();
      var node_7 = first_child(fragment_3);
      snippet(node_7, () => $$props.footerSlot);
      append($$anchor2, fragment_3);
    };
    if_block(node_6, ($$render) => {
      if ($$props.footerSlot) $$render(consequent_3);
    });
  }
  reset(table_1);
  reset(div);
  template_effect(
    ($0, $1) => {
      set_class(div, 1, $0);
      attributes = set_attributes(table_1, attributes, { ...restProps, class: $1 });
    },
    [
      () => clsx2(get(base)({ class: divClass() })),
      () => get(table2)({ class: clsx_default($$props.class) })
    ]
  );
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Table = hmr(Table, () => Table[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Table[HMR].source;
    set(Table[HMR].source, module.default[HMR].original);
  });
}
var Table_default = Table;

// node_modules/flowbite-svelte/dist/table/TableBody.svelte
TableBody[FILENAME] = "node_modules/flowbite-svelte/dist/table/TableBody.svelte";
var root80 = add_locations(from_html(`<tbody><!></tbody>`), TableBody[FILENAME], [[16, 0]]);
function TableBody($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TableBody);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "bodyItems",
      "class"
    ],
    "restProps"
  );
  function getCellValues(row) {
    if (Array.isArray(row)) {
      return row;
    } else {
      return Object.values(row);
    }
  }
  var tbody = root80();
  let attributes;
  var node = child(tbody);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      each(node_1, 17, () => $$props.bodyItems, index, ($$anchor3, row) => {
        var fragment_1 = comment();
        var node_2 = first_child(fragment_1);
        TableBodyRow_default(node_2, {
          children: wrap_snippet(TableBody, ($$anchor4, $$slotProps) => {
            var fragment_2 = comment();
            var node_3 = first_child(fragment_2);
            each(node_3, 17, () => getCellValues(get(row)), index, ($$anchor5, cellValue) => {
              var fragment_3 = comment();
              var node_4 = first_child(fragment_3);
              TableBodyCell_default(node_4, {
                children: wrap_snippet(TableBody, ($$anchor6, $$slotProps2) => {
                  next();
                  var text2 = text();
                  template_effect(() => set_text(text2, get(cellValue) ?? ""));
                  append($$anchor6, text2);
                }),
                $$slots: { default: true }
              });
              append($$anchor5, fragment_3);
            });
            append($$anchor4, fragment_2);
          }),
          $$slots: { default: true }
        });
        append($$anchor3, fragment_1);
      });
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2, $$elseif) => {
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_5 = comment();
          var node_5 = first_child(fragment_5);
          snippet(node_5, () => $$props.children);
          append($$anchor3, fragment_5);
        };
        if_block(
          $$anchor2,
          ($$render) => {
            if ($$props.children) $$render(consequent_1);
          },
          $$elseif
        );
      }
    };
    if_block(node, ($$render) => {
      if ($$props.bodyItems) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  reset(tbody);
  template_effect(() => attributes = set_attributes(tbody, attributes, { ...restProps, class: $$props.class }));
  append($$anchor, tbody);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TableBody = hmr(TableBody, () => TableBody[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableBody[HMR].source;
    set(TableBody[HMR].source, module.default[HMR].original);
  });
}
var TableBody_default = TableBody;

// node_modules/flowbite-svelte/dist/table/TableBodyCell.svelte
TableBodyCell[FILENAME] = "node_modules/flowbite-svelte/dist/table/TableBodyCell.svelte";
var root_152 = add_locations(from_html(`<button><!></button>`), TableBodyCell[FILENAME], [[13, 4]]);
var root81 = add_locations(from_html(`<td><!></td>`), TableBodyCell[FILENAME], [[11, 0]]);
function TableBodyCell($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TableBodyCell);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "colspan",
      "onclick"
    ],
    "restProps"
  );
  const base = user_derived(() => tablebodycell({ class: clsx_default($$props.class) }));
  var td = root81();
  let attributes;
  var node = child(td);
  {
    var consequent_1 = ($$anchor2) => {
      var button2 = root_152();
      button2.__click = function(...$$args) {
        apply(() => $$props.onclick, this, $$args, TableBodyCell, [13, 13]);
      };
      var node_1 = child(button2);
      {
        var consequent = ($$anchor3) => {
          var fragment = comment();
          var node_2 = first_child(fragment);
          snippet(node_2, () => $$props.children);
          append($$anchor3, fragment);
        };
        if_block(node_1, ($$render) => {
          if ($$props.children) $$render(consequent);
        });
      }
      reset(button2);
      append($$anchor2, button2);
    };
    var alternate = ($$anchor2, $$elseif) => {
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_3 = first_child(fragment_1);
          snippet(node_3, () => $$props.children);
          append($$anchor3, fragment_1);
        };
        if_block(
          $$anchor2,
          ($$render) => {
            if ($$props.children) $$render(consequent_2);
          },
          $$elseif
        );
      }
    };
    if_block(node, ($$render) => {
      if ($$props.onclick) $$render(consequent_1);
      else $$render(alternate, false);
    });
  }
  reset(td);
  template_effect(() => attributes = set_attributes(td, attributes, {
    ...restProps,
    class: get(base),
    colspan: $$props.colspan ?? 1
  }));
  append($$anchor, td);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TableBodyCell = hmr(TableBodyCell, () => TableBodyCell[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableBodyCell[HMR].source;
    set(TableBodyCell[HMR].source, module.default[HMR].original);
  });
}
var TableBodyCell_default = TableBodyCell;
delegate(["click"]);

// node_modules/flowbite-svelte/dist/table/TableBodyRow.svelte
TableBodyRow[FILENAME] = "node_modules/flowbite-svelte/dist/table/TableBodyRow.svelte";
var root82 = add_locations(from_html(`<tr><!></tr>`), TableBodyRow[FILENAME], [[19, 0]]);
function TableBodyRow($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TableBodyRow);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "color",
      "striped",
      "hoverable",
      "border"
    ],
    "restProps"
  );
  const tableCtx = getContext("tableCtx");
  let compoColor = user_derived(() => $$props.color || tableCtx.color || "default");
  let compoHoverable = user_derived(() => $$props.hoverable || tableCtx.hoverable || false);
  let compoStriped = user_derived(() => $$props.striped || tableCtx.striped || false);
  let compoBorder = user_derived(() => $$props.border || tableCtx.border || false);
  const base = user_derived(() => tablebodyrow({
    color: get(compoColor),
    hoverable: get(compoHoverable),
    striped: get(compoStriped),
    border: get(compoBorder),
    class: clsx_default($$props.class)
  }));
  var tr = root82();
  let attributes;
  var node = child(tr);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.children);
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if ($$props.children) $$render(consequent);
    });
  }
  reset(tr);
  template_effect(() => attributes = set_attributes(tr, attributes, { ...restProps, class: get(base) }));
  append($$anchor, tr);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TableBodyRow = hmr(TableBodyRow, () => TableBodyRow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableBodyRow[HMR].source;
    set(TableBodyRow[HMR].source, module.default[HMR].original);
  });
}
var TableBodyRow_default = TableBodyRow;

// node_modules/flowbite-svelte/dist/table/TableHeadCell.svelte
TableHeadCell[FILENAME] = "node_modules/flowbite-svelte/dist/table/TableHeadCell.svelte";
var root83 = add_locations(from_html(`<th><!></th>`), TableHeadCell[FILENAME], [[10, 0]]);
function TableHeadCell($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TableHeadCell);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class"
    ],
    "restProps"
  );
  const base = user_derived(() => tableheadcell({ class: clsx_default($$props.class) }));
  var th = root83();
  let attributes;
  var node = child(th);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.children);
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if ($$props.children) $$render(consequent);
    });
  }
  reset(th);
  template_effect(() => attributes = set_attributes(th, attributes, { ...restProps, class: get(base) }));
  append($$anchor, th);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TableHeadCell = hmr(TableHeadCell, () => TableHeadCell[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableHeadCell[HMR].source;
    set(TableHeadCell[HMR].source, module.default[HMR].original);
  });
}
var TableHeadCell_default = TableHeadCell;

// node_modules/flowbite-svelte/dist/table/TableHead.svelte
TableHead[FILENAME] = "node_modules/flowbite-svelte/dist/table/TableHead.svelte";
var root_153 = add_locations(from_html(`<!> <tr></tr>`, 1), TableHead[FILENAME], [[30, 4]]);
var root_711 = add_locations(from_html(`<tr><!></tr>`), TableHead[FILENAME], [[39, 6]]);
var root84 = add_locations(from_html(`<thead><!></thead>`), TableHead[FILENAME], [[25, 0]]);
function TableHead($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TableHead);
  let defaultRow = prop($$props, "defaultRow", 3, true), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "headerSlot",
      "color",
      "striped",
      "border",
      "class",
      "headItems",
      "defaultRow"
    ],
    "restProps"
  );
  const tableCtx = getContext("tableCtx");
  let compoColor = user_derived(() => $$props.color ? $$props.color : tableCtx.color || "default");
  let compoStriped = user_derived(() => $$props.striped ? $$props.striped : tableCtx.striped || false);
  let compoBorder = user_derived(() => $$props.border ? $$props.border : tableCtx.border || false);
  const base = user_derived(() => tablehead({
    color: get(compoColor),
    border: get(compoBorder),
    striped: get(compoStriped),
    class: clsx_default($$props.class)
  }));
  function getItemText(item) {
    if (strict_equals(typeof item, "object") && "text" in item) {
      return item.text;
    }
    return String(item);
  }
  var thead = root84();
  let attributes;
  var node = child(thead);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment = root_153();
      var node_1 = first_child(fragment);
      {
        var consequent = ($$anchor3) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          snippet(node_2, () => $$props.headerSlot);
          append($$anchor3, fragment_1);
        };
        if_block(node_1, ($$render) => {
          if ($$props.headerSlot) $$render(consequent);
        });
      }
      var tr = sibling(node_1, 2);
      each(tr, 21, () => $$props.headItems, index, ($$anchor3, item) => {
        var fragment_2 = comment();
        var node_3 = first_child(fragment_2);
        TableHeadCell_default(node_3, {
          children: wrap_snippet(TableHead, ($$anchor4, $$slotProps) => {
            next();
            var text2 = text();
            template_effect(($0) => set_text(text2, $0), [() => getItemText(get(item))]);
            append($$anchor4, text2);
          }),
          $$slots: { default: true }
        });
        append($$anchor3, fragment_2);
      });
      reset(tr);
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2, $$elseif) => {
      {
        var consequent_3 = ($$anchor3) => {
          var fragment_4 = comment();
          var node_4 = first_child(fragment_4);
          {
            var consequent_2 = ($$anchor4) => {
              var tr_1 = root_711();
              var node_5 = child(tr_1);
              snippet(node_5, () => $$props.children);
              reset(tr_1);
              append($$anchor4, tr_1);
            };
            var alternate_1 = ($$anchor4) => {
              var fragment_5 = comment();
              var node_6 = first_child(fragment_5);
              snippet(node_6, () => $$props.children);
              append($$anchor4, fragment_5);
            };
            if_block(node_4, ($$render) => {
              if (defaultRow()) $$render(consequent_2);
              else $$render(alternate_1, false);
            });
          }
          append($$anchor3, fragment_4);
        };
        if_block(
          $$anchor2,
          ($$render) => {
            if ($$props.children) $$render(consequent_3);
          },
          $$elseif
        );
      }
    };
    if_block(node, ($$render) => {
      if ($$props.headItems) $$render(consequent_1);
      else $$render(alternate, false);
    });
  }
  reset(thead);
  template_effect(() => attributes = set_attributes(thead, attributes, { ...restProps, class: get(base) }));
  append($$anchor, thead);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TableHead = hmr(TableHead, () => TableHead[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableHead[HMR].source;
    set(TableHead[HMR].source, module.default[HMR].original);
  });
}
var TableHead_default = TableHead;

// node_modules/flowbite-svelte/dist/table/TableSearch.svelte
TableSearch[FILENAME] = "node_modules/flowbite-svelte/dist/table/TableSearch.svelte";
var root85 = add_locations(from_html(`<div><div><label for="table-search" class="sr-only">Search</label> <div><div><svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path></svg></div> <input type="text" id="table-search"/></div> <!></div> <table><!></table> <!></div>`), TableSearch[FILENAME], [
  [
    33,
    0,
    [
      [
        34,
        2,
        [
          [35, 4],
          [
            36,
            4,
            [
              [37, 6, [[38, 8, [[39, 10]]]]],
              [42, 6]
            ]
          ]
        ]
      ],
      [48, 2]
    ]
  ]
]);
function TableSearch($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TableSearch);
  let divClass = prop($$props, "divClass", 3, "relative overflow-x-auto shadow-md sm:rounded-lg"), inputValue = prop($$props, "inputValue", 15), customColor = prop($$props, "customColor", 3, ""), color = prop($$props, "color", 3, "default"), innerDivClass = prop($$props, "innerDivClass", 3, "p-4"), searchClass = prop($$props, "searchClass", 3, "relative mt-1"), svgClass = prop($$props, "svgClass", 3, "w-5 h-5 text-gray-500 dark:text-gray-400"), tableClass = prop($$props, "tableClass", 3, "w-full text-left text-sm"), placeholder = prop($$props, "placeholder", 3, "Search"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "header",
      "footer",
      "divClass",
      "inputValue",
      "striped",
      "hoverable",
      "customColor",
      "color",
      "innerDivClass",
      "inputClass",
      "searchClass",
      "svgDivClass",
      "svgClass",
      "tableClass",
      "class",
      "placeholder"
    ],
    "restProps"
  );
  let inputCls = twMerge("bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-80 p-2.5 ps-10 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500", $$props.inputClass);
  let svgDivCls = twMerge("absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none", $$props.svgDivClass);
  const colors = {
    default: "text-gray-500 dark:text-gray-400",
    blue: "text-blue-100 dark:text-blue-100",
    green: "text-green-100 dark:text-green-100",
    red: "text-red-100 dark:text-red-100",
    yellow: "text-yellow-100 dark:text-yellow-100",
    purple: "text-purple-100 dark:text-purple-100",
    indigo: "text-indigo-100 dark:text-indigo-100",
    pink: "text-pink-100 dark:text-pink-100",
    custom: customColor()
  };
  const tableSearchCtx = {
    striped: $$props.striped,
    hoverable: $$props.hoverable,
    color: color()
  };
  setContext("tableCtx", tableSearchCtx);
  var div = root85();
  var div_1 = child(div);
  var div_2 = sibling(child(div_1), 2);
  var div_3 = child(div_2);
  set_class(div_3, 1, clsx2(svgDivCls));
  var svg = child(div_3);
  reset(div_3);
  var input2 = sibling(div_3, 2);
  remove_input_defaults(input2);
  set_class(input2, 1, clsx2(inputCls));
  reset(div_2);
  var node = sibling(div_2, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.header);
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if ($$props.header) $$render(consequent);
    });
  }
  reset(div_1);
  var table2 = sibling(div_1, 2);
  let attributes;
  var node_2 = child(table2);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_3 = first_child(fragment_1);
      snippet(node_3, () => $$props.children);
      append($$anchor2, fragment_1);
    };
    if_block(node_2, ($$render) => {
      if ($$props.children) $$render(consequent_1);
    });
  }
  reset(table2);
  var node_4 = sibling(table2, 2);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment_2 = comment();
      var node_5 = first_child(fragment_2);
      snippet(node_5, () => $$props.footer);
      append($$anchor2, fragment_2);
    };
    if_block(node_4, ($$render) => {
      if ($$props.footer) $$render(consequent_2);
    });
  }
  reset(div);
  template_effect(
    ($0) => {
      set_class(div, 1, clsx2(divClass()));
      set_class(div_1, 1, clsx2(innerDivClass()));
      set_class(div_2, 1, clsx2(searchClass()));
      set_class(svg, 0, clsx2(svgClass()));
      set_attribute(input2, "placeholder", placeholder());
      attributes = set_attributes(table2, attributes, { ...restProps, class: $0 });
    },
    [
      () => twMerge(tableClass(), colors[color()], clsx_default($$props.class))
    ]
  );
  bind_value(input2, inputValue);
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TableSearch = hmr(TableSearch, () => TableSearch[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableSearch[HMR].source;
    set(TableSearch[HMR].source, module.default[HMR].original);
  });
}
var TableSearch_default = TableSearch;

// node_modules/flowbite-svelte/dist/table/theme.js
var table = ce({
  slots: {
    base: "",
    table: "w-full text-left text-sm"
  },
  variants: {
    color: {
      // default, primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      default: { table: "text-gray-500 dark:text-gray-400" },
      primary: { table: "text-primary-100 dark:text-primary-100" },
      secondary: { table: "text-secondary-100 dark:text-secondary-100" },
      gray: { table: "text-gray-100 dark:text-gray-100" },
      red: { table: "text-red-100 dark:text-red-100" },
      orange: { table: "text-orange-100 dark:text-orange-100" },
      amber: { table: "text-amber-100 dark:text-amber-100" },
      yellow: { table: "text-yellow-100 dark:text-yellow-100" },
      lime: { table: "text-lime-100 dark:text-lime-100" },
      green: { table: "text-green-100 dark:text-green-100" },
      emerald: { table: "text-emerald-100 dark:text-emerald-100" },
      teal: { table: "text-teal-100 dark:text-teal-100" },
      cyan: { table: "text-cyan-100 dark:text-cyan-100" },
      sky: { table: "text-sky-100 dark:text-sky-100" },
      blue: { table: "text-blue-100 dark:text-blue-100" },
      indigo: { table: "text-indigo-100 dark:text-indigo-100" },
      violet: { table: "text-violet-100 dark:text-violet-100" },
      purple: { table: "text-purple-100 dark:text-purple-100" },
      fuchsia: { table: "text-fuchsia-100 dark:text-fuchsia-100" },
      pink: { table: "text-pink-100 dark:text-pink-100" },
      rose: { table: "text-rose-100 dark:text-rose-100" }
    },
    shadow: {
      true: { base: "shadow-md sm:rounded-lg" }
    }
  }
});
var tablebodyrow = ce({
  base: "",
  variants: {
    color: {
      default: "bg-white dark:bg-gray-800 dark:border-gray-700",
      primary: "bg-white bg-primary-500 border-primary-400",
      secondary: "bg-white bg-secondary-500 border-secondary-400",
      gray: "bg-gray-500 border-gray-400",
      red: "bg-red-500 border-red-400",
      orange: "bg-orange-500 border-orange-400",
      amber: "bg-amber-500 border-amber-400",
      yellow: "bg-yellow-500 border-yellow-400",
      lime: "bg-lime-500 border-lime-400",
      green: "bg-white bg-green-500 border-green-400",
      emerald: "bg-emerald-500 border-emerald-400",
      teal: "bg-teal-500 border-teal-400",
      cyan: "bg-cyan-500 border-cyan-400",
      sky: "bg-sky-500 border-sky-400",
      blue: "bg-white bg-blue-500 border-blue-400",
      indigo: "bg-indigo-500 border-indigo-400",
      violet: "bg-violet-500 border-violet-400",
      purple: "bg-purple-500 border-purple-400",
      fuchsia: "bg-fuchsia-500 border-fuchsia-400",
      pink: "bg-pink-500 border-pink-400",
      rose: "bg-rose-500 border-rose-400"
    },
    hoverable: {
      true: ""
    },
    striped: {
      true: ""
    },
    border: {
      true: "border-b last:border-b-0"
    }
  },
  compoundVariants: [
    {
      hoverable: true,
      color: "default",
      class: "hover:bg-gray-50 dark:hover:bg-gray-600"
    },
    {
      hoverable: true,
      color: "primary",
      class: "hover:bg-primary-400 dark:hover:bg-primary-400"
    },
    {
      hoverable: true,
      color: "secondary",
      class: "hover:bg-secondary-400 dark:hover:bg-secondary-400"
    },
    {
      hoverable: true,
      color: "gray",
      class: "hover:bg-gray-400 dark:hover:bg-gray-400"
    },
    {
      hoverable: true,
      color: "red",
      class: "hover:bg-red-400 dark:hover:bg-red-400"
    },
    {
      hoverable: true,
      color: "orange",
      class: "hover:bg-orange-400 dark:hover:bg-orange-400"
    },
    {
      hoverable: true,
      color: "amber",
      class: "hover:bg-amber-400 dark:hover:bg-amber-400"
    },
    {
      hoverable: true,
      color: "yellow",
      class: "hover:bg-yellow-400 dark:hover:bg-yellow-400"
    },
    {
      hoverable: true,
      color: "lime",
      class: "hover:bg-lime-400 dark:hover:bg-lime-400"
    },
    {
      hoverable: true,
      color: "green",
      class: "hover:bg-green-400 dark:hover:bg-green-400"
    },
    {
      hoverable: true,
      color: "emerald",
      class: "hover:bg-emerald-400 dark:hover:bg-emerald-400"
    },
    {
      hoverable: true,
      color: "teal",
      class: "hover:bg-teal-400 dark:hover:bg-teal-400"
    },
    {
      hoverable: true,
      color: "cyan",
      class: "hover:bg-cyan-400 dark:hover:bg-cyan-400"
    },
    {
      hoverable: true,
      color: "sky",
      class: "hover:bg-sky-400 dark:hover:bg-sky-400"
    },
    {
      hoverable: true,
      color: "blue",
      class: "hover:bg-blue-400 dark:hover:bg-blue-400"
    },
    {
      hoverable: true,
      color: "indigo",
      class: "hover:bg-indigo-400 dark:hover:bg-indigo-400"
    },
    {
      hoverable: true,
      color: "violet",
      class: "hover:bg-violet-400 dark:hover:bg-violet-400"
    },
    {
      hoverable: true,
      color: "purple",
      class: "hover:bg-purple-400 dark:hover:bg-purple-400"
    },
    {
      hoverable: true,
      color: "fuchsia",
      class: "hover:bg-fuchsia-400 dark:hover:bg-fuchsia-400"
    },
    {
      hoverable: true,
      color: "pink",
      class: "hover:bg-pink-400 dark:hover:bg-pink-400"
    },
    {
      hoverable: true,
      color: "rose",
      class: "hover:bg-rose-400 dark:hover:bg-rose-400"
    },
    {
      striped: true,
      color: "default",
      class: "odd:bg-white even:bg-gray-50 dark:odd:bg-gray-800 dark:even:bg-gray-700"
    },
    {
      striped: true,
      color: "primary",
      class: "odd:bg-primary-500 even:bg-primary-600 dark:odd:bg-primary-500 dark:even:bg-primary-600"
    },
    {
      striped: true,
      color: "secondary",
      class: "odd:bg-secondary-500 even:bg-secondary-600 dark:odd:bg-secondary-500 dark:even:bg-secondary-600"
    },
    {
      striped: true,
      color: "gray",
      class: "odd:bg-gray-500 even:bg-gray-600 dark:odd:bg-gray-500 dark:even:bg-gray-600"
    },
    // default, primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
    {
      striped: true,
      color: "red",
      class: "odd:bg-red-500 even:bg-red-600 dark:odd:bg-red-500 dark:even:bg-red-600"
    },
    {
      striped: true,
      color: "orange",
      class: "odd:bg-orange-500 even:bg-orange-600 dark:odd:bg-orange-500 dark:even:bg-orange-600"
    },
    {
      striped: true,
      color: "amber",
      class: "odd:bg-amber-500 even:bg-amber-600 dark:odd:bg-amber-500 dark:even:bg-amber-600"
    },
    {
      striped: true,
      color: "yellow",
      class: "odd:bg-yellow-500 even:bg-yellow-600 dark:odd:bg-yellow-500 dark:even:bg-yellow-600"
    },
    {
      striped: true,
      color: "lime",
      class: "odd:bg-lime-500 even:bg-lime-600 dark:odd:bg-lime-500 dark:even:bg-lime-600"
    },
    {
      striped: true,
      color: "green",
      class: "odd:bg-green-500 even:bg-green-600 dark:odd:bg-green-500 dark:even:bg-green-600"
    },
    {
      striped: true,
      color: "emerald",
      class: "odd:bg-emerald-500 even:bg-emerald-600 dark:odd:bg-emerald-500 dark:even:bg-emerald-600"
    },
    {
      striped: true,
      color: "teal",
      class: "odd:bg-teal-500 even:bg-teal-600 dark:odd:bg-teal-500 dark:even:bg-teal-600"
    },
    {
      striped: true,
      color: "cyan",
      class: "odd:bg-cyan-500 even:bg-cyan-600 dark:odd:bg-cyan-500 dark:even:bg-cyan-600"
    },
    {
      striped: true,
      color: "sky",
      class: "odd:bg-sky-500 even:bg-sky-600 dark:odd:bg-sky-500 dark:even:bg-sky-600"
    },
    {
      striped: true,
      color: "blue",
      class: "odd:bg-blue-500 even:bg-blue-600 dark:odd:bg-blue-500 dark:even:bg-blue-600"
    },
    {
      striped: true,
      color: "indigo",
      class: "odd:bg-indigo-500 even:bg-indigo-600 dark:odd:bg-indigo-500 dark:even:bg-indigo-600"
    },
    {
      striped: true,
      color: "violet",
      class: "odd:bg-violet-500 even:bg-violet-600 dark:odd:bg-violet-500 dark:even:bg-violet-600"
    },
    {
      striped: true,
      color: "purple",
      class: "odd:bg-purple-500 even:bg-purple-600 dark:odd:bg-purple-500 dark:even:bg-purple-600"
    },
    {
      striped: true,
      color: "fuchsia",
      class: "odd:bg-fuchsia-500 even:bg-fuchsia-600 dark:odd:bg-fuchsia-500 dark:even:bg-fuchsia-600"
    },
    {
      striped: true,
      color: "pink",
      class: "odd:bg-pink-500 even:bg-pink-600 dark:odd:bg-pink-500 dark:even:bg-pink-600"
    },
    {
      striped: true,
      color: "rose",
      class: "odd:bg-rose-500 even:bg-rose-600 dark:odd:bg-rose-500 dark:even:bg-rose-600"
    }
  ]
});
var tablehead = ce({
  base: "text-xs uppercase",
  variants: {
    color: {
      // default, primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      default: "text-gray-700 dark:text-gray-400 bg-gray-50 dark:bg-gray-700",
      primary: "text-white dark:text-white bg-primary-700 dark:bg-primary-700",
      secondary: "text-white dark:text-white bg-secondary-700 dark:bg-secondary-700",
      gray: "text-white dark:text-white bg-gray-700 dark:bg-gray-700",
      red: "text-white dark:text-white bg-red-700 dark:bg-red-700",
      orange: "text-white dark:text-white bg-orange-700 dark:bg-orange-700",
      amber: "text-white dark:text-white bg-amber-700 dark:bg-amber-700",
      yellow: "text-white dark:text-white bg-yellow-700 dark:bg-yellow-700",
      lime: "text-white dark:text-white bg-lime-700 dark:bg-lime-700",
      green: "text-white dark:text-white bg-green-700 dark:bg-green-700",
      emerald: "text-white dark:text-white bg-emerald-700 dark:bg-emerald-700",
      teal: "text-white dark:text-white bg-teal-700 dark:bg-teal-700",
      cyan: "text-white dark:text-white bg-cyan-700 dark:bg-cyan-700",
      sky: "text-white dark:text-white bg-sky-700 dark:bg-sky-700",
      blue: "text-white dark:text-white bg-blue-700 dark:bg-blue-700",
      indigo: "text-white dark:text-white bg-indigo-700 dark:bg-indigo-700",
      violet: "text-white dark:text-white bg-violet-700 dark:bg-violet-700",
      purple: "text-white dark:text-white bg-purple-700 dark:bg-purple-700",
      fuchsia: "text-white dark:text-white bg-fuchsia-700 dark:bg-fuchsia-700",
      pink: "text-white dark:text-white bg-pink-700 dark:bg-pink-700",
      rose: "text-white dark:text-white bg-rose-700 dark:bg-rose-700"
    },
    border: {
      true: "",
      false: ""
    },
    striped: {
      true: "",
      false: ""
    }
  },
  compoundVariants: [
    {
      color: "default",
      border: true,
      class: ""
      //"bg-transparent dark:bg-transparent"
    },
    {
      color: "default",
      striped: true,
      class: ""
      //"bg-transparent dark:bg-transparent border-gray-700"
    },
    {
      striped: true,
      color: "blue",
      class: "border-blue-400"
    },
    {
      striped: true,
      color: "green",
      class: "border-green-400"
    },
    {
      striped: true,
      color: "red",
      class: "border-red-400"
    },
    {
      striped: true,
      color: "yellow",
      class: "border-yellow-400"
    },
    {
      striped: true,
      color: "purple",
      class: "border-purple-400"
    },
    {
      striped: true,
      color: "indigo",
      class: "border-indigo-400"
    },
    {
      striped: true,
      color: "pink",
      class: "border-pink-400"
    }
  ]
});
var tablebodycell = ce({
  base: "px-6 py-4 whitespace-nowrap font-medium"
});
var tableheadcell = ce({
  base: "px-6 py-3"
});

// node_modules/flowbite-svelte/dist/timeline/Activity.svelte
Activity[FILENAME] = "node_modules/flowbite-svelte/dist/timeline/Activity.svelte";
var root86 = add_locations(from_html(`<ol><!></ol>`), Activity[FILENAME], [[10, 0]]);
function Activity($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Activity);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class"
    ],
    "restProps"
  );
  const base = activity({ class: clsx_default($$props.class) });
  var ol = root86();
  let attributes;
  var node = child(ol);
  snippet(node, () => $$props.children);
  reset(ol);
  template_effect(() => attributes = set_attributes(ol, attributes, { ...restProps, class: base }));
  append($$anchor, ol);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Activity = hmr(Activity, () => Activity[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Activity[HMR].source;
    set(Activity[HMR].source, module.default[HMR].original);
  });
}
var Activity_default = Activity;

// node_modules/flowbite-svelte/dist/timeline/ActivityItem.svelte
ActivityItem[FILENAME] = "node_modules/flowbite-svelte/dist/timeline/ActivityItem.svelte";
var root_229 = add_locations(from_html(`<div><!></div>`), ActivityItem[FILENAME], [[23, 8]]);
var root_154 = add_locations(from_html(`<li><span><img/></span> <div><div><time> </time> <div><!></div></div> <!></div></li>`), ActivityItem[FILENAME], [
  [
    11,
    2,
    [
      [12, 4, [[13, 6]]],
      [
        15,
        4,
        [[16, 6, [[17, 8], [18, 8]]]]
      ]
    ]
  ]
]);
function ActivityItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ActivityItem);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "activities",
      "liClass",
      "spanClass",
      "imgClass",
      "outerDivClass",
      "innerDivClass",
      "timeClass",
      "titleClass",
      "textClass"
    ],
    "restProps"
  );
  const $$d = user_derived(activityitem), li = user_derived(() => {
    let {
      li: $$1,
      span: $$2,
      img: $$3,
      outerDiv: $$4,
      innerDiv: $$5,
      time: $$6,
      title: $$7,
      text: $$8
    } = get($$d);
    return $$1;
  }), span2 = user_derived(() => {
    let {
      li: $$1,
      span: $$2,
      img: $$3,
      outerDiv: $$4,
      innerDiv: $$5,
      time: $$6,
      title: $$7,
      text: $$8
    } = get($$d);
    return $$2;
  }), img2 = user_derived(() => {
    let {
      li: $$1,
      span: $$2,
      img: $$3,
      outerDiv: $$4,
      innerDiv: $$5,
      time: $$6,
      title: $$7,
      text: $$8
    } = get($$d);
    return $$3;
  }), outerDiv = user_derived(() => {
    let {
      li: $$1,
      span: $$2,
      img: $$3,
      outerDiv: $$4,
      innerDiv: $$5,
      time: $$6,
      title: $$7,
      text: $$8
    } = get($$d);
    return $$4;
  }), innerDiv = user_derived(() => {
    let {
      li: $$1,
      span: $$2,
      img: $$3,
      outerDiv: $$4,
      innerDiv: $$5,
      time: $$6,
      title: $$7,
      text: $$8
    } = get($$d);
    return $$5;
  }), time = user_derived(() => {
    let {
      li: $$1,
      span: $$2,
      img: $$3,
      outerDiv: $$4,
      innerDiv: $$5,
      time: $$6,
      title: $$7,
      text: $$8
    } = get($$d);
    return $$6;
  }), title = user_derived(() => {
    let {
      li: $$1,
      span: $$2,
      img: $$3,
      outerDiv: $$4,
      innerDiv: $$5,
      time: $$6,
      title: $$7,
      text: $$8
    } = get($$d);
    return $$7;
  }), text2 = user_derived(() => {
    let {
      li: $$1,
      span: $$2,
      img: $$3,
      outerDiv: $$4,
      innerDiv: $$5,
      time: $$6,
      title: $$7,
      text: $$8
    } = get($$d);
    return $$8;
  });
  var fragment = comment();
  var node = first_child(fragment);
  each(node, 17, () => $$props.activities, index, ($$anchor2, $$item) => {
    let name = () => get($$item).title;
    name();
    let date = () => get($$item).date;
    date();
    let src = () => get($$item).src;
    src();
    let alt = () => get($$item).alt;
    alt();
    let activity2 = () => get($$item).text;
    activity2();
    var li_1 = root_154();
    let attributes;
    var span_1 = child(li_1);
    var img_1 = child(span_1);
    reset(span_1);
    var div = sibling(span_1, 2);
    var div_1 = child(div);
    var time_1 = child(div_1);
    var text_1 = child(time_1, true);
    reset(time_1);
    var div_2 = sibling(time_1, 2);
    var node_1 = child(div_2);
    html(node_1, name);
    reset(div_2);
    reset(div_1);
    var node_2 = sibling(div_1, 2);
    {
      var consequent = ($$anchor3) => {
        var div_3 = root_229();
        var node_3 = child(div_3);
        html(node_3, activity2);
        reset(div_3);
        template_effect(($0) => set_class(div_3, 1, $0), [
          () => clsx2(get(text2)({ class: $$props.textClass }))
        ]);
        append($$anchor3, div_3);
      };
      if_block(node_2, ($$render) => {
        if (activity2()) $$render(consequent);
      });
    }
    reset(div);
    reset(li_1);
    template_effect(
      ($0, $1, $2, $3, $4, $5, $6) => {
        attributes = set_attributes(li_1, attributes, { ...restProps, class: $0 });
        set_class(span_1, 1, $1);
        set_class(img_1, 1, $2);
        set_attribute(img_1, "src", src());
        set_attribute(img_1, "alt", alt());
        set_class(div, 1, $3);
        set_class(div_1, 1, $4);
        set_class(time_1, 1, $5);
        set_text(text_1, date());
        set_class(div_2, 1, $6);
      },
      [
        () => get(li)({ class: $$props.liClass }),
        () => clsx2(get(span2)({ class: $$props.spanClass })),
        () => clsx2(get(img2)({ class: $$props.imgClass })),
        () => clsx2(get(outerDiv)({ class: $$props.outerDivClass })),
        () => clsx2(get(innerDiv)({ class: $$props.innerDivClass })),
        () => clsx2(get(time)({ class: $$props.timeClass })),
        () => clsx2(get(title)({ class: $$props.titleClass }))
      ]
    );
    append($$anchor2, li_1);
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ActivityItem = hmr(ActivityItem, () => ActivityItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ActivityItem[HMR].source;
    set(ActivityItem[HMR].source, module.default[HMR].original);
  });
}
var ActivityItem_default = ActivityItem;

// node_modules/flowbite-svelte/dist/timeline/Group.svelte
Group[FILENAME] = "node_modules/flowbite-svelte/dist/timeline/Group.svelte";
var root87 = add_locations(from_html(`<div><time> </time> <ol><!></ol></div>`), Group[FILENAME], [[8, 0, [[9, 2], [10, 2]]]]);
function Group($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Group);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "divClass",
      "timeClass",
      "date",
      "olClass"
    ],
    "restProps"
  );
  const $$d = user_derived(group), div = user_derived(() => {
    let { div: $$1, time: $$2, ol: $$3 } = get($$d);
    return $$1;
  }), time = user_derived(() => {
    let { div: $$1, time: $$2, ol: $$3 } = get($$d);
    return $$2;
  }), ol = user_derived(() => {
    let { div: $$1, time: $$2, ol: $$3 } = get($$d);
    return $$3;
  });
  var div_1 = root87();
  var time_1 = child(div_1);
  var text2 = child(time_1, true);
  reset(time_1);
  var ol_1 = sibling(time_1, 2);
  let attributes;
  var node = child(ol_1);
  snippet(node, () => $$props.children);
  reset(ol_1);
  reset(div_1);
  template_effect(
    ($0, $1, $2) => {
      set_class(div_1, 1, $0);
      set_class(time_1, 1, $1);
      set_text(text2, $$props.date);
      attributes = set_attributes(ol_1, attributes, { ...restProps, class: $2 });
    },
    [
      () => clsx2(get(div)({ class: $$props.divClass })),
      () => clsx2(get(time)({ class: $$props.timeClass })),
      () => get(ol)({ class: $$props.olClass })
    ]
  );
  append($$anchor, div_1);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Group = hmr(Group, () => Group[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Group[HMR].source;
    set(Group[HMR].source, module.default[HMR].original);
  });
}
var Group_default = Group;

// node_modules/flowbite-svelte/dist/timeline/GroupItem.svelte
GroupItem[FILENAME] = "node_modules/flowbite-svelte/dist/timeline/GroupItem.svelte";
var root_230 = add_locations(from_html(`<div class="text-sm font-normal"> </div>`), GroupItem[FILENAME], [[18, 10]]);
var root_327 = add_locations(from_svg(`<svg class="me-1 h-3 w-3" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clip-rule="evenodd"></path><path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z"></path></svg> Private`, 1), GroupItem[FILENAME], [[23, 12, [[24, 14], [25, 14]]]]);
var root_413 = add_locations(from_svg(`<svg class="me-1 h-3 w-3" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.083 9h1.946c.089-1.546.383-2.97.837-4.118A6.004 6.004 0 004.083 9zM10 2a8 8 0 100 16 8 8 0 000-16zm0 2c-.076 0-.232.032-.465.262-.238.234-.497.623-.737 1.182-.389.907-.673 2.142-.766 3.556h3.936c-.093-1.414-.377-2.649-.766-3.556-.24-.56-.5-.948-.737-1.182C10.232 4.032 10.076 4 10 4zm3.971 5c-.089-1.546-.383-2.97-.837-4.118A6.004 6.004 0 0115.917 9h-1.946zm-2.003 2H8.032c.093 1.414.377 2.649.766 3.556.24.56.5.948.737 1.182.233.23.389.262.465.262.076 0 .232-.032.465-.262.238-.234.498-.623.737-1.182.389-.907.673-2.142.766-3.556zm1.166 4.118c.454-1.147.748-2.572.837-4.118h1.946a6.004 6.004 0 01-2.783 4.118zm-6.268 0C6.412 13.97 6.118 12.546 6.03 11H4.083a6.004 6.004 0 002.783 4.118z" clip-rule="evenodd"></path></svg> Public`, 1), GroupItem[FILENAME], [[29, 12, [[30, 14]]]]);
var root_155 = add_locations(from_html(`<li><a><img/> <div><div><!></div> <!> <span><!></span></div></a></li>`), GroupItem[FILENAME], [
  [
    10,
    2,
    [
      [
        11,
        4,
        [
          [12, 6],
          [13, 6, [[14, 8], [21, 8]]]
        ]
      ]
    ]
  ]
]);
function GroupItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, GroupItem);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "timelines",
      "aClass",
      "imgClass",
      "divClass",
      "titleClass",
      "spanClass"
    ],
    "restProps"
  );
  const $$d = user_derived(groupitem), a = user_derived(() => {
    let {
      a: $$1,
      img: $$2,
      div: $$3,
      title: $$4,
      span: $$5
    } = get($$d);
    return $$1;
  }), img2 = user_derived(() => {
    let {
      a: $$1,
      img: $$2,
      div: $$3,
      title: $$4,
      span: $$5
    } = get($$d);
    return $$2;
  }), div = user_derived(() => {
    let {
      a: $$1,
      img: $$2,
      div: $$3,
      title: $$4,
      span: $$5
    } = get($$d);
    return $$3;
  }), title = user_derived(() => {
    let {
      a: $$1,
      img: $$2,
      div: $$3,
      title: $$4,
      span: $$5
    } = get($$d);
    return $$4;
  }), span2 = user_derived(() => {
    let {
      a: $$1,
      img: $$2,
      div: $$3,
      title: $$4,
      span: $$5
    } = get($$d);
    return $$5;
  });
  var fragment = comment();
  var node = first_child(fragment);
  each(node, 17, () => $$props.timelines, index, ($$anchor2, $$item) => {
    let name = () => get($$item).name;
    name();
    let src = () => get($$item).src;
    src();
    let alt = () => get($$item).alt;
    alt();
    let isPrivate = () => get($$item).isPrivate;
    isPrivate();
    let href = () => get($$item).href;
    href();
    let comment2 = () => get($$item).comment;
    comment2();
    var li = root_155();
    let attributes;
    var a_1 = child(li);
    var img_1 = child(a_1);
    var div_1 = sibling(img_1, 2);
    var div_2 = child(div_1);
    var node_1 = child(div_2);
    html(node_1, name);
    reset(div_2);
    var node_2 = sibling(div_2, 2);
    {
      var consequent = ($$anchor3) => {
        var div_3 = root_230();
        var text2 = child(div_3, true);
        reset(div_3);
        template_effect(() => set_text(text2, comment2()));
        append($$anchor3, div_3);
      };
      if_block(node_2, ($$render) => {
        if (comment2()) $$render(consequent);
      });
    }
    var span_1 = sibling(node_2, 2);
    var node_3 = child(span_1);
    {
      var consequent_1 = ($$anchor3) => {
        var fragment_1 = root_327();
        next();
        append($$anchor3, fragment_1);
      };
      var alternate = ($$anchor3) => {
        var fragment_2 = root_413();
        next();
        append($$anchor3, fragment_2);
      };
      if_block(node_3, ($$render) => {
        if (isPrivate()) $$render(consequent_1);
        else $$render(alternate, false);
      });
    }
    reset(span_1);
    reset(div_1);
    reset(a_1);
    reset(li);
    template_effect(
      ($0, $1, $2, $3, $4) => {
        attributes = set_attributes(li, attributes, { ...restProps });
        set_attribute(a_1, "href", href());
        set_class(a_1, 1, $0);
        set_class(img_1, 1, $1);
        set_attribute(img_1, "src", src());
        set_attribute(img_1, "alt", alt());
        set_class(div_1, 1, $2);
        set_class(div_2, 1, $3);
        set_class(span_1, 1, $4);
      },
      [
        () => clsx2(get(a)({ class: $$props.aClass })),
        () => clsx2(get(img2)({ class: $$props.imgClass })),
        () => clsx2(get(div)({ class: $$props.divClass })),
        () => clsx2(get(title)({ class: $$props.titleClass })),
        () => clsx2(get(span2)({ class: $$props.spanClass }))
      ]
    );
    append($$anchor2, li);
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GroupItem = hmr(GroupItem, () => GroupItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GroupItem[HMR].source;
    set(GroupItem[HMR].source, module.default[HMR].original);
  });
}
var GroupItem_default = GroupItem;

// node_modules/flowbite-svelte/dist/timeline/Timeline.svelte
Timeline[FILENAME] = "node_modules/flowbite-svelte/dist/timeline/Timeline.svelte";
var root88 = add_locations(from_html(`<ol><!></ol>`), Timeline[FILENAME], [[13, 0]]);
function Timeline($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Timeline);
  let order = prop($$props, "order", 3, "default"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "order",
      "class"
    ],
    "restProps"
  );
  setContext("order", order());
  const olCls = user_derived(() => timeline({
    order: order(),
    class: clsx_default($$props.class)
  }));
  var ol = root88();
  let attributes;
  var node = child(ol);
  snippet(node, () => $$props.children);
  reset(ol);
  template_effect(() => attributes = set_attributes(ol, attributes, { ...restProps, class: get(olCls) }));
  append($$anchor, ol);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Timeline = hmr(Timeline, () => Timeline[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Timeline[HMR].source;
    set(Timeline[HMR].source, module.default[HMR].original);
  });
}
var Timeline_default = Timeline;

// node_modules/flowbite-svelte/dist/timeline/TimelineItem.svelte
TimelineItem[FILENAME] = "node_modules/flowbite-svelte/dist/timeline/TimelineItem.svelte";
var root_328 = add_locations(from_html(`<div><svg aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path></svg></div>`), TimelineItem[FILENAME], [
  [46, 6, [[47, 8, [[48, 10]]]]]
]);
var root_513 = add_locations(from_html(`<time> </time>`), TimelineItem[FILENAME], [[53, 4]]);
var root_68 = add_locations(from_html(`<h3> </h3>`), TimelineItem[FILENAME], [[58, 4]]);
var root_86 = add_locations(from_html(`<time> </time>`), TimelineItem[FILENAME], [[65, 6]]);
var root89 = add_locations(from_html(`<li><!> <!> <!> <!></li>`), TimelineItem[FILENAME], [[41, 0]]);
function TimelineItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TimelineItem);
  let dateFormat = prop($$props, "dateFormat", 3, "month-year"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "orientationSlot",
      "title",
      "date",
      "dateFormat",
      "svgClass",
      "liClass",
      "divClass",
      "timeClass",
      "h3Class"
    ],
    "restProps"
  );
  let order = getContext("order");
  const $$d = user_derived(() => timelineitem({ order })), li = user_derived(() => {
    let {
      li: $$1,
      div: $$2,
      time: $$3,
      h3: $$4,
      svg: $$5
    } = get($$d);
    return $$1;
  }), div = user_derived(() => {
    let {
      li: $$1,
      div: $$2,
      time: $$3,
      h3: $$4,
      svg: $$5
    } = get($$d);
    return $$2;
  }), time = user_derived(() => {
    let {
      li: $$1,
      div: $$2,
      time: $$3,
      h3: $$4,
      svg: $$5
    } = get($$d);
    return $$3;
  }), h3 = user_derived(() => {
    let {
      li: $$1,
      div: $$2,
      time: $$3,
      h3: $$4,
      svg: $$5
    } = get($$d);
    return $$4;
  }), svg = user_derived(() => {
    let {
      li: $$1,
      div: $$2,
      time: $$3,
      h3: $$4,
      svg: $$5
    } = get($$d);
    return $$5;
  });
  function formatDisplayDate(dateStr, format) {
    const date = new Date(dateStr);
    if (isNaN(date.getTime())) return dateStr;
    switch (format) {
      case "year":
        return date.toLocaleDateString(void 0, { year: "numeric" });
      case "month-year":
        return date.toLocaleDateString(void 0, { month: "long", year: "numeric" });
      case "full-date":
        return date.toLocaleDateString(void 0, {
          day: "numeric",
          month: "long",
          year: "numeric"
        });
      default:
        return date.toLocaleDateString(void 0, { month: "long", year: "numeric" });
    }
  }
  var li_1 = root89();
  let attributes;
  var node = child(li_1);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      {
        var consequent = ($$anchor3) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          snippet(node_2, () => $$props.orientationSlot);
          append($$anchor3, fragment_1);
        };
        var alternate = ($$anchor3) => {
          var div_1 = root_328();
          var svg_1 = child(div_1);
          reset(div_1);
          template_effect(
            ($0, $1) => {
              set_class(div_1, 1, $0);
              set_class(svg_1, 0, $1);
            },
            [
              () => clsx2(get(div)({ class: $$props.divClass })),
              () => clsx2(get(svg)({ class: $$props.svgClass }))
            ]
          );
          append($$anchor3, div_1);
        };
        if_block(node_1, ($$render) => {
          if ($$props.orientationSlot && (strict_equals(order, "vertical") || strict_equals(order, "horizontal"))) $$render(consequent);
          else $$render(alternate, false);
        });
      }
      append($$anchor2, fragment);
    };
    var alternate_1 = ($$anchor2, $$elseif) => {
      {
        var consequent_2 = ($$anchor3) => {
          var time_1 = root_513();
          var text2 = child(time_1, true);
          reset(time_1);
          template_effect(
            ($0, $1) => {
              set_attribute(time_1, "datetime", $$props.date);
              set_class(time_1, 1, $0);
              set_text(text2, $1);
            },
            [
              () => clsx2(get(time)({ class: $$props.timeClass })),
              () => formatDisplayDate($$props.date, dateFormat())
            ]
          );
          append($$anchor3, time_1);
        };
        if_block(
          $$anchor2,
          ($$render) => {
            if ($$props.date) $$render(consequent_2);
          },
          $$elseif
        );
      }
    };
    if_block(node, ($$render) => {
      if (strict_equals(order, "default", false)) $$render(consequent_1);
      else $$render(alternate_1, false);
    });
  }
  var node_3 = sibling(node, 2);
  {
    var consequent_3 = ($$anchor2) => {
      var h3_1 = root_68();
      var text_1 = child(h3_1, true);
      reset(h3_1);
      template_effect(
        ($0) => {
          set_class(h3_1, 1, $0);
          set_text(text_1, $$props.title);
        },
        [
          () => clsx2(get(h3)({ class: $$props.h3Class }))
        ]
      );
      append($$anchor2, h3_1);
    };
    if_block(node_3, ($$render) => {
      if ($$props.title) $$render(consequent_3);
    });
  }
  var node_4 = sibling(node_3, 2);
  {
    var consequent_5 = ($$anchor2) => {
      var fragment_2 = comment();
      var node_5 = first_child(fragment_2);
      {
        var consequent_4 = ($$anchor3) => {
          var time_2 = root_86();
          var text_2 = child(time_2, true);
          reset(time_2);
          template_effect(
            ($0, $1) => {
              set_attribute(time_2, "datetime", $$props.date);
              set_class(time_2, 1, $0);
              set_text(text_2, $1);
            },
            [
              () => clsx2(get(time)({ class: $$props.timeClass })),
              () => formatDisplayDate($$props.date, dateFormat())
            ]
          );
          append($$anchor3, time_2);
        };
        if_block(node_5, ($$render) => {
          if ($$props.date) $$render(consequent_4);
        });
      }
      append($$anchor2, fragment_2);
    };
    if_block(node_4, ($$render) => {
      if (strict_equals(order, "default", false)) $$render(consequent_5);
    });
  }
  var node_6 = sibling(node_4, 2);
  snippet(node_6, () => $$props.children);
  reset(li_1);
  template_effect(($0) => attributes = set_attributes(li_1, attributes, { ...restProps, class: $0 }), [
    () => get(li)({ class: $$props.liClass })
  ]);
  append($$anchor, li_1);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TimelineItem = hmr(TimelineItem, () => TimelineItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TimelineItem[HMR].source;
    set(TimelineItem[HMR].source, module.default[HMR].original);
  });
}
var TimelineItem_default = TimelineItem;

// node_modules/flowbite-svelte/dist/timeline/theme.js
var activity = ce({
  base: "relative border-s border-gray-200 dark:border-gray-700"
});
var activityitem = ce({
  slots: {
    li: "mb-10 ms-6",
    span: "flex absolute -start-3 justify-center items-center w-6 h-6 bg-blue-200 rounded-full ring-8 ring-white dark:ring-gray-900 dark:bg-blue-900",
    img: "rounded-full shadow-lg",
    outerDiv: "p-4 bg-white rounded-lg border border-gray-200 shadow-xs dark:bg-gray-700 dark:border-gray-600",
    innerDiv: "justify-between items-center mb-3 sm:flex",
    time: "mb-1 text-xs font-normal text-gray-400 sm:order-last sm:mb-0",
    title: "text-sm font-normal text-gray-500 lex dark:text-gray-300",
    text: "p-3 text-xs italic font-normal text-gray-500 bg-gray-50 rounded-lg border border-gray-200 dark:bg-gray-600 dark:border-gray-500 dark:text-gray-300"
  }
});
var group = ce({
  slots: {
    div: "p-5 mb-4 bg-gray-50 rounded-lg border border-gray-100 dark:bg-gray-800 dark:border-gray-700",
    time: "text-lg font-semibold text-gray-900 dark:text-white",
    ol: "mt-3 divide-y divider-gray-200 dark:divide-gray-700"
  }
});
var groupitem = ce({
  slots: {
    a: "block items-center p-3 sm:flex hover:bg-gray-100 dark:hover:bg-gray-700",
    img: "me-3 mb-3 w-12 h-12 rounded-full sm:mb-0",
    div: "text-gray-600 dark:text-gray-400",
    title: "text-base font-normal",
    span: "inline-flex items-center text-xs font-normal text-gray-500 dark:text-gray-400"
  }
});
var timeline = ce({
  variants: {
    order: {
      group: "p-5 mb-4 bg-gray-50 rounded-lg border border-gray-100 dark:bg-gray-800 dark:border-gray-700",
      horizontal: "sm:flex",
      activity: "relative border-s border-gray-200 dark:border-gray-700",
      vertical: "relative border-s border-gray-200 dark:border-gray-700",
      default: "relative border-s border-gray-200 dark:border-gray-700"
    }
  },
  defaultVariants: {
    order: "default"
  }
});
var timelineitem = ce({
  slots: {
    li: "",
    div: "",
    time: "",
    h3: "",
    svg: "w-3 h-3 text-primary-600 dark:text-primary-400"
  },
  variants: {
    order: {
      default: {
        li: "mb-10 ms-4",
        div: "absolute w-3 h-3 bg-gray-200 rounded-full mt-1.5 -start-1.5 border border-white dark:border-gray-900 dark:bg-gray-700",
        time: "mb-1 text-sm font-normal leading-none text-gray-400 dark:text-gray-500",
        h3: "text-lg font-semibold text-gray-900 dark:text-white"
      },
      vertical: {
        li: "mb-10 ms-6",
        div: "flex absolute -start-3 justify-center items-center w-6 h-6 bg-primary-200 rounded-full ring-8 ring-white dark:ring-gray-900 dark:bg-primary-900",
        time: "mb-1 text-sm font-normal leading-none text-gray-400 dark:text-gray-500",
        h3: "flex items-center mb-1 text-lg font-semibold text-gray-900 dark:text-white"
      },
      horizontal: {
        li: "relative mb-6 sm:mb-0",
        div: "flex items-center",
        time: "mb-1 text-sm font-normal leading-none text-gray-400 dark:text-gray-500",
        h3: "text-lg font-semibold text-gray-900 dark:text-white"
      },
      activity: {
        li: "mb-10 ms-6",
        div: "flex absolute -start-3 justify-center items-center w-6 h-6 bg-primary-200 rounded-full ring-8 ring-white dark:ring-gray-900 dark:bg-primary-900",
        time: "mb-1 text-sm font-normal leading-none text-gray-400 dark:text-gray-500",
        h3: "text-lg font-semibold text-gray-900 dark:text-white"
      },
      group: {
        li: "",
        div: "p-5 mb-4 bg-gray-50 rounded-lg border border-gray-100 dark:bg-gray-800 dark:border-gray-700",
        time: "text-lg font-semibold text-gray-900 dark:text-white",
        h3: "text-lg font-semibold text-gray-900 dark:text-white"
      }
    }
  },
  defaultVariants: {
    order: "default"
  }
});

// node_modules/flowbite-svelte/dist/toast/Toast.svelte
Toast[FILENAME] = "node_modules/flowbite-svelte/dist/toast/Toast.svelte";
var root_231 = add_locations(from_html(`<div><!></div>`), Toast[FILENAME], [[16, 6]]);
var root_156 = add_locations(from_html(`<div><!> <div><!></div> <!></div>`), Toast[FILENAME], [[14, 2, [[21, 4]]]]);
function Toast($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Toast);
  let toastStatus = prop($$props, "toastStatus", 15, true), dismissable = prop($$props, "dismissable", 3, true), color = prop($$props, "color", 3, "primary"), align = prop($$props, "align", 3, true), transition2 = prop($$props, "transition", 3, fly), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "icon",
      "toastStatus",
      "dismissable",
      "color",
      "position",
      "iconClass",
      "contentClass",
      "align",
      "params",
      "transition",
      "class"
    ],
    "restProps"
  );
  const $$d = user_derived(() => toast({
    color: color(),
    position: $$props.position,
    align: align()
  })), base = user_derived(() => {
    let {
      base: $$1,
      icon: $$2,
      content: $$3,
      close: $$4
    } = get($$d);
    return $$1;
  }), iconVariants = user_derived(() => {
    let {
      base: $$1,
      icon: $$2,
      content: $$3,
      close: $$4
    } = get($$d);
    return $$2;
  }), content = user_derived(() => {
    let {
      base: $$1,
      icon: $$2,
      content: $$3,
      close: $$4
    } = get($$d);
    return $$3;
  }), close = user_derived(() => {
    let {
      base: $$1,
      icon: $$2,
      content: $$3,
      close: $$4
    } = get($$d);
    return $$4;
  });
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_2 = ($$anchor2) => {
      var div = root_156();
      let attributes;
      var node_1 = child(div);
      {
        var consequent = ($$anchor3) => {
          var div_1 = root_231();
          var node_2 = child(div_1);
          snippet(node_2, () => $$props.icon);
          reset(div_1);
          template_effect(($0) => set_class(div_1, 1, $0), [
            () => clsx2(get(iconVariants)({ class: $$props.iconClass }))
          ]);
          append($$anchor3, div_1);
        };
        if_block(node_1, ($$render) => {
          if ($$props.icon) $$render(consequent);
        });
      }
      var div_2 = sibling(node_1, 2);
      var node_3 = child(div_2);
      snippet(node_3, () => $$props.children);
      reset(div_2);
      var node_4 = sibling(div_2, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_5 = first_child(fragment_1);
          const expression = user_derived(() => get(close)());
          CloseButton_default(node_5, {
            get class() {
              return get(expression);
            },
            ariaLabel: "Remove toast",
            get color() {
              return color();
            },
            onclick: () => {
              toastStatus(false);
            }
          });
          append($$anchor3, fragment_1);
        };
        if_block(node_4, ($$render) => {
          if (dismissable()) $$render(consequent_1);
        });
      }
      reset(div);
      template_effect(
        ($0, $1) => {
          attributes = set_attributes(div, attributes, { role: "alert", ...restProps, class: $0 });
          set_class(div_2, 1, $1);
        },
        [
          () => get(base)({ class: $$props.class }),
          () => clsx2(get(content)({ class: $$props.contentClass }))
        ]
      );
      transition(3, div, transition2, () => $$props.params);
      append($$anchor2, div);
    };
    if_block(node, ($$render) => {
      if (toastStatus()) $$render(consequent_2);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Toast = hmr(Toast, () => Toast[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toast[HMR].source;
    set(Toast[HMR].source, module.default[HMR].original);
  });
}
var Toast_default = Toast;

// node_modules/flowbite-svelte/dist/toast/theme.js
var toast = ce({
  slots: {
    base: "flex w-full max-w-xs p-4 text-gray-500 bg-white rounded-lg shadow-sm dark:text-gray-400 dark:bg-gray-800 gap-3",
    icon: "w-8 h-8 inline-flex items-center justify-center shrink-0 rounded-lg",
    content: "w-full text-sm font-normal",
    close: "ms-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700"
  },
  variants: {
    position: {
      "top-left": { base: "absolute top-5 start-5" },
      "top-right": { base: "absolute top-5 end-5" },
      "bottom-left": { base: "absolute bottom-5 start-5" },
      "bottom-right": { base: "absolute bottom-5 end-5" }
    },
    color: {
      // primary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      primary: {
        icon: "text-primary-500 bg-primary-100 dark:bg-primary-800 dark:text-primary-200",
        close: "text-primary-500 dark:text-primary-200 hover:text-primary-600 dark:hover:text-primary-500"
      },
      gray: {
        icon: "text-gray-500 bg-gray-100 dark:bg-gray-700 dark:text-gray-200",
        close: "text-gray-500 dark:text-gray-200 hover:text-gray-600 dark:hover:text-gray-500"
      },
      red: {
        icon: "text-red-500 bg-red-100 dark:bg-red-800 dark:text-red-200",
        close: "text-red-500 dark:text-red-200 hover:text-red-600 dark:hover:text-red-500"
      },
      orange: {
        icon: "text-orange-500 bg-orange-100 dark:bg-orange-700 dark:text-orange-200",
        close: "text-orange-500 dark:text-orange-200 hover:text-orange-600 dark:hover:text-orange-500"
      },
      amber: {
        icon: "text-amber-500 bg-amber-100 dark:bg-amber-700 dark:text-amber-200",
        close: "text-amber-500 dark:text-amber-200 hover:text-amber-600 dark:hover:text-amber-500"
      },
      yellow: {
        icon: "text-yellow-500 bg-yellow-100 dark:bg-yellow-800 dark:text-yellow-200",
        close: "text-yellow-500 dark:text-yellow-200 hover:text-yellow-600 dark:hover:text-yellow-500"
      },
      lime: {
        icon: "text-lime-500 bg-lime-100 dark:bg-lime-700 dark:text-lime-200",
        close: "text-lime-500 dark:text-lime-200 hover:text-lime-600 dark:hover:text-lime-500"
      },
      green: {
        icon: "text-green-500 bg-green-100 dark:bg-green-800 dark:text-green-200",
        close: "text-green-500 dark:text-green-200 hover:text-green-600 dark:hover:text-green-500"
      },
      emerald: {
        icon: "text-emerald-500 bg-emerald-100 dark:bg-emerald-800 dark:text-emerald-200",
        close: "text-emerald-500 dark:text-emerald-200 hover:text-emerald-600 dark:hover:text-emerald-500"
      },
      teal: {
        icon: "text-teal-500 bg-teal-100 dark:bg-teal-800 dark:text-teal-200",
        close: "text-teal-500 dark:text-teal-200 hover:text-teal-600 dark:hover:text-teal-500"
      },
      cyan: {
        icon: "text-cyan-500 bg-cyan-100 dark:bg-cyan-800 dark:text-cyan-200",
        close: "text-cyan-500 dark:text-cyan-200 hover:text-cyan-600 dark:hover:text-cyan-500"
      },
      sky: {
        icon: "text-sky-500 bg-sky-100 dark:bg-sky-800 dark:text-sky-200",
        close: "text-sky-500 dark:text-sky-200 hover:text-sky-600 dark:hover:text-sky-500"
      },
      blue: {
        icon: "text-blue-500 bg-blue-100 dark:bg-blue-800 dark:text-blue-200",
        close: "text-blue-500 dark:text-blue-200 hover:text-blue-600 dark:hover:text-blue-500"
      },
      indigo: {
        icon: "text-indigo-500 bg-indigo-100 dark:bg-indigo-800 dark:text-indigo-200",
        close: "text-indigo-500 dark:text-indigo-200 hover:text-indigo-600 dark:hover:text-indigo-500"
      },
      violet: {
        icon: "text-violet-500 bg-violet-100 dark:bg-violet-800 dark:text-violet-200",
        close: "text-violet-500 dark:text-violet-200 hover:text-violet-600 dark:hover:text-violet-500"
      },
      purple: {
        icon: "text-purple-500 bg-purple-100 dark:bg-purple-800 dark:text-purple-200",
        close: "text-purple-500 dark:text-purple-200 hover:text-purple-600 dark:hover:text-purple-500"
      },
      fuchsia: {
        icon: "text-fuchsia-500 bg-fuchsia-100 dark:bg-fuchsia-800 dark:text-fuchsia-200",
        close: "text-fuchsia-500 dark:text-fuchsia-200 hover:text-fuchsia-600 dark:hover:text-fuchsia-500"
      },
      pink: {
        icon: "text-pink-500 bg-pink-100 dark:bg-pink-700 dark:text-pink-200",
        close: "text-pink-500 dark:text-pink-200 hover:text-pink-600 dark:hover:text-pink-500"
      },
      rose: {
        icon: "text-rose-500 bg-rose-100 dark:bg-rose-700 dark:text-rose-200",
        close: "text-rose-500 dark:text-rose-200 hover:text-rose-600 dark:hover:text-rose-500"
      }
    },
    align: {
      true: { base: "items-center" },
      false: { base: "items-start" }
    }
  }
});

// node_modules/flowbite-svelte/dist/utils/CloseButton.svelte
CloseButton[FILENAME] = "node_modules/flowbite-svelte/dist/utils/CloseButton.svelte";
var root_232 = add_locations(from_html(`<span class="sr-only"> </span>`), CloseButton[FILENAME], [[13, 14]]);
var root_414 = add_locations(from_svg(`<svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>`), CloseButton[FILENAME], [[17, 6, [[18, 8]]]]);
var root_157 = add_locations(from_html(`<button><!> <!></button>`), CloseButton[FILENAME], [[12, 2]]);
var root_69 = add_locations(from_html(`<span class="sr-only"> </span>`), CloseButton[FILENAME], [[24, 14]]);
var root_87 = add_locations(from_svg(`<svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>`), CloseButton[FILENAME], [[28, 6, [[29, 8]]]]);
var root_514 = add_locations(from_html(`<a><!> <!></a>`), CloseButton[FILENAME], [[23, 2]]);
function CloseButton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, CloseButton);
  let color = prop($$props, "color", 3, "gray"), name = prop($$props, "name", 3, "Close"), size = prop($$props, "size", 3, "md"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "color",
      "onclick",
      "name",
      "ariaLabel",
      "size",
      "class",
      "svgClass"
    ],
    "restProps"
  );
  const $$d = user_derived(() => closeButtonVariants({ color: color(), size: size() })), base = user_derived(() => {
    let { base: $$1, svg: $$2 } = get($$d);
    return $$1;
  }), svg = user_derived(() => {
    let { base: $$1, svg: $$2 } = get($$d);
    return $$2;
  });
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_2 = ($$anchor2) => {
      var button2 = root_157();
      let attributes;
      var node_1 = child(button2);
      {
        var consequent = ($$anchor3) => {
          var span2 = root_232();
          var text2 = child(span2, true);
          reset(span2);
          template_effect(() => set_text(text2, name()));
          append($$anchor3, span2);
        };
        if_block(node_1, ($$render) => {
          if (name()) $$render(consequent);
        });
      }
      var node_2 = sibling(node_1, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_3 = first_child(fragment_1);
          snippet(node_3, () => $$props.children);
          append($$anchor3, fragment_1);
        };
        var alternate = ($$anchor3) => {
          var svg_1 = root_414();
          template_effect(($0) => set_class(svg_1, 0, $0), [
            () => clsx2(get(svg)({ class: $$props.svgClass }))
          ]);
          append($$anchor3, svg_1);
        };
        if_block(node_2, ($$render) => {
          if ($$props.children) $$render(consequent_1);
          else $$render(alternate, false);
        });
      }
      reset(button2);
      template_effect(
        ($0) => attributes = set_attributes(button2, attributes, {
          type: "button",
          ...restProps,
          class: $0,
          onclick: $$props.onclick,
          "aria-label": $$props.ariaLabel ?? name()
        }),
        [
          () => get(base)({ class: clsx_default($$props.class) })
        ]
      );
      append($$anchor2, button2);
    };
    var alternate_1 = ($$anchor2) => {
      var a = root_514();
      let attributes_1;
      var node_4 = child(a);
      {
        var consequent_3 = ($$anchor3) => {
          var span_1 = root_69();
          var text_1 = child(span_1, true);
          reset(span_1);
          template_effect(() => set_text(text_1, name()));
          append($$anchor3, span_1);
        };
        if_block(node_4, ($$render) => {
          if (name()) $$render(consequent_3);
        });
      }
      var node_5 = sibling(node_4, 2);
      {
        var consequent_4 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_6 = first_child(fragment_2);
          snippet(node_6, () => $$props.children);
          append($$anchor3, fragment_2);
        };
        var alternate_2 = ($$anchor3) => {
          var svg_2 = root_87();
          template_effect(($0) => set_class(svg_2, 0, $0), [() => clsx2(get(svg)())]);
          append($$anchor3, svg_2);
        };
        if_block(node_5, ($$render) => {
          if ($$props.children) $$render(consequent_4);
          else $$render(alternate_2, false);
        });
      }
      reset(a);
      template_effect(
        ($0) => attributes_1 = set_attributes(a, attributes_1, {
          ...restProps,
          onclick: $$props.onclick,
          class: $0,
          "aria-label": $$props.ariaLabel ?? name()
        }),
        [
          () => get(base)({ class: clsx_default($$props.class) })
        ]
      );
      append($$anchor2, a);
    };
    if_block(node, ($$render) => {
      if (strict_equals($$props.href, void 0)) $$render(consequent_2);
      else $$render(alternate_1, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloseButton = hmr(CloseButton, () => CloseButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloseButton[HMR].source;
    set(CloseButton[HMR].source, module.default[HMR].original);
  });
}
var CloseButton_default = CloseButton;

// node_modules/flowbite-svelte/dist/utils/theme.js
var closeButtonVariants = ce({
  base: "focus:outline-hidden whitespace-normal",
  variants: {
    // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
    color: {
      primary: "text-primary-500 focus:ring-primary-400 hover:bg-primary-200 dark:hover:bg-primary-800 dark:hover:text-primary-300",
      secondary: "text-secondary-500 focus:ring-secondary-400 hover:bg-secondary-200 dark:hover:bg-secondary-800 dark:hover:text-secondary-300",
      gray: "text-gray-500 focus:ring-gray-400 hover:bg-gray-200 dark:hover:bg-gray-800 dark:hover:text-gray-300",
      red: "text-red-500 focus:ring-red-400 hover:bg-red-200 dark:hover:bg-red-800 dark:hover:text-red-300",
      orange: "text-orange-500 focus:ring-orange-400 hover:bg-orange-200 dark:hover:bg-orange-800 dark:hover:text-orange-300",
      amber: "text-amber-500 focus:ring-amber-400 hover:bg-amber-200 dark:hover:bg-amber-800 dark:hover:text-amber-300",
      yellow: "text-yellow-500 focus:ring-yellow-400 hover:bg-yellow-200 dark:hover:bg-yellow-800 dark:hover:text-yellow-300",
      lime: "text-lime-500 focus:ring-lime-400 hover:bg-lime-200 dark:hover:bg-lime-800 dark:hover:text-lime-300",
      green: "text-green-500 focus:ring-green-400 hover:bg-green-200 dark:hover:bg-green-800 dark:hover:text-green-300",
      emerald: "text-emerald-500 focus:ring-emerald-400 hover:bg-emerald-200 dark:hover:bg-emerald-800 dark:hover:text-emerald-300",
      teal: "text-teal-500 focus:ring-teal-400 hover:bg-teal-200 dark:hover:bg-teal-800 dark:hover:text-teal-300",
      cyan: "text-cyan-500 focus:ring-cyan-400 hover:bg-cyan-200 dark:hover:bg-cyan-800 dark:hover:text-cyan-300",
      sky: "text-sky-500 focus:ring-sky-400 hover:bg-sky-200 dark:hover:bg-sky-800 dark:hover:text-sky-300",
      blue: "text-blue-500 focus:ring-blue-400 hover:bg-blue-200 dark:hover:bg-blue-800 dark:hover:text-blue-300",
      indigo: "text-indigo-500 focus:ring-indigo-400 hover:bg-indigo-200 dark:hover:bg-indigo-800 dark:hover:text-indigo-300",
      violet: "text-violet-500 focus:ring-violet-400 hover:bg-violet-200 dark:hover:bg-violet-800 dark:hover:text-violet-300",
      purple: "text-purple-500 focus:ring-purple-400 hover:bg-purple-200 dark:hover:bg-purple-800 dark:hover:text-purple-300",
      fuchsia: "text-fuchsia-500 focus:ring-fuchsia-400 hover:bg-fuchsia-200 dark:hover:bg-fuchsia-800 dark:hover:text-fuchsia-300",
      pink: "text-pink-500 focus:ring-pink-400 hover:bg-pink-200 dark:hover:bg-pink-800 dark:hover:text-pink-300",
      rose: "text-rose-500 focus:ring-rose-400 hover:bg-rose-200 dark:hover:bg-rose-800 dark:hover:text-rose-300",
      none: ""
    },
    size: {
      xs: "m-0.5 rounded-xs focus:ring-1 p-0.5",
      sm: "m-0.5 rounded-sm focus:ring-1 p-0.5",
      md: "m-0.5 rounded-lg focus:ring-2 p-1.5",
      lg: "m-0.5 rounded-lg focus:ring-2 p-2.5"
    }
  },
  defaultVariants: {
    color: "gray",
    size: "md",
    href: null
  },
  slots: {
    svg: ""
  },
  compoundVariants: [
    {
      size: "xs",
      class: {
        svg: "w-3 h-3"
      }
    },
    {
      size: "sm",
      class: {
        svg: "w-3.5 h-3.5"
      }
    },
    {
      size: ["md", "lg"],
      class: {
        svg: "w-5 h-5"
      }
    },
    {
      size: ["xs", "sm", "md", "lg"],
      color: "none",
      class: "focus:ring-0 rounded-none m-0"
    }
  ]
});

// node_modules/flowbite-svelte/dist/utils/actions.svelte.js
function trapFocus(node, options = {}) {
  if (strict_equals(options, null)) {
    return {
      update(newOptions = {}) {
        options = newOptions;
      },
      destroy() {
      }
    };
  }
  const previous = document.activeElement;
  let isClosingViaOutsideClick = false;
  let isFocusMovedOutside = false;
  function focusable() {
    return Array.from(node.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'));
  }
  function handleKeydown(event3) {
    if (strict_equals(event3.key, "Tab") && strict_equals(options, null, false)) {
      const current = document.activeElement;
      const elements = focusable();
      const first = elements.at(0);
      const last = elements.at(-1);
      if (event3.shiftKey && strict_equals(current, first)) {
        last == null ? void 0 : last.focus();
        event3.preventDefault();
      }
      if (!event3.shiftKey && strict_equals(current, last)) {
        first == null ? void 0 : first.focus();
        event3.preventDefault();
      }
    } else if (strict_equals(event3.key, "Escape") && strict_equals(options, null, false) && options.onEscape) {
      event3.preventDefault();
      isClosingViaOutsideClick = true;
      options.onEscape();
    }
  }
  function handleFocusOut(event3) {
    if (!node.contains(event3.relatedTarget) && strict_equals(event3.relatedTarget, previous, false)) {
      isFocusMovedOutside = true;
    }
  }
  user_effect(() => {
    if (strict_equals(options, null, false)) {
      isClosingViaOutsideClick = !!options.isClosing;
      if (!isClosingViaOutsideClick && !isFocusMovedOutside) {
        const elements = focusable();
        if (elements.length > 0) {
          elements[0].focus();
        }
      }
      node.addEventListener("keydown", handleKeydown);
      node.addEventListener("focusout", handleFocusOut);
      return () => {
        node.removeEventListener("keydown", handleKeydown);
        node.removeEventListener("focusout", handleFocusOut);
        if (!isClosingViaOutsideClick && !isFocusMovedOutside && previous) {
          setTimeout(
            () => {
              previous.focus({ preventScroll: true });
            },
            0
          );
        }
      };
    }
  });
  return {
    update(newOptions = {}) {
      if (newOptions && strict_equals(newOptions.isClosing, void 0, false)) {
        isClosingViaOutsideClick = newOptions.isClosing;
      }
      options = newOptions;
      if (strict_equals(options, null)) {
        node.removeEventListener("keydown", handleKeydown);
        node.removeEventListener("focusout", handleFocusOut);
      } else if (strict_equals(options, null, false)) {
        node.removeEventListener("keydown", handleKeydown);
        node.removeEventListener("focusout", handleFocusOut);
        node.addEventListener("keydown", handleKeydown);
        node.addEventListener("focusout", handleFocusOut);
      }
    },
    destroy() {
      if (strict_equals(options, null, false)) {
        node.removeEventListener("keydown", handleKeydown);
        node.removeEventListener("focusout", handleFocusOut);
        if (!isClosingViaOutsideClick && !isFocusMovedOutside && previous) {
          setTimeout(
            () => {
              previous.focus({ preventScroll: true });
            },
            0
          );
        }
      }
    }
  };
}

// node_modules/flowbite-svelte/dist/utils/index.js
function cn(...inputs) {
  return twMerge(clsx(inputs));
}

// node_modules/flowbite-svelte/dist/video/Video.svelte
Video[FILENAME] = "node_modules/flowbite-svelte/dist/video/Video.svelte";
var root90 = add_locations(from_html(`<video><source/> <!> <track kind="captions"/> Your browser does not support the video tag.</video>`, 2), Video[FILENAME], [[7, 0, [[8, 2], [12, 2]]]]);
function Video($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Video);
  let type = prop($$props, "type", 3, "video/mp4"), srclang = prop($$props, "srclang", 3, "en"), label2 = prop($$props, "label", 3, "english_captions"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "type",
      "trackSrc",
      "src",
      "srclang",
      "label",
      "class"
    ],
    "restProps"
  );
  var video = root90();
  let attributes;
  var source = child(video);
  var node = sibling(source, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.children);
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if ($$props.children) $$render(consequent);
    });
  }
  var track = sibling(node, 2);
  next();
  reset(video);
  template_effect(() => {
    attributes = set_attributes(video, attributes, { ...restProps, class: $$props.class });
    set_attribute(source, "src", $$props.src);
    set_attribute(source, "type", type());
    set_attribute(track, "src", $$props.trackSrc);
    set_attribute(track, "srclang", srclang());
    set_attribute(track, "label", label2());
  });
  append($$anchor, video);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Video = hmr(Video, () => Video[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Video[HMR].source;
    set(Video[HMR].source, module.default[HMR].original);
  });
}
var Video_default = Video;

// node_modules/flowbite-svelte/dist/forms/button-toggle/ButtonToggleGroup.svelte
ButtonToggleGroup[FILENAME] = "node_modules/flowbite-svelte/dist/forms/button-toggle/ButtonToggleGroup.svelte";
var root91 = add_locations(from_html(`<div class="inline"><div><!></div></div>`), ButtonToggleGroup[FILENAME], [[64, 0, [[65, 2]]]]);
function ButtonToggleGroup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ButtonToggleGroup);
  let multiSelect = prop($$props, "multiSelect", 3, false), name = prop($$props, "name", 3, "toggle-group"), value = prop($$props, "value", 23, () => multiSelect() ? [] : null), size = prop($$props, "size", 3, "md"), roundedSize = prop($$props, "roundedSize", 3, "md"), onSelect = prop($$props, "onSelect", 3, (val) => {
  }), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "multiSelect",
      "name",
      "value",
      "color",
      "size",
      "roundedSize",
      "onSelect",
      "children",
      "ctxIconClass",
      "ctxBtnClass",
      "class"
    ],
    "restProps"
  );
  const base = user_derived(() => buttonToggleGroup({ roundedSize: roundedSize() }));
  let selectedValues = state(proxy(multiSelect() ? [] : null));
  user_effect(() => {
    value(get(selectedValues));
    onSelect()(get(selectedValues));
  });
  function toggleSelected(toggleValue) {
    if (multiSelect()) {
      const currentSelected = [...get(selectedValues)];
      const index2 = currentSelected.indexOf(toggleValue);
      if (strict_equals(index2, -1)) {
        set(selectedValues, [...currentSelected, toggleValue], true);
      } else {
        currentSelected.splice(index2, 1);
        set(selectedValues, currentSelected, true);
      }
    } else {
      set(selectedValues, strict_equals(toggleValue, get(selectedValues)) ? null : toggleValue, true);
    }
  }
  function isSelected(toggleValue) {
    if (multiSelect()) {
      return get(selectedValues).includes(toggleValue);
    } else {
      return strict_equals(get(selectedValues), toggleValue);
    }
  }
  const buttonToggleContext = { toggleSelected, isSelected };
  setContext("button-toggle-group", buttonToggleContext);
  setContext("multiSelect", multiSelect());
  setContext("buttonToggleColor", $$props.color);
  setContext("buttonToggleSize", size());
  setContext("buttonToggleRounded", roundedSize());
  setContext("ctxIconClass", $$props.ctxIconClass);
  setContext("ctxBtnClass", $$props.ctxBtnClass);
  var div = root91();
  var div_1 = child(div);
  let attributes;
  var node = child(div_1);
  snippet(node, () => $$props.children);
  reset(div_1);
  reset(div);
  template_effect(
    ($0) => attributes = set_attributes(div_1, attributes, {
      class: $0,
      role: multiSelect() ? "group" : "radiogroup",
      "aria-label": name(),
      ...restProps
    }),
    [
      () => twMerge(get(base), $$props.class)
    ]
  );
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ButtonToggleGroup = hmr(ButtonToggleGroup, () => ButtonToggleGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ButtonToggleGroup[HMR].source;
    set(ButtonToggleGroup[HMR].source, module.default[HMR].original);
  });
}
var ButtonToggleGroup_default = ButtonToggleGroup;

// node_modules/flowbite-svelte/dist/forms/button-toggle/CheckIcon.svelte
CheckIcon[FILENAME] = "node_modules/flowbite-svelte/dist/forms/button-toggle/CheckIcon.svelte";
var root92 = add_locations(from_svg(`<svg><polyline points="20 6 9 17 4 12"></polyline></svg>`), CheckIcon[FILENAME], [[5, 0, [[6, 2]]]]);
function CheckIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, CheckIcon);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "class"], "restProps");
  var svg = root92();
  let attributes;
  template_effect(() => attributes = set_attributes(svg, attributes, {
    xmlns: "http://www.w3.org/2000/svg",
    width: "16",
    height: "16",
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    "stroke-width": "2",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    class: $$props.class,
    ...restProps
  }));
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CheckIcon = hmr(CheckIcon, () => CheckIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CheckIcon[HMR].source;
    set(CheckIcon[HMR].source, module.default[HMR].original);
  });
}
var CheckIcon_default = CheckIcon;

// node_modules/flowbite-svelte/dist/forms/button-toggle/theme.js
var buttonToggleGroup = ce({
  base: "inline-flex border border-gray-300 overflow-hidden",
  variants: {
    roundedSize: {
      sm: "rounded-sm",
      md: "rounded-md",
      lg: "rounded-lg",
      xl: "rounded-xl",
      full: "rounded-full"
    }
  }
});
var buttonToggle = ce({
  base: "relative flex items-center transition-all duration-200  focus:outline-none border-r last:border-r-0",
  variants: {
    selected: {
      true: "",
      false: ""
    },
    size: {
      sm: "p-1 px-2 text-sm",
      md: "p-2 px-4 text-base",
      lg: "p-3 px-5 text-lg",
      xl: "p-4 px-6 text-xl"
    },
    roundedSize: {
      sm: "first:rounded-s-sm last:rounded-e-sm",
      md: "first:rounded-s-md last:rounded-e-md",
      lg: "first:rounded-s-lg last:rounded-e-lg",
      xl: "first:rounded-s-xl last:rounded-e-xl",
      full: "first:rounded-s-full last:rounded-e-full"
    },
    color: {
      primary: "data-[selected=true]:bg-primary-200 data-[selected=false]:hover:bg-gray-100",
      secondary: "data-[selected=true]:bg-secondary-200 data-[selected=false]:hover:bg-gray-100",
      gray: "data-[selected=true]:bg-gray-200 data-[selected=false]:hover:bg-gray-100",
      red: "data-[selected=true]:bg-red-200 data-[selected=false]:hover:bg-red-50",
      orange: "data-[selected=true]:bg-orange-200 data-[selected=false]:hover:bg-orange-50",
      amber: "data-[selected=true]:bg-amber-200 data-[selected=false]:hover:bg-amber-50",
      yellow: "data-[selected=true]:bg-yellow-200 data-[selected=false]:hover:bg-yellow-50",
      lime: "data-[selected=true]:bg-lime-200 data-[selected=false]:hover:bg-lime-50",
      green: "data-[selected=true]:bg-green-200 data-[selected=false]:hover:bg-green-50",
      emerald: "data-[selected=true]:bg-emerald-200 data-[selected=false]:hover:bg-emerald-50",
      teal: "data-[selected=true]:bg-teal-200 data-[selected=false]:hover:bg-teal-50",
      cyan: "data-[selected=true]:bg-cyan-200 data-[selected=false]:hover:bg-cyan-50",
      sky: "data-[selected=true]:bg-sky-200 data-[selected=false]:hover:bg-sky-50",
      blue: "data-[selected=true]:bg-blue-200 data-[selected=false]:hover:bg-blue-50",
      indigo: "data-[selected=true]:bg-indigo-200 data-[selected=false]:hover:bg-indigo-50",
      violet: "data-[selected=true]:bg-violet-200 data-[selected=false]:hover:bg-violet-50",
      purple: "data-[selected=true]:bg-purple-200 data-[selected=false]:hover:bg-purple-50",
      fuchsia: "data-[selected=true]:bg-fuchsia-200 data-[selected=false]:hover:bg-fuchsia-50",
      pink: "data-[selected=true]:bg-pink-200 data-[selected=false]:hover:bg-pink-50",
      rose: "data-[selected=true]:bg-rose-200 data-[selected=false]:hover:bg-rose-50",
      none: ""
    }
  },
  defaultVariants: {
    selected: false,
    color: "primary",
    size: "md",
    roundedSize: "md"
  }
});
var buttonToggleContent = ce({
  base: "flex items-center w-full overflow-hidden relative"
});
var buttonToggleText = ce({
  base: "transition-all duration-200 ml-0",
  variants: {
    selected: {
      true: "ml-5",
      false: ""
    }
  },
  defaultVariants: {
    selected: false
  }
});

// node_modules/flowbite-svelte/dist/forms/button-toggle/ButtonToggle.svelte
ButtonToggle[FILENAME] = "node_modules/flowbite-svelte/dist/forms/button-toggle/ButtonToggle.svelte";
var root93 = add_locations(from_html(`<button><div><!> <span><!></span></div></button>`), ButtonToggle[FILENAME], [
  [29, 0, [[30, 2, [[38, 4]]]]]
]);
function ButtonToggle($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ButtonToggle);
  let selected = prop($$props, "selected", 7, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "value",
      "selected",
      "children",
      "iconSlot",
      "color",
      "class",
      "iconClass",
      "txtClass"
    ],
    "restProps"
  );
  const { toggleSelected, isSelected } = getContext("button-toggle-group");
  const multiSelect = getContext("multiSelect");
  const actualColor = getContext("buttonToggleColor") ? getContext("buttonToggleColor") : $$props.color ? $$props.color : "primary";
  const size = getContext("buttonToggleSize");
  const roundedSize = getContext("buttonToggleRounded");
  const ctxIconClass = getContext("ctxIconClass");
  const actualIconClass = ctxIconClass || $$props.iconClass;
  const ctxBtnClass = getContext("ctxBtnClass");
  function handleClick() {
    toggleSelected($$props.value);
  }
  user_effect(() => {
    selected(isSelected($$props.value));
  });
  var button2 = root93();
  let attributes;
  var div = child(button2);
  var node = child(div);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      {
        var consequent = ($$anchor3) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          snippet(node_2, () => $$props.iconSlot);
          append($$anchor3, fragment_1);
        };
        var alternate = ($$anchor3) => {
          var fragment_2 = comment();
          var node_3 = first_child(fragment_2);
          const expression = user_derived(() => twMerge("absolute left-0 flex-shrink-0 text-green-600", actualIconClass));
          CheckIcon_default(node_3, {
            get class() {
              return get(expression);
            }
          });
          append($$anchor3, fragment_2);
        };
        if_block(node_1, ($$render) => {
          if ($$props.iconSlot) $$render(consequent);
          else $$render(alternate, false);
        });
      }
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if (selected()) $$render(consequent_1);
    });
  }
  var span2 = sibling(node, 2);
  var node_4 = child(span2);
  snippet(node_4, () => $$props.children);
  reset(span2);
  reset(div);
  reset(button2);
  template_effect(
    ($0, $1, $2) => {
      attributes = set_attributes(button2, attributes, {
        type: "button",
        class: $0,
        "data-selected": selected(),
        onclick: handleClick,
        role: multiSelect ? "checkbox" : "radio",
        "aria-checked": selected(),
        ...restProps
      });
      set_class(div, 1, $1);
      set_class(span2, 1, $2);
    },
    [
      () => twMerge(
        buttonToggle({
          selected: selected(),
          color: actualColor,
          size,
          roundedSize
        }),
        ctxBtnClass,
        $$props.class
      ),
      () => clsx2(buttonToggleContent()),
      () => clsx2(buttonToggleText({
        selected: selected(),
        class: $$props.txtClass
      }))
    ]
  );
  append($$anchor, button2);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ButtonToggle = hmr(ButtonToggle, () => ButtonToggle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ButtonToggle[HMR].source;
    set(ButtonToggle[HMR].source, module.default[HMR].original);
  });
}
var ButtonToggle_default = ButtonToggle;

// node_modules/flowbite-svelte/dist/forms/label/theme.js
var label = ce({
  base: "text-sm rtl:text-right font-medium block",
  variants: {
    color: {
      disabled: "text-gray-500 dark:text-gray-500",
      primary: "text-primary-700 dark:text-primary-500",
      secondary: "text-secondary-700 dark:text-secondary-500",
      green: "text-green-700 dark:text-green-500",
      emerald: "text-emerald-700 dark:text-emerald-500",
      red: "text-red-700 dark:text-red-500",
      blue: "text-blue-700 dark:text-blue-500",
      yellow: "text-yellow-700 dark:text-yellow-500",
      orange: "text-orange-700 dark:text-orange-500",
      gray: "text-gray-700 dark:text-gray-200",
      teal: "text-teal-700 dark:text-teal-500",
      cyan: "text-cyan-700 dark:text-cyan-500",
      sky: "text-sky-700 dark:text-sky-500",
      indigo: "text-indigo-700 dark:text-indigo-500",
      lime: "text-lime-700 dark:text-lime-500",
      amber: "text-amber-700 dark:text-amber-500",
      violet: "text-violet-700 dark:text-violet-500",
      purple: "text-purple-700 dark:text-purple-500",
      fuchsia: "text-fuchsia-700 dark:text-fuchsia-500",
      pink: "text-pink-700 dark:text-pink-500",
      rose: "text-rose-700 dark:text-rose-500"
    }
  }
});

// node_modules/flowbite-svelte/dist/forms/label/Label.svelte
Label[FILENAME] = "node_modules/flowbite-svelte/dist/forms/label/Label.svelte";
var root_158 = add_locations(from_html(`<label><!></label>`), Label[FILENAME], [[12, 2]]);
function Label($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Label);
  let color = prop($$props, "color", 3, "gray"), show = prop($$props, "show", 3, true), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "color",
      "show",
      "class"
    ],
    "restProps"
  );
  let base = user_derived(() => label({
    color: color(),
    class: clsx_default($$props.class)
  }));
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var label_1 = root_158();
      let attributes;
      var node_1 = child(label_1);
      snippet(node_1, () => $$props.children);
      reset(label_1);
      template_effect(() => attributes = set_attributes(label_1, attributes, { ...restProps, class: get(base) }));
      append($$anchor2, label_1);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      snippet(node_2, () => $$props.children);
      append($$anchor2, fragment_1);
    };
    if_block(node, ($$render) => {
      if (show()) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Label = hmr(Label, () => Label[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Label[HMR].source;
    set(Label[HMR].source, module.default[HMR].original);
  });
}
var Label_default = Label;

// node_modules/flowbite-svelte/dist/forms/checkbox/Checkbox.svelte
Checkbox[FILENAME] = "node_modules/flowbite-svelte/dist/forms/checkbox/Checkbox.svelte";
var root_233 = add_locations(from_html(`<div><input/> <!></div>`), Checkbox[FILENAME], [[25, 4, [[26, 6]]]]);
var root_415 = add_locations(from_html(`<div><input/> <!></div>`), Checkbox[FILENAME], [[33, 2, [[34, 4]]]]);
function Checkbox($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Checkbox);
  const binding_group = [];
  let color = prop($$props, "color", 3, "primary"), group2 = prop($$props, "group", 31, () => proxy([])), choices = prop($$props, "choices", 19, () => []), checked = prop($$props, "checked", 15, false), disabled = prop($$props, "disabled", 3, false), labelProps = prop($$props, "labelProps", 19, () => ({})), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "color",
      "custom",
      "inline",
      "tinted",
      "rounded",
      "group",
      "choices",
      "checked",
      "indeterminate",
      "class",
      "divClass",
      "disabled",
      "value",
      "labelProps"
    ],
    "restProps"
  );
  const disabledValue = user_derived(() => strict_equals(disabled(), null) ? void 0 : disabled());
  const $$d = user_derived(() => checkbox({
    color: color(),
    tinted: $$props.tinted,
    custom: $$props.custom,
    rounded: $$props.rounded,
    inline: $$props.inline,
    disabled: get(disabledValue)
  })), base = user_derived(() => {
    let { base: $$1, div: $$2 } = get($$d);
    return $$1;
  }), divStyle = user_derived(() => {
    let { base: $$1, div: $$2 } = get($$d);
    return $$2;
  });
  function renderLabel(choice) {
    if (!choice) return "";
    if ($$props.children) {
      return $$props.children(choice);
    }
    return choice.label || "";
  }
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      each(node_1, 17, choices, index, ($$anchor3, choice) => {
        var div = root_233();
        var input2 = child(div);
        remove_input_defaults(input2);
        let attributes;
        var node_2 = sibling(input2, 2);
        Label_default(node_2, spread_props({ show: true }, labelProps, {
          children: wrap_snippet(Checkbox, ($$anchor4, $$slotProps) => {
            next();
            var text2 = text();
            template_effect(($0) => set_text(text2, $0), [() => renderLabel(get(choice))]);
            append($$anchor4, text2);
          }),
          $$slots: { default: true }
        }));
        reset(div);
        template_effect(
          ($0, $1) => {
            set_class(div, 1, $0);
            attributes = set_attributes(input2, attributes, {
              type: "checkbox",
              value: get(choice).value,
              checked: get(choice).checked ?? false,
              disabled: disabled(),
              ...restProps,
              class: $1
            });
          },
          [
            () => clsx2(get(divStyle)({ class: clsx_default($$props.divClass) })),
            () => get(base)({ class: clsx_default($$props.class) })
          ]
        );
        bind_group(
          binding_group,
          [],
          input2,
          () => {
            get(choice).value;
            return group2();
          },
          group2
        );
        append($$anchor3, div);
      });
      append($$anchor2, fragment_1);
    };
    var alternate = ($$anchor2) => {
      var div_1 = root_415();
      var input_1 = child(div_1);
      remove_input_defaults(input_1);
      let attributes_1;
      var node_3 = sibling(input_1, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_3 = comment();
          var node_4 = first_child(fragment_3);
          snippet(node_4, () => $$props.children, () => ({
            value: $$props.value,
            checked: checked(),
            disabled: disabled()
          }));
          append($$anchor3, fragment_3);
        };
        if_block(node_3, ($$render) => {
          if ($$props.children) $$render(consequent_1);
        });
      }
      reset(div_1);
      template_effect(
        ($0, $1) => {
          set_class(div_1, 1, $0);
          attributes_1 = set_attributes(input_1, attributes_1, {
            type: "checkbox",
            value: $$props.value,
            indeterminate: $$props.indeterminate,
            disabled: disabled(),
            ...restProps,
            class: $1
          });
        },
        [
          () => clsx2(get(divStyle)({ class: clsx_default($$props.divClass) })),
          () => get(base)({ class: clsx_default($$props.class) })
        ]
      );
      bind_checked(input_1, checked);
      append($$anchor2, div_1);
    };
    if_block(node, ($$render) => {
      if (choices().length > 0) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Checkbox = hmr(Checkbox, () => Checkbox[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Checkbox[HMR].source;
    set(Checkbox[HMR].source, module.default[HMR].original);
  });
}
var Checkbox_default = Checkbox;

// node_modules/flowbite-svelte/dist/forms/checkbox/theme.js
var checkbox = ce({
  slots: {
    base: "w-4 h-4 bg-gray-100 border-gray-300 dark:ring-offset-gray-800 focus:ring-2 me-2 rounded-sm",
    div: "flex items-center"
  },
  variants: {
    color: {
      // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      primary: {
        base: "text-primary-600 focus:ring-primary-500 dark:focus:ring-primary-600"
      },
      secondary: {
        base: "text-secondary-600 focus:ring-secondary-500 dark:focus:ring-secondary-600"
      },
      gray: {
        base: "text-gray-600 focus:ring-gray-600 dark:ring-offset-gray-800 dark:focus:ring-gray-600"
      },
      red: {
        base: "text-red-600 focus:ring-red-600 dark:ring-offset-red-600 dark:focus:ring-red-600"
      },
      orange: {
        base: "text-orange-600 focus:ring-orange-600 dark:ring-offset-orange-600 dark:focus:ring-orange-600"
      },
      amber: {
        base: "text-amber-600 focus:ring-amber-600 dark:ring-offset-amber-600 dark:focus:ring-amber-600"
      },
      yellow: {
        base: "text-yellow-400 focus:ring-yellow-400 dark:ring-offset-yellow-400 dark:focus:ring-yellow-400"
      },
      lime: {
        base: "text-lime-700 focus:ring-lime-700 dark:ring-offset-lime-700 dark:focus:ring-lime-700"
      },
      green: {
        base: "text-green-600 focus:ring-green-600 dark:ring-offset-green-600 dark:focus:ring-green-600"
      },
      emerald: {
        base: "text-emerald-600 focus:ring-emerald-600 dark:ring-offset-emerald-600 dark:focus:ring-emerald-600"
      },
      teal: {
        base: "text-teal-600 focus:ring-teal-600 dark:ring-offset-teal-600 dark:focus:ring-teal-600"
      },
      cyan: {
        base: "text-cyan-600 focus:ring-cyan-600 dark:ring-offset-cyan-600 dark:focus:ring-cyan-600"
      },
      sky: {
        base: "text-sky-600 focus:ring-sky-600 dark:ring-offset-sky-600 dark:focus:ring-sky-600"
      },
      blue: {
        base: "text-blue-700 focus:ring-blue-600 dark:ring-offset-blue-700 dark:focus:ring-blue-700"
      },
      indigo: {
        base: "text-indigo-700 focus:ring-indigo-700 dark:ring-offset-indigo-700 dark:focus:ring-indigo-700"
      },
      violet: {
        base: "text-violet-600 focus:ring-violet-600 dark:ring-offset-violet-600 dark:focus:ring-violet-600"
      },
      purple: {
        base: "text-purple-600 focus:ring-purple-600 dark:ring-offset-purple-600 dark:focus:ring-purple-600"
      },
      fuchsia: {
        base: "text-fuchsia-600 focus:ring-fuchsia-600 dark:ring-offset-fuchsia-600 dark:focus:ring-fuchsia-600"
      },
      pink: {
        base: "text-pink-600 focus:ring-pink-600 dark:ring-offset-pink-600 dark:focus:ring-pink-600"
      },
      rose: {
        base: "text-rose-600 focus:ring-rose-600 dark:ring-offset-rose-600 dark:focus:ring-rose-600"
      }
    },
    tinted: {
      true: { base: "dark:bg-gray-600 dark:border-gray-500" },
      false: { base: "dark:bg-gray-700 dark:border-gray-600" }
    },
    custom: {
      true: { base: "sr-only peer" }
    },
    rounded: {
      true: { base: "rounded-sm" }
    },
    inline: {
      true: {
        div: "inline-flex",
        false: "flex items-center"
      }
    },
    disabled: {
      true: {
        base: "cursor-not-allowed opacity-50 bg-gray-200 border-gray-300",
        div: "cursor-not-allowed opacity-70"
      }
    }
  },
  defaultVariants: {
    color: "primary",
    disabled: false
  }
});
var checkboxbutton = ce({
  base: "",
  variants: {
    inline: {
      true: "inline-flex",
      false: "flex"
    },
    checked: {
      true: "outline-4 outline-green-500"
    }
  },
  defaultVariants: {
    inline: true
  }
});

// node_modules/flowbite-svelte/dist/forms/checkbox/CheckboxButton.svelte
CheckboxButton[FILENAME] = "node_modules/flowbite-svelte/dist/forms/checkbox/CheckboxButton.svelte";
var root_159 = add_locations(from_html(`<input/> <!>`, 1), CheckboxButton[FILENAME], [[50, 2]]);
function CheckboxButton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, CheckboxButton);
  let group2 = prop($$props, "group", 31, () => proxy([])), checked = prop($$props, "checked", 7), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "group",
      "value",
      "checked",
      "inline",
      "pill",
      "outline",
      "size",
      "color",
      "shadow"
    ],
    "restProps"
  );
  function init(_, _group) {
    group2(_group ?? []);
    if (strict_equals(checked(), void 0) && strict_equals($$props.value, void 0, false)) checked(group2().includes($$props.value));
    onChange();
    user_effect(() => {
      if (strict_equals($$props.value, void 0, false)) {
        checked(group2().includes($$props.value));
      }
    });
  }
  function onChange() {
    if (!$$props.value) return;
    const index2 = group2().indexOf($$props.value);
    if (strict_equals(checked(), void 0)) checked(index2 >= 0);
    if (checked()) {
      if (index2 < 0) {
        group2().push($$props.value);
        group2(group2());
      }
    } else {
      if (index2 >= 0) {
        group2().splice(index2, 1);
        group2(group2());
      }
    }
  }
  let buttonClass = user_derived(() => checkboxbutton({
    inline: $$props.inline,
    checked: checked(),
    class: clsx_default($$props.class)
  }));
  var fragment = comment();
  var node = first_child(fragment);
  Button_default(node, {
    tag: "label",
    get checked() {
      return checked();
    },
    get pill() {
      return $$props.pill;
    },
    get outline() {
      return $$props.outline;
    },
    get size() {
      return $$props.size;
    },
    get color() {
      return $$props.color;
    },
    get shadow() {
      return $$props.shadow;
    },
    get class() {
      return get(buttonClass);
    },
    children: wrap_snippet(CheckboxButton, ($$anchor2, $$slotProps) => {
      var fragment_1 = root_159();
      var input2 = first_child(fragment_1);
      remove_input_defaults(input2);
      let attributes;
      action(input2, ($$node, $$action_arg) => init == null ? void 0 : init($$node, $$action_arg), group2);
      effect(() => bind_checked(input2, checked));
      var node_1 = sibling(input2, 2);
      snippet(node_1, () => $$props.children ?? noop);
      template_effect(() => attributes = set_attributes(input2, attributes, {
        type: "checkbox",
        value: $$props.value,
        ...restProps,
        class: "sr-only",
        onchange: onChange
      }));
      append($$anchor2, fragment_1);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CheckboxButton = hmr(CheckboxButton, () => CheckboxButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CheckboxButton[HMR].source;
    set(CheckboxButton[HMR].source, module.default[HMR].original);
  });
}
var CheckboxButton_default = CheckboxButton;

// node_modules/flowbite-svelte/dist/forms/dropzone/theme.js
var dropzone = ce({
  base: "flex flex-col justify-center items-center w-full h-64 bg-gray-50 rounded-lg border-2 border-gray-300 border-dashed cursor-pointer dark:hover:bg-bray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600"
});

// node_modules/flowbite-svelte/dist/forms/dropzone/Dropzone.svelte
Dropzone[FILENAME] = "node_modules/flowbite-svelte/dist/forms/dropzone/Dropzone.svelte";
var root94 = add_locations(from_html(`<button type="button"><!></button> <label class="hidden"><input/></label>`, 1), Dropzone[FILENAME], [[54, 0], [57, 0, [[58, 2]]]]);
function Dropzone($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Dropzone);
  let files = prop($$props, "files", 15), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "files",
      "class"
    ],
    "restProps"
  );
  const base = user_derived(() => dropzone({ class: clsx_default($$props.class) }));
  let input2;
  function keydown(ev) {
    if ([" ", "Enter"].includes(ev.key)) {
      ev.preventDefault();
      input2.click();
    }
  }
  function onClick(event3) {
    event3.preventDefault();
    input2.click();
  }
  const onDrop = function(event3) {
    var _a;
    event3.preventDefault();
    if (((_a = event3.dataTransfer) == null ? void 0 : _a.files) && event3.dataTransfer.files.length > 0) {
      files(event3.dataTransfer.files);
    }
    if (ondrop) {
      ondrop.call(this, event3);
    }
  };
  const onDragOver = function(event3) {
    event3.preventDefault();
    if (ondragover) {
      ondragover.call(this, event3);
    }
  };
  const onChange = function(event3) {
    if (onchange) {
      onchange.call(this, event3);
    }
  };
  var fragment = root94();
  var button2 = first_child(fragment);
  button2.__keydown = keydown;
  button2.__click = onClick;
  var node = child(button2);
  snippet(node, () => $$props.children);
  reset(button2);
  var label2 = sibling(button2, 2);
  var input_1 = child(label2);
  remove_input_defaults(input_1);
  let attributes;
  bind_this(input_1, ($$value) => input2 = $$value, () => input2);
  reset(label2);
  template_effect(() => {
    set_class(button2, 1, clsx2(get(base)));
    attributes = set_attributes(input_1, attributes, {
      ...restProps,
      onchange: onChange,
      type: "file"
    });
  });
  event2("drop", button2, onDrop);
  event2("dragover", button2, onDragOver);
  bind_files(input_1, files);
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dropzone = hmr(Dropzone, () => Dropzone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dropzone[HMR].source;
    set(Dropzone[HMR].source, module.default[HMR].original);
  });
}
var Dropzone_default = Dropzone;
delegate(["keydown", "click"]);

// node_modules/flowbite-svelte/dist/forms/fileupload/Fileupload.svelte
Fileupload[FILENAME] = "node_modules/flowbite-svelte/dist/forms/fileupload/Fileupload.svelte";
var root95 = add_locations(from_html(`<div><input/> <!></div>`), Fileupload[FILENAME], [[19, 0, [[20, 2]]]]);
function Fileupload($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Fileupload);
  var $$ownership_validator = create_ownership_validator($$props);
  let files = prop($$props, "files", 15), size = prop($$props, "size", 3, "md"), clearable = prop($$props, "clearable", 3, false), elementRef = prop($$props, "elementRef", 15), clearableColor = prop($$props, "clearableColor", 3, "none"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "files",
      "size",
      "clearable",
      "elementRef",
      "class",
      "clearableSvgClass",
      "clearableColor",
      "clearableClass",
      "clearableOnClick"
    ],
    "restProps"
  );
  const { base, wrapper, right } = fileupload();
  const clearAll = () => {
    if (elementRef()) {
      $$ownership_validator.mutation("elementRef", ["elementRef", "value"], elementRef(elementRef().value = "", true), 12, 6);
      files(void 0);
    }
    if ($$props.clearableOnClick) $$props.clearableOnClick();
  };
  var div = root95();
  var input2 = child(div);
  remove_input_defaults(input2);
  let attributes;
  bind_this(input2, ($$value) => elementRef($$value), () => elementRef());
  var node = sibling(input2, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      const expression = user_derived(() => right({ class: $$props.clearableClass }));
      CloseButton_default(node_1, {
        onclick: clearAll,
        get class() {
          return get(expression);
        },
        get color() {
          return clearableColor();
        },
        "aria-label": "Clear selected files",
        get svgClass() {
          return $$props.clearableSvgClass;
        }
      });
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if (files() && files().length > 0 && clearable()) $$render(consequent);
    });
  }
  reset(div);
  template_effect(
    ($0, $1) => {
      set_class(div, 1, $0);
      attributes = set_attributes(input2, attributes, { type: "file", ...restProps, class: $1 });
    },
    [
      () => clsx2(wrapper()),
      () => base({
        size: size(),
        class: clsx_default($$props.class)
      })
    ]
  );
  bind_files(input2, files);
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Fileupload = hmr(Fileupload, () => Fileupload[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fileupload[HMR].source;
    set(Fileupload[HMR].source, module.default[HMR].original);
  });
}
var Fileupload_default = Fileupload;

// node_modules/flowbite-svelte/dist/forms/fileupload/theme.js
var fileupload = ce({
  slots: {
    base: "block w-full disabled:cursor-not-allowed disabled:opacity-50 rtl:text-right p-2.5 focus:border-primary-500 focus:ring-primary-500 dark:focus:border-primary-500 dark:focus:ring-primary-500 bg-gray-50 text-gray-900 dark:bg-gray-700 dark:placeholder-gray-400 border-gray-300 dark:border-gray-600 text-sm rounded-lg border p-0! dark:text-gray-400",
    wrapper: "relative w-full",
    right: "flex absolute inset-y-0 items-center text-gray-500 dark:text-gray-400 end-0 p-2.5"
  },
  variants: {
    size: {
      sm: { base: "text-xs ps-9 pe-9 p-2" },
      md: { base: "text-sm ps-10 pe-10 p-2.5" },
      lg: { base: "sm:text-base ps-11 pe-11 p-3" }
    }
  }
});

// node_modules/flowbite-svelte/dist/forms/floating-label/FloatingLabelInput.svelte
FloatingLabelInput[FILENAME] = "node_modules/flowbite-svelte/dist/forms/floating-label/FloatingLabelInput.svelte";
var root_160 = add_locations(from_html(`<div tabindex="-1" class="sr-only"></div>`), FloatingLabelInput[FILENAME], [[124, 2]]);
var on_click4 = (_, selectItem, item) => selectItem(get(item));
var root_416 = add_locations(from_html(`<button type="button"> </button>`), FloatingLabelInput[FILENAME], [[139, 8]]);
var root_329 = add_locations(from_html(`<div></div>`), FloatingLabelInput[FILENAME], [[137, 4]]);
var root96 = add_locations(from_html(`<!> <div><input/> <!> <label><!></label> <!></div>`, 1), FloatingLabelInput[FILENAME], [[127, 0, [[128, 2], [132, 2]]]]);
function FloatingLabelInput($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, FloatingLabelInput);
  var $$ownership_validator = create_ownership_validator($$props);
  let id = prop($$props, "id", 19, idGenerator), value = prop($$props, "value", 15), elementRef = prop($$props, "elementRef", 15), variant = prop($$props, "variant", 3, "standard"), size = prop($$props, "size", 3, "default"), color = prop($$props, "color", 3, "default"), clearableColor = prop($$props, "clearableColor", 3, "none"), data = prop($$props, "data", 19, () => []), maxSuggestions = prop($$props, "maxSuggestions", 3, 5), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "id",
      "value",
      "elementRef",
      "aria-describedby",
      "variant",
      "size",
      "color",
      "class",
      "inputClass",
      "labelClass",
      "clearable",
      "clearableSvgClass",
      "clearableColor",
      "clearableClass",
      "clearableOnClick",
      "data",
      "maxSuggestions",
      "onSelect",
      "comboClass"
    ],
    "restProps"
  );
  const $$d = user_derived(() => floatingLabelInput({
    variant: variant(),
    size: size(),
    color: color()
  })), base = user_derived(() => {
    let {
      base: $$1,
      input: $$2,
      label: $$3,
      clearbtn: $$4,
      combo: $$5
    } = get($$d);
    return $$1;
  }), input2 = user_derived(() => {
    let {
      base: $$1,
      input: $$2,
      label: $$3,
      clearbtn: $$4,
      combo: $$5
    } = get($$d);
    return $$2;
  }), label2 = user_derived(() => {
    let {
      base: $$1,
      input: $$2,
      label: $$3,
      clearbtn: $$4,
      combo: $$5
    } = get($$d);
    return $$3;
  }), clearbtn = user_derived(() => {
    let {
      base: $$1,
      input: $$2,
      label: $$3,
      clearbtn: $$4,
      combo: $$5
    } = get($$d);
    return $$4;
  }), combo = user_derived(() => {
    let {
      base: $$1,
      input: $$2,
      label: $$3,
      clearbtn: $$4,
      combo: $$5
    } = get($$d);
    return $$5;
  });
  const clearAll = () => {
    if (elementRef()) {
      $$ownership_validator.mutation("elementRef", ["elementRef", "value"], elementRef(elementRef().value = "", true), 13, 6);
      value("");
      set(backspaceUsed, false);
      updateSuggestions();
      dummyFocusDiv == null ? void 0 : dummyFocusDiv.focus();
      setTimeout(
        () => {
          var _a;
          (_a = elementRef()) == null ? void 0 : _a.focus();
        },
        100
      );
    }
    if ($$props.clearableOnClick) $$props.clearableOnClick();
  };
  const isCombobox = user_derived(() => Array.isArray(data()) && data().length > 0);
  let dummyFocusDiv;
  let isFocused = state(false);
  let filteredSuggestions = state(proxy([]));
  let selectedIndex = state(-1);
  let backspaceUsed = state(false);
  function updateSuggestions() {
    if (!get(isCombobox) || !get(isFocused)) {
      set(filteredSuggestions, [], true);
      return;
    }
    const searchTerm = (value() || "").toLowerCase();
    if (strict_equals(searchTerm, "") && !get(backspaceUsed)) {
      set(filteredSuggestions, [], true);
    } else if (searchTerm) {
      set(filteredSuggestions, data().filter((item) => item.toLowerCase().includes(searchTerm)).slice(0, maxSuggestions()), true);
    } else if (get(backspaceUsed)) {
      set(filteredSuggestions, [...data()].slice(0, maxSuggestions()), true);
    }
    set(selectedIndex, -1);
  }
  user_effect(() => {
    if (get(isCombobox)) {
      updateSuggestions();
    }
  });
  function handleInput() {
    if (value().length > 0) {
      set(backspaceUsed, false);
    }
    updateSuggestions();
  }
  function handleFocus() {
    set(isFocused, true);
    updateSuggestions();
  }
  function handleBlur() {
    setTimeout(
      () => {
        set(isFocused, false);
        set(backspaceUsed, false);
        set(filteredSuggestions, [], true);
      },
      200
    );
  }
  function handleKeydown(event3) {
    if (!get(isCombobox)) return;
    if (strict_equals(event3.key, "Backspace") || strict_equals(event3.key, "Delete")) {
      const currentValue = value();
      if (currentValue.length <= 1) {
        set(backspaceUsed, true);
      }
    }
    if (!get(filteredSuggestions).length) return;
    switch (event3.key) {
      case "ArrowDown":
        event3.preventDefault();
        set(selectedIndex, (get(selectedIndex) + 1) % get(filteredSuggestions).length);
        break;
      case "ArrowUp":
        event3.preventDefault();
        set(selectedIndex, get(selectedIndex) <= 0 ? get(filteredSuggestions).length - 1 : get(selectedIndex) - 1, true);
        break;
      case "Enter":
        if (get(selectedIndex) >= 0) {
          event3.preventDefault();
          selectItem(get(filteredSuggestions)[get(selectedIndex)]);
        }
        break;
      case "Escape":
        event3.preventDefault();
        set(filteredSuggestions, [], true);
        break;
    }
  }
  function selectItem(item) {
    var _a;
    value(item);
    if ($$props.onSelect) $$props.onSelect(item);
    set(filteredSuggestions, [], true);
    set(selectedIndex, -1);
    (_a = elementRef()) == null ? void 0 : _a.focus();
  }
  var fragment = root96();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_160();
      bind_this(div, ($$value) => dummyFocusDiv = $$value, () => dummyFocusDiv);
      append($$anchor2, div);
    };
    if_block(node, ($$render) => {
      if ($$props.clearable) $$render(consequent);
    });
  }
  var div_1 = sibling(node, 2);
  var input_1 = child(div_1);
  remove_input_defaults(input_1);
  let attributes;
  bind_this(input_1, ($$value) => elementRef($$value), () => elementRef());
  var node_1 = sibling(input_1, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      const expression = user_derived(() => get(clearbtn)({ class: $$props.clearableClass }));
      CloseButton_default(node_2, {
        onclick: clearAll,
        get class() {
          return get(expression);
        },
        get color() {
          return clearableColor();
        },
        "aria-label": "Clear search value",
        get svgClass() {
          return $$props.clearableSvgClass;
        }
      });
      append($$anchor2, fragment_1);
    };
    if_block(node_1, ($$render) => {
      if (strict_equals(value(), void 0, false) && strict_equals(value(), "", false) && $$props.clearable) $$render(consequent_1);
    });
  }
  var label_1 = sibling(node_1, 2);
  var node_3 = child(label_1);
  snippet(node_3, () => $$props.children);
  reset(label_1);
  var node_4 = sibling(label_1, 2);
  {
    var consequent_2 = ($$anchor2) => {
      var div_2 = root_329();
      each(div_2, 21, () => get(filteredSuggestions), index, ($$anchor3, item, i) => {
        var button2 = root_416();
        button2.__click = [on_click4, selectItem, item];
        var text2 = child(button2, true);
        reset(button2);
        template_effect(() => {
          set_class(button2, 1, `w-full px-3 py-2 text-left ${strict_equals(i, get(selectedIndex)) ? "bg-gray-100 dark:bg-gray-700" : "hover:bg-gray-50 dark:hover:bg-gray-700"} focus:outline-none`);
          set_text(text2, get(item));
        });
        event2("mouseenter", button2, () => set(selectedIndex, i, true));
        append($$anchor3, button2);
      });
      reset(div_2);
      template_effect(($0) => set_class(div_2, 1, $0), [
        () => clsx2(get(combo)({ class: clsx_default($$props.comboClass) }))
      ]);
      append($$anchor2, div_2);
    };
    if_block(node_4, ($$render) => {
      if (get(isCombobox) && get(isFocused) && get(filteredSuggestions).length > 0) $$render(consequent_2);
    });
  }
  reset(div_1);
  template_effect(
    ($0, $1, $2) => {
      set_class(div_1, 1, $0);
      attributes = set_attributes(input_1, attributes, {
        id: id(),
        placeholder: " ",
        ...restProps,
        "aria-describedby": $$props["aria-describedby"],
        class: $1,
        oninput: handleInput,
        onfocus: handleFocus,
        onblur: handleBlur,
        onkeydown: handleKeydown
      });
      set_attribute(label_1, "for", id());
      set_class(label_1, 1, $2);
    },
    [
      () => clsx2(clsx_default(get(base)({ class: clsx_default($$props.class) }), get(isCombobox) ? "relative" : "")),
      () => get(input2)({ class: $$props.inputClass }),
      () => clsx2(get(label2)({ class: $$props.labelClass }))
    ]
  );
  bind_value(input_1, value);
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FloatingLabelInput = hmr(FloatingLabelInput, () => FloatingLabelInput[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FloatingLabelInput[HMR].source;
    set(FloatingLabelInput[HMR].source, module.default[HMR].original);
  });
}
var FloatingLabelInput_default = FloatingLabelInput;
delegate(["click"]);

// node_modules/flowbite-svelte/dist/forms/floating-label/theme.js
var floatingLabelInput = ce({
  slots: {
    base: "relative",
    input: "block w-full text-sm text-gray-900 bg-transparent appearance-none dark:text-white focus:outline-hidden focus:ring-0 peer",
    label: "absolute text-sm duration-300 transform scale-75 z-10 origin-left rtl:origin-right peer-placeholder-shown:scale-100 peer-focus:scale-75",
    clearbtn: "absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-black",
    combo: "absolute top-full right-0 left-0 z-10 mt-1 max-h-60 overflow-y-auto rounded-md border border-gray-200 bg-white shadow-lg dark:border-gray-700 dark:bg-gray-800"
  },
  variants: {
    variant: {
      filled: {
        base: "relative",
        input: "rounded-t-lg border-0 border-b-2 bg-gray-50 dark:bg-gray-700",
        label: "-translate-y-4 start-2.5 peer-placeholder-shown:translate-y-0 peer-focus:-translate-y-4"
      },
      outlined: {
        base: "relative",
        input: "rounded-lg border",
        label: "-translate-y-4 bg-white dark:bg-gray-900 px-2 peer-focus:px-2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:-translate-y-4 start-1"
      },
      standard: {
        base: "relative z-0",
        input: "border-0 border-b-2",
        label: "-translate-y-6 -z-10 peer-focus:start-0 peer-placeholder-shown:translate-y-0 peer-focus:-translate-y-6"
      }
    },
    size: {
      small: {},
      default: {}
    },
    color: {
      default: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-primary-500 focus:border-primary-600",
        label: "text-gray-500 dark:text-gray-400 peer-focus:text-primary-600 dark:peer-focus:text-primary-500"
      },
      primary: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-primary-500 focus:border-primary-600",
        label: "text-primary-500 dark:text-primary-400 peer-focus:text-primary-600 dark:peer-focus:text-primary-500"
      },
      secondary: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-secondary-500 focus:border-secondary-600",
        label: "text-secondary-500 dark:text-secondary-400 peer-focus:text-secondary-600 dark:peer-focus:text-secondary-500"
      },
      gray: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-gray-500 focus:border-gray-600",
        label: "text-gray-500 dark:text-gray-400 peer-focus:text-gray-600 dark:peer-focus:text-gray-500"
      },
      red: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-red-500 focus:border-red-600",
        label: "text-red-500 dark:text-red-400 peer-focus:text-red-600 dark:peer-focus:text-red-500"
      },
      orange: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-orange-500 focus:border-orange-600",
        label: "text-orange-500 dark:text-orange-400 peer-focus:text-orange-600 dark:peer-focus:text-orange-500"
      },
      amber: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-amber-500 focus:border-amber-600",
        label: "text-amber-500 dark:text-amber-400 peer-focus:text-amber-600 dark:peer-focus:text-amber-500"
      },
      yellow: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-yellow-500 focus:border-yellow-600",
        label: "text-yellow-500 dark:text-yellow-400 peer-focus:text-yellow-600 dark:peer-focus:text-yellow-500"
      },
      lime: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-lime-500 focus:border-lime-600",
        label: "text-lime-500 dark:text-lime-400 peer-focus:text-lime-600 dark:peer-focus:text-lime-500"
      },
      green: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-green-500 focus:border-green-600",
        label: "text-green-500 dark:text-green-400 peer-focus:text-green-600 dark:peer-focus:text-green-500"
      },
      emerald: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-emerald-500 focus:border-emerald-600",
        label: "text-emerald-500 dark:text-emerald-400 peer-focus:text-emerald-600 dark:peer-focus:text-emerald-500"
      },
      teal: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-teal-500 focus:border-teal-600",
        label: "text-teal-500 dark:text-teal-400 peer-focus:text-teal-600 dark:peer-focus:text-teal-500"
      },
      cyan: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-cyan-500 focus:border-cyan-600",
        label: "text-cyan-500 dark:text-cyan-400 peer-focus:text-cyan-600 dark:peer-focus:text-cyan-500"
      },
      sky: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-sky-500 focus:border-sky-600",
        label: "text-sky-500 dark:text-sky-400 peer-focus:text-sky-600 dark:peer-focus:text-sky-500"
      },
      blue: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-blue-500 focus:border-blue-600",
        label: "text-blue-500 dark:text-blue-400 peer-focus:text-blue-600 dark:peer-focus:text-blue-500"
      },
      indigo: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-indigo-500 focus:border-indigo-600",
        label: "text-indigo-500 dark:text-indigo-400 peer-focus:text-indigo-600 dark:peer-focus:text-indigo-500"
      },
      violet: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-violet-500 focus:border-violet-600",
        label: "text-violet-600 dark:text-violet-500 peer-focus:text-violet-600 dark:peer-focus:text-violet-500"
      },
      purple: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-purple-500 focus:border-purple-600",
        label: "text-purple-600 dark:text-purple-500 peer-focus:text-purple-600 dark:peer-focus:text-purple-500"
      },
      fuchsia: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-fuchsia-500 focus:border-fuchsia-600",
        label: "text-fuchsia-600 dark:text-fuchsia-500 peer-focus:text-fuchsia-600 dark:peer-focus:text-fuchsia-500"
      },
      pink: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-pink-500 focus:border-pink-600",
        label: "text-pink-600 dark:text-pink-500 peer-focus:text-pink-600 dark:peer-focus:text-pink-500"
      },
      rose: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-rose-500 focus:border-rose-600",
        label: "text-rose-600 dark:text-rose-500 peer-focus:text-rose-600 dark:peer-focus:text-rose-500"
      }
    }
  },
  compoundVariants: [
    {
      variant: "filled",
      size: "small",
      class: {
        input: "px-2.5 pb-1.5 pt-4",
        label: "top-3"
      }
    },
    {
      variant: "filled",
      size: "default",
      class: {
        input: "px-2.5 pb-2.5 pt-5",
        label: "top-4"
      }
    },
    {
      variant: "outlined",
      size: "small",
      class: {
        input: "px-2.5 pb-1.5 pt-3",
        label: "top-1"
      }
    },
    {
      variant: "outlined",
      size: "default",
      class: {
        input: "px-2.5 pb-2.5 pt-4",
        label: "top-2"
      }
    },
    {
      variant: "standard",
      size: "small",
      class: {
        input: "py-2 px-0",
        label: "top-3"
      }
    },
    {
      variant: "standard",
      size: "default",
      class: {
        input: "py-2.5 px-0",
        label: "top-3"
      }
    },
    {
      variant: "filled",
      color: "primary",
      class: {
        input: "dark:focus:border-primary-500 focus:border-primary-600"
      }
    }
  ],
  defaultVariants: {
    variant: "standard",
    size: "default",
    color: "primary"
  }
});

// node_modules/flowbite-svelte/dist/forms/helper/Helper.svelte
Helper[FILENAME] = "node_modules/flowbite-svelte/dist/forms/helper/Helper.svelte";
var root97 = add_locations(from_html(`<p><!></p>`), Helper[FILENAME], [[11, 0]]);
function Helper($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Helper);
  let color = prop($$props, "color", 3, "gray"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "color"
    ],
    "restProps"
  );
  const base = user_derived(() => helper({
    color: color(),
    class: clsx_default($$props.class)
  }));
  var p = root97();
  let attributes;
  var node = child(p);
  snippet(node, () => $$props.children ?? noop);
  reset(p);
  template_effect(() => attributes = set_attributes(p, attributes, { ...restProps, class: get(base) }));
  append($$anchor, p);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Helper = hmr(Helper, () => Helper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Helper[HMR].source;
    set(Helper[HMR].source, module.default[HMR].original);
  });
}
var Helper_default = Helper;

// node_modules/flowbite-svelte/dist/forms/helper/theme.js
var helper = ce({
  base: "text-xs font-normal text-gray-500 dark:text-gray-300",
  variants: {
    color: {
      disabled: "text-gray-400 dark:text-gray-500",
      primary: "text-primary-500 dark:text-primary-400",
      secondary: "text-secondary-500 dark:text-secondary-400",
      green: "text-green-500 dark:text-green-400",
      emerald: "text-emerald-500 dark:text-emerald-400",
      red: "text-red-500 dark:text-red-400",
      blue: "text-blue-500 dark:text-blue-400",
      yellow: "text-yellow-500 dark:text-yellow-400",
      orange: "text-orange-500 dark:text-orange-400",
      gray: "text-gray-500 dark:text-gray-400",
      teal: "text-teal-500 dark:text-teal-400",
      cyan: "text-cyan-500 dark:text-cyan-400",
      sky: "text-sky-500 dark:text-sky-400",
      indigo: "text-indigo-500 dark:text-indigo-400",
      lime: "text-lime-500 dark:text-lime-400",
      amber: "text-amber-500 dark:text-amber-400",
      violet: "text-violet-500 dark:text-violet-400",
      purple: "text-purple-500 dark:text-purple-400",
      fuchsia: "text-fuchsia-500 dark:text-fuchsia-400",
      pink: "text-pink-500 dark:text-pink-400",
      rose: "text-rose-500 dark:text-rose-400"
    }
  }
});

// node_modules/flowbite-svelte/dist/forms/input-field/Input.svelte
Input[FILENAME] = "node_modules/flowbite-svelte/dist/forms/input-field/Input.svelte";
var root_234 = add_locations(from_html(`<div><!></div>`), Input[FILENAME], [[195, 4]]);
var root_417 = add_locations(from_html(`<input/> <!>`, 1), Input[FILENAME], [[202, 4]]);
var root_610 = add_locations(from_html(`<div><!></div>`), Input[FILENAME], [[208, 4]]);
var root_161 = add_locations(from_html(`<!> <!> <!>`, 1), Input[FILENAME], []);
var root_712 = add_locations(from_html(`<div tabindex="-1" class="sr-only"></div>`), Input[FILENAME], [[160, 2]]);
var root_97 = add_locations(from_html(`<div><!></div>`), Input[FILENAME], [[166, 6]]);
var on_click5 = (_, selectItem, item) => selectItem(get(item));
var root_1210 = add_locations(from_html(`<button type="button"> </button>`), Input[FILENAME], [[176, 10]]);
var root_1110 = add_locations(from_html(`<div></div>`), Input[FILENAME], [[174, 6]]);
var root_88 = add_locations(from_html(`<div><!> <!></div>`), Input[FILENAME], [[164, 2]]);
var root_162 = add_locations(from_html(`<div><!></div>`), Input[FILENAME], [[186, 2]]);
var root98 = add_locations(from_html(`<!> <!>`, 1), Input[FILENAME], []);
function Input($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Input);
  const inputContent = wrap_snippet(Input, function($$anchor2) {
    validate_snippet_args(...arguments);
    var fragment = root_161();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor3) => {
        var div = root_234();
        var node_1 = child(div);
        snippet(node_1, () => $$props.left);
        reset(div);
        template_effect(($0) => set_class(div, 1, $0), [
          () => clsx2(get(leftCls)({ class: $$props.classLeft }))
        ]);
        append($$anchor3, div);
      };
      if_block(node, ($$render) => {
        if ($$props.left) $$render(consequent);
      });
    }
    var node_2 = sibling(node, 2);
    {
      var consequent_1 = ($$anchor3) => {
        var fragment_1 = comment();
        var node_3 = first_child(fragment_1);
        var render_arg = derived_safe_equal(() => ({
          ...restProps,
          class: get(inputCls)()
        }));
        snippet(node_3, () => $$props.children, () => get(render_arg));
        append($$anchor3, fragment_1);
      };
      var alternate = ($$anchor3) => {
        var fragment_2 = root_417();
        var input_1 = first_child(fragment_2);
        remove_input_defaults(input_1);
        let attributes;
        bind_this(input_1, ($$value) => elementRef($$value), () => elementRef());
        var node_4 = sibling(input_1, 2);
        {
          var consequent_2 = ($$anchor4) => {
            var fragment_3 = comment();
            var node_5 = first_child(fragment_3);
            const expression = user_derived(() => get(clearbtn)({ class: $$props.clearableClass }));
            CloseButton_default(node_5, {
              onclick: clearAll,
              get class() {
                return get(expression);
              },
              get color() {
                return clearableColor();
              },
              "aria-label": "Clear search value",
              get svgClass() {
                return $$props.clearableSvgClass;
              }
            });
            append($$anchor4, fragment_3);
          };
          if_block(node_4, ($$render) => {
            if (strict_equals(value(), void 0, false) && strict_equals(value(), "", false) && clearable()) $$render(consequent_2);
          });
        }
        template_effect(
          ($0) => attributes = set_attributes(input_1, attributes, {
            ...restProps,
            oninput: handleInput,
            onfocus: handleFocus,
            onblur: handleBlur,
            onkeydown: handleKeydown,
            class: $0
          }),
          [
            () => get(inputCls)({ class: clsx_default($$props.class) })
          ]
        );
        bind_value(input_1, value);
        append($$anchor3, fragment_2);
      };
      if_block(node_2, ($$render) => {
        if ($$props.children) $$render(consequent_1);
        else $$render(alternate, false);
      });
    }
    var node_6 = sibling(node_2, 2);
    {
      var consequent_3 = ($$anchor3) => {
        var div_1 = root_610();
        var node_7 = child(div_1);
        snippet(node_7, () => $$props.right);
        reset(div_1);
        template_effect(($0) => set_class(div_1, 1, $0), [
          () => clsx2(get(rightCls)({ class: $$props.classRight }))
        ]);
        append($$anchor3, div_1);
      };
      if_block(node_6, ($$render) => {
        if ($$props.right) $$render(consequent_3);
      });
    }
    append($$anchor2, fragment);
  });
  let value = prop($$props, "value", 15), elementRef = prop($$props, "elementRef", 15), clearable = prop($$props, "clearable", 3, false), color = prop($$props, "color", 3, "default"), clearableColor = prop($$props, "clearableColor", 3, "none"), data = prop($$props, "data", 19, () => []), maxSuggestions = prop($$props, "maxSuggestions", 3, 5), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "left",
      "right",
      "value",
      "elementRef",
      "clearable",
      "size",
      "color",
      "class",
      "wrapperClass",
      "classLeft",
      "classRight",
      "divClass",
      "clearableSvgClass",
      "clearableColor",
      "clearableClass",
      "clearableOnClick",
      "data",
      "maxSuggestions",
      "onSelect",
      "comboClass"
    ],
    "restProps"
  );
  const isCombobox = user_derived(() => Array.isArray(data()) && data().length > 0);
  let background = getContext("background");
  let dummyFocusDiv;
  let group2 = getContext("group");
  let isGroup = !!group2;
  let _size = user_derived(() => $$props.size || clampSize(group2 == null ? void 0 : group2.size) || "md");
  const _color = user_derived(() => strict_equals(color(), "default") && background ? "tinted" : color());
  const $$d = user_derived(() => input({
    size: get(_size),
    color: get(_color),
    group: isGroup,
    class: clsx_default($$props.class)
  })), base = user_derived(() => {
    let {
      base: $$1,
      input: $$2,
      left: $$3,
      right: $$4,
      clearbtn: $$5,
      combo: $$6
    } = get($$d);
    return $$1;
  }), inputCls = user_derived(() => {
    let {
      base: $$1,
      input: $$2,
      left: $$3,
      right: $$4,
      clearbtn: $$5,
      combo: $$6
    } = get($$d);
    return $$2;
  }), leftCls = user_derived(() => {
    let {
      base: $$1,
      input: $$2,
      left: $$3,
      right: $$4,
      clearbtn: $$5,
      combo: $$6
    } = get($$d);
    return $$3;
  }), rightCls = user_derived(() => {
    let {
      base: $$1,
      input: $$2,
      left: $$3,
      right: $$4,
      clearbtn: $$5,
      combo: $$6
    } = get($$d);
    return $$4;
  }), clearbtn = user_derived(() => {
    let {
      base: $$1,
      input: $$2,
      left: $$3,
      right: $$4,
      clearbtn: $$5,
      combo: $$6
    } = get($$d);
    return $$5;
  }), combo = user_derived(() => {
    let {
      base: $$1,
      input: $$2,
      left: $$3,
      right: $$4,
      clearbtn: $$5,
      combo: $$6
    } = get($$d);
    return $$6;
  });
  const clearAll = () => {
    if (elementRef()) {
      const input2 = elementRef();
      input2.value = "";
      value("");
      set(backspaceUsed, false);
      updateSuggestions();
      dummyFocusDiv == null ? void 0 : dummyFocusDiv.focus();
      setTimeout(
        () => {
          input2.focus();
        },
        100
      );
    }
    if ($$props.clearableOnClick) $$props.clearableOnClick();
  };
  let isFocused = state(false);
  let filteredSuggestions = state(proxy([]));
  let selectedIndex = state(-1);
  let backspaceUsed = state(false);
  function updateSuggestions() {
    if (!get(isCombobox) || !get(isFocused)) {
      set(filteredSuggestions, [], true);
      return;
    }
    const searchTerm = (value() || "").toLowerCase();
    if (strict_equals(searchTerm, "") && !get(backspaceUsed)) {
      set(filteredSuggestions, [], true);
    } else {
      if (searchTerm) {
        set(filteredSuggestions, data().filter((item) => item.toLowerCase().includes(searchTerm)).slice(0, maxSuggestions()), true);
      } else if (get(backspaceUsed)) {
        set(filteredSuggestions, [...data()].slice(0, maxSuggestions()), true);
      }
    }
    set(selectedIndex, -1);
  }
  user_effect(() => {
    if (get(isCombobox)) {
      updateSuggestions();
    }
  });
  function handleInput() {
    if (value().length > 0) {
      set(backspaceUsed, false);
    }
    updateSuggestions();
  }
  function handleFocus() {
    set(isFocused, true);
    updateSuggestions();
  }
  function handleBlur() {
    setTimeout(
      () => {
        set(isFocused, false);
        set(backspaceUsed, false);
        set(filteredSuggestions, [], true);
      },
      200
    );
  }
  function handleKeydown(event3) {
    if (!get(isCombobox)) return;
    if (strict_equals(event3.key, "Backspace") || strict_equals(event3.key, "Delete")) {
      const currentValue = value();
      if (currentValue.length <= 1) {
        set(backspaceUsed, true);
      }
    }
    if (!get(filteredSuggestions).length) return;
    switch (event3.key) {
      case "ArrowDown":
        event3.preventDefault();
        set(selectedIndex, (get(selectedIndex) + 1) % get(filteredSuggestions).length);
        break;
      case "ArrowUp":
        event3.preventDefault();
        set(selectedIndex, get(selectedIndex) <= 0 ? get(filteredSuggestions).length - 1 : get(selectedIndex) - 1, true);
        break;
      case "Enter":
        if (get(selectedIndex) >= 0) {
          event3.preventDefault();
          selectItem(get(filteredSuggestions)[get(selectedIndex)]);
        }
        break;
      case "Escape":
        event3.preventDefault();
        set(filteredSuggestions, [], true);
        break;
    }
  }
  function selectItem(item) {
    value(item);
    if ($$props.onSelect) {
      $$props.onSelect(item);
    }
    set(filteredSuggestions, [], true);
    set(selectedIndex, -1);
    if (elementRef()) {
      elementRef().focus();
    }
  }
  var fragment_4 = root98();
  var node_8 = first_child(fragment_4);
  {
    var consequent_4 = ($$anchor2) => {
      var div_2 = root_712();
      bind_this(div_2, ($$value) => dummyFocusDiv = $$value, () => dummyFocusDiv);
      append($$anchor2, div_2);
    };
    if_block(node_8, ($$render) => {
      if (clearable()) $$render(consequent_4);
    });
  }
  var node_9 = sibling(node_8, 2);
  {
    var consequent_7 = ($$anchor2) => {
      var div_3 = root_88();
      var node_10 = child(div_3);
      {
        var consequent_5 = ($$anchor3) => {
          var div_4 = root_97();
          var node_11 = child(div_4);
          inputContent(node_11);
          reset(div_4);
          template_effect(($0) => set_class(div_4, 1, $0), [
            () => clsx2(get(base)({ class: $$props.divClass }))
          ]);
          append($$anchor3, div_4);
        };
        var alternate_1 = ($$anchor3) => {
          inputContent($$anchor3);
        };
        if_block(node_10, ($$render) => {
          if ($$props.right || $$props.left || clearable()) $$render(consequent_5);
          else $$render(alternate_1, false);
        });
      }
      var node_12 = sibling(node_10, 2);
      {
        var consequent_6 = ($$anchor3) => {
          var div_5 = root_1110();
          each(div_5, 21, () => get(filteredSuggestions), index, ($$anchor4, item, i) => {
            var button2 = root_1210();
            button2.__click = [on_click5, selectItem, item];
            var text2 = child(button2, true);
            reset(button2);
            template_effect(() => {
              set_class(button2, 1, `w-full px-3 py-2 text-left ${strict_equals(i, get(selectedIndex)) ? "bg-gray-100 dark:bg-gray-700" : "hover:bg-gray-50 dark:hover:bg-gray-700"} focus:outline-none`);
              set_text(text2, get(item));
            });
            event2("mouseenter", button2, () => set(selectedIndex, i, true));
            append($$anchor4, button2);
          });
          reset(div_5);
          template_effect(($0) => set_class(div_5, 1, $0), [
            () => clsx2(get(combo)({ class: clsx_default($$props.comboClass) }))
          ]);
          append($$anchor3, div_5);
        };
        if_block(node_12, ($$render) => {
          if (get(isCombobox) && get(isFocused) && get(filteredSuggestions).length > 0) $$render(consequent_6);
        });
      }
      reset(div_3);
      template_effect(($0) => set_class(div_3, 1, $0), [
        () => clsx2(twMerge(get(isCombobox) ? "relative w-full" : "", $$props.wrapperClass))
      ]);
      append($$anchor2, div_3);
    };
    var alternate_2 = ($$anchor2, $$elseif) => {
      {
        var consequent_8 = ($$anchor3) => {
          inputContent($$anchor3);
        };
        var alternate_3 = ($$anchor3, $$elseif2) => {
          {
            var consequent_9 = ($$anchor4) => {
              var div_6 = root_162();
              var node_13 = child(div_6);
              inputContent(node_13);
              reset(div_6);
              template_effect(($0) => set_class(div_6, 1, $0), [
                () => clsx2(get(base)({ class: $$props.divClass }))
              ]);
              append($$anchor4, div_6);
            };
            var alternate_4 = ($$anchor4) => {
              inputContent($$anchor4);
            };
            if_block(
              $$anchor3,
              ($$render) => {
                if ($$props.right || $$props.left || clearable()) $$render(consequent_9);
                else $$render(alternate_4, false);
              },
              $$elseif2
            );
          }
        };
        if_block(
          $$anchor2,
          ($$render) => {
            if (group2) $$render(consequent_8);
            else $$render(alternate_3, false);
          },
          $$elseif
        );
      }
    };
    if_block(node_9, ($$render) => {
      if (get(isCombobox)) $$render(consequent_7);
      else $$render(alternate_2, false);
    });
  }
  append($$anchor, fragment_4);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Input = hmr(Input, () => Input[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Input[HMR].source;
    set(Input[HMR].source, module.default[HMR].original);
  });
}
var Input_default = Input;
delegate(["click"]);

// node_modules/flowbite-svelte/dist/forms/input-field/theme.js
var input = ce({
  slots: {
    base: "relative w-full",
    input: "block w-full disabled:cursor-not-allowed disabled:opacity-50 rtl:text-right focus:outline-hidden",
    left: "flex absolute inset-y-0 items-center text-gray-500 dark:text-gray-400 pointer-events-none start-0 p-2.5",
    right: "flex absolute inset-y-0 items-center text-gray-500 dark:text-gray-400 end-0 p-2.5",
    clearbtn: "absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-black",
    combo: "absolute top-full right-0 left-0 z-20 mt-1 max-h-60 overflow-y-auto rounded-md border border-gray-200 bg-white shadow-lg dark:border-gray-700 dark:bg-gray-800"
  },
  variants: {
    size: {
      sm: { input: "text-xs px-2 py-1" },
      md: { input: "text-sm px-2.5 py-2.5" },
      lg: { input: "sm:text-base px-3 py-3" }
    },
    color: {
      default: {
        input: "border border-gray-300 dark:border-gray-600 focus:border-primary-500 focus:ring-primary-500 dark:focus:border-primary-500 dark:focus:ring-primary-500 bg-gray-50 text-gray-900 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 bg-gray-50 text-gray-900 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400"
      },
      tinted: {
        input: "border border-gray-300 dark:border-gray-500 bg-gray-50 text-gray-900 dark:bg-gray-600 dark:text-white dark:placeholder-gray-400"
      },
      primary: {
        input: "border border-primary-200 dark:border-primary-400 focus:ring-primary-500 focus:border-primary-600 dark:focus:ring-primary-500 dark:focus:border-primary-500 bg-primary-50 text-primary-900 placeholder-primary-700 dark:text-primary-400 dark:placeholder-primary-500 dark:bg-gray-700"
      },
      secondary: {
        input: "border border-secondary-200 dark:border-secondary-400 focus:ring-secondary-500 focus:border-secondary-600 dark:focus:ring-secondary-500 dark:focus:border-secondary-500 bg-secondary-50 text-secondary-900 placeholder-secondary-700 dark:text-secondary-400 dark:placeholder-secondary-500 dark:bg-gray-700"
      },
      green: {
        input: "border border-green-200 dark:border-green-400 focus:ring-green-500 focus:border-green-600 dark:focus:ring-green-500 dark:focus:border-green-500 bg-green-50 text-green-900 placeholder-green-700 dark:text-green-400 dark:placeholder-green-500 dark:bg-gray-700"
      },
      emerald: {
        input: "border border-emerald-200 dark:border-emerald-400 focus:ring-emerald-500 focus:border-emerald-600 dark:focus:ring-emerald-500 dark:focus:border-emerald-500 bg-emerald-50 text-emerald-900 placeholder-emerald-700 dark:text-emerald-400 dark:placeholder-emerald-500 dark:bg-gray-700"
      },
      red: {
        input: "border border-red-200 dark:border-red-400 focus:ring-red-500 focus:border-red-600 dark:focus:ring-red-500 dark:focus:border-red-500 bg-red-50 text-red-900 placeholder-red-700 dark:text-red-400 dark:placeholder-red-500 dark:bg-gray-700"
      },
      blue: {
        input: "border border-blue-200 dark:border-blue-400 focus:ring-blue-500 focus:border-blue-600 dark:focus:ring-blue-500 dark:focus:border-blue-500 bg-blue-50 text-blue-900 placeholder-blue-700 dark:text-blue-400 dark:placeholder-blue-500 dark:bg-gray-700"
      },
      yellow: {
        input: "border border-yellow-200 dark:border-yellow-400 focus:ring-yellow-500 focus:border-yellow-600 dark:focus:ring-yellow-500 dark:focus:border-yellow-500 bg-yellow-50 text-yellow-900 placeholder-yellow-700 dark:text-yellow-400 dark:placeholder-yellow-500 dark:bg-gray-700"
      },
      orange: {
        input: "border border-orange-200 dark:border-orange-400 focus:ring-orange-500 focus:border-orange-600 dark:focus:ring-orange-500 dark:focus:border-orange-500 bg-orange-50 text-orange-900 placeholder-orange-700 dark:text-orange-400 dark:placeholder-orange-500 dark:bg-gray-700"
      },
      gray: {
        input: "border border-gray-200 dark:border-gray-400 focus:ring-gray-500 focus:border-gray-600 dark:focus:ring-gray-500 dark:focus:border-gray-500 bg-gray-50 text-gray-900 placeholder-gray-700 dark:text-gray-400 dark:placeholder-gray-500 dark:bg-gray-700"
      },
      teal: {
        input: "border border-teal-200 dark:border-teal-400 focus:ring-teal-500 focus:border-teal-600 dark:focus:ring-teal-500 dark:focus:border-teal-500 bg-teal-50 text-teal-900 placeholder-teal-700 dark:text-teal-400 dark:placeholder-teal-500 dark:bg-gray-700"
      },
      cyan: {
        input: "border border-cyan-200 dark:border-cyan-400 focus:ring-cyan-500 focus:border-cyan-600 dark:focus:ring-cyan-500 dark:focus:border-cyan-500 bg-cyan-50 text-cyan-900 placeholder-cyan-700 dark:text-cyan-400 dark:placeholder-cyan-500 dark:bg-gray-700"
      },
      sky: {
        input: "border border-sky-200 dark:border-sky-400 focus:ring-sky-500 focus:border-sky-600 dark:focus:ring-sky-500 dark:focus:border-sky-500 bg-sky-50 text-sky-900 placeholder-sky-700 dark:text-sky-400 dark:placeholder-sky-500 dark:bg-gray-700"
      },
      indigo: {
        input: "border border-indigo-200 dark:border-indigo-400 focus:ring-indigo-500 focus:border-indigo-600 dark:focus:ring-indigo-500 dark:focus:border-indigo-500 bg-indigo-50 text-indigo-900 placeholder-indigo-700 dark:text-indigo-400 dark:placeholder-indigo-500 dark:bg-gray-700"
      },
      lime: {
        input: "border border-lime-200 dark:border-lime-400 focus:ring-lime-500 focus:border-lime-600 dark:focus:ring-lime-500 dark:focus:border-lime-500 bg-lime-50 text-lime-900 placeholder-lime-700 dark:text-lime-400 dark:placeholder-lime-500 dark:bg-gray-700"
      },
      amber: {
        input: "border border-amber-200 dark:border-amber-400 focus:ring-amber-500 focus:border-amber-600 dark:focus:ring-amber-500 dark:focus:border-amber-500 bg-amber-50 text-amber-900 placeholder-amber-700 dark:text-amber-400 dark:placeholder-amber-500 dark:bg-gray-700"
      },
      violet: {
        input: "border border-violet-200 dark:border-violet-400 focus:ring-violet-500 focus:border-violet-600 dark:focus:ring-violet-500 dark:focus:border-violet-500 bg-violet-50 text-violet-900 placeholder-violet-700 dark:text-violet-400 dark:placeholder-violet-500 dark:bg-gray-700"
      },
      purple: {
        input: "border border-purple-200 dark:border-purple-400 focus:ring-purple-500 focus:border-purple-600 dark:focus:ring-purple-500 dark:focus:border-purple-500 bg-purple-50 text-purple-900 placeholder-purple-700 dark:text-purple-400 dark:placeholder-purple-500 dark:bg-gray-700"
      },
      fuchsia: {
        input: "border border-fuchsia-200 dark:border-fuchsia-400 focus:ring-fuchsia-500 focus:border-fuchsia-600 dark:focus:ring-fuchsia-500 dark:focus:border-fuchsia-500 bg-fuchsia-50 text-fuchsia-900 placeholder-fuchsia-700 dark:text-fuchsia-400 dark:placeholder-fuchsia-500 dark:bg-gray-700"
      },
      pink: {
        input: "border border-pink-200 dark:border-pink-400 focus:ring-pink-500 focus:border-pink-600 dark:focus:ring-pink-500 dark:focus:border-pink-500 bg-pink-50 text-pink-900 placeholder-pink-700 dark:text-pink-400 dark:placeholder-pink-500 dark:bg-gray-700"
      },
      rose: {
        input: "border border-rose-200 dark:border-rose-400 focus:ring-rose-500 focus:border-rose-600 dark:focus:ring-rose-500 dark:focus:border-rose-500 bg-rose-50 text-rose-900 placeholder-rose-700 dark:text-rose-400 dark:placeholder-rose-500 dark:bg-gray-700"
      }
    },
    group: {
      false: { input: "rounded-lg" },
      true: {
        input: "first:rounded-s-lg last:rounded-e-lg not-first:-ms-px"
      }
    }
  },
  defaultVariants: {
    size: "md",
    color: "default"
  }
});

// node_modules/flowbite-svelte/dist/forms/input-field/index.js
function clampSize(s) {
  return s && s === "xs" ? "sm" : s === "xl" ? "lg" : s;
}

// node_modules/flowbite-svelte/dist/forms/input-addon/InputAddon.svelte
InputAddon[FILENAME] = "node_modules/flowbite-svelte/dist/forms/input-addon/InputAddon.svelte";
var root99 = add_locations(from_html(`<div><!></div>`), InputAddon[FILENAME], [[36, 0]]);
function InputAddon($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, InputAddon);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "size"
    ],
    "restProps"
  );
  let background = getContext("background");
  let group2 = getContext("group");
  const borderClasses = {
    base: "border-gray-300 dark:border-gray-600",
    tinted: "border-gray-300 dark:border-gray-500"
  };
  const darkBgClasses = {
    base: "dark:bg-gray-600 dark:text-gray-400",
    tinted: "dark:bg-gray-500 dark:text-gray-300"
  };
  const divider = {
    base: "dark:border-e-gray-700 dark:last:border-e-gray-600",
    tinted: "dark:border-e-gray-600 dark:last:border-e-gray-500"
  };
  const textSizes = {
    sm: "sm:text-xs",
    md: "text-sm",
    lg: "sm:text-base"
  };
  const prefixPadding = { sm: "px-2", md: "px-3", lg: "px-4" };
  let _size = $$props.size || clampSize(group2 == null ? void 0 : group2.size) || "md";
  let divClass = twMerge(textSizes[_size], prefixPadding[_size], "text-gray-500 bg-gray-200", background ? darkBgClasses.tinted : darkBgClasses.base, background ? divider.tinted : divider.base, background ? borderClasses["tinted"] : borderClasses["base"], "inline-flex items-center border", group2 && "not-first:-ms-px", "first:rounded-s-lg last:rounded-e-lg", $$props.class);
  var div = root99();
  let attributes;
  var node = child(div);
  snippet(node, () => $$props.children);
  reset(div);
  template_effect(() => attributes = set_attributes(div, attributes, { ...restProps, class: divClass }));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  InputAddon = hmr(InputAddon, () => InputAddon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InputAddon[HMR].source;
    set(InputAddon[HMR].source, module.default[HMR].original);
  });
}
var InputAddon_default = InputAddon;

// node_modules/flowbite-svelte/dist/forms/radio/Radio.svelte
Radio[FILENAME] = "node_modules/flowbite-svelte/dist/forms/radio/Radio.svelte";
var root_163 = add_locations(from_html(`<input/> <!>`, 1), Radio[FILENAME], [[14, 2]]);
function Radio($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Radio);
  const binding_group = [];
  let inline = prop($$props, "inline", 3, false), color = prop($$props, "color", 3, "primary"), custom = prop($$props, "custom", 3, false), group2 = prop($$props, "group", 15), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "aria-describedby",
      "inline",
      "class",
      "color",
      "custom",
      "group",
      "value",
      "inputClass"
    ],
    "restProps"
  );
  const $$d = user_derived(() => radio({
    color: color(),
    tinted: !!getContext("background"),
    custom: custom(),
    inline: inline()
  })), input2 = user_derived(() => {
    let { input: $$1, label: $$2 } = get($$d);
    return $$1;
  }), label2 = user_derived(() => {
    let { input: $$1, label: $$2 } = get($$d);
    return $$2;
  });
  var fragment = comment();
  var node = first_child(fragment);
  const expression = user_derived(() => get(label2)({ class: clsx_default($$props.class) }));
  Label_default(node, {
    get class() {
      return get(expression);
    },
    children: wrap_snippet(Radio, ($$anchor2, $$slotProps) => {
      var fragment_1 = root_163();
      var input_1 = first_child(fragment_1);
      remove_input_defaults(input_1);
      let attributes;
      var node_1 = sibling(input_1, 2);
      snippet(node_1, () => $$props.children ?? noop);
      template_effect(
        ($0) => attributes = set_attributes(input_1, attributes, {
          type: "radio",
          value: $$props.value,
          "aria-describedby": $$props["aria-describedby"],
          ...restProps,
          class: $0
        }),
        [
          () => get(input2)({ class: $$props.inputClass })
        ]
      );
      bind_group(
        binding_group,
        [],
        input_1,
        () => {
          $$props.value;
          return group2();
        },
        group2
      );
      append($$anchor2, fragment_1);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Radio = hmr(Radio, () => Radio[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Radio[HMR].source;
    set(Radio[HMR].source, module.default[HMR].original);
  });
}
var Radio_default = Radio;

// node_modules/flowbite-svelte/dist/forms/radio/RadioButton.svelte
RadioButton[FILENAME] = "node_modules/flowbite-svelte/dist/forms/radio/RadioButton.svelte";
var root_164 = add_locations(from_html(`<input/> <!>`, 1), RadioButton[FILENAME], [[18, 2]]);
function RadioButton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, RadioButton);
  const binding_group = [];
  let group2 = prop($$props, "group", 15), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "group",
      "value",
      "inline",
      "pill",
      "outline",
      "size",
      "color",
      "shadow",
      "checkedClass",
      "class"
    ],
    "restProps"
  );
  let inputEl;
  let isChecked = user_derived(() => equals($$props.value, group2()));
  let base = user_derived(() => twMerge(radiobutton({ inline: $$props.inline }), get(isChecked) && $$props.checkedClass, $$props.class));
  function clickHandler() {
    inputEl == null ? void 0 : inputEl.click();
  }
  var fragment = comment();
  var node = first_child(fragment);
  Button_default(node, {
    tag: "label",
    onclick: clickHandler,
    get pill() {
      return $$props.pill;
    },
    get outline() {
      return $$props.outline;
    },
    get size() {
      return $$props.size;
    },
    get color() {
      return $$props.color;
    },
    get shadow() {
      return $$props.shadow;
    },
    get class() {
      return get(base);
    },
    children: wrap_snippet(RadioButton, ($$anchor2, $$slotProps) => {
      var fragment_1 = root_164();
      var input2 = first_child(fragment_1);
      remove_input_defaults(input2);
      let attributes;
      bind_this(input2, ($$value) => inputEl = $$value, () => inputEl);
      var node_1 = sibling(input2, 2);
      snippet(node_1, () => $$props.children ?? noop);
      template_effect(() => attributes = set_attributes(input2, attributes, {
        type: "radio",
        class: "sr-only",
        value: $$props.value,
        ...restProps
      }));
      bind_group(
        binding_group,
        [],
        input2,
        () => {
          $$props.value;
          return group2();
        },
        group2
      );
      append($$anchor2, fragment_1);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RadioButton = hmr(RadioButton, () => RadioButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RadioButton[HMR].source;
    set(RadioButton[HMR].source, module.default[HMR].original);
  });
}
var RadioButton_default = RadioButton;

// node_modules/flowbite-svelte/dist/forms/radio/theme.js
var radio = ce({
  slots: {
    input: "flex items-center w-4 h-4 bg-gray-100 border-gray-300 dark:ring-offset-gray-800 focus:ring-2 mr-2",
    label: "flex items-center"
  },
  variants: {
    color: {
      // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      primary: {
        input: "text-primary-600 focus:ring-primary-500 dark:focus:ring-primary-600"
      },
      secondary: {
        input: "text-secondary-600 focus:ring-secondary-500 dark:focus:ring-secondary-600"
      },
      gray: {
        input: "text-gray-600 focus:ring-gray-500 dark:focus:ring-gray-600"
      },
      red: { input: "text-red-600 focus:ring-red-500 dark:focus:ring-red-600" },
      orange: {
        input: "text-orange-500 focus:ring-orange-500 dark:focus:ring-orange-600"
      },
      amber: {
        input: "text-amber-600 focus:ring-amber-500 dark:focus:ring-amber-600"
      },
      yellow: {
        input: "text-yellow-400 focus:ring-yellow-500 dark:focus:ring-yellow-600"
      },
      lime: {
        input: "text-lime-600 focus:ring-lime-500 dark:focus:ring-lime-600"
      },
      green: {
        input: "text-green-600 focus:ring-green-500 dark:focus:ring-green-600"
      },
      emerald: {
        input: "text-emerald-600 focus:ring-emerald-500 dark:focus:ring-emerald-600"
      },
      teal: {
        input: "text-teal-600 focus:ring-teal-500 dark:focus:ring-teal-600"
      },
      cyan: {
        input: "text-cyan-600 focus:ring-cyan-500 dark:focus:ring-cyan-600"
      },
      sky: { input: "text-sky-600 focus:ring-sky-500 dark:focus:ring-sky-600" },
      blue: {
        input: "text-blue-600 focus:ring-blue-500 dark:focus:ring-blue-600"
      },
      indigo: {
        input: "text-indigo-600 focus:ring-indigo-500 dark:focus:ring-indigo-600"
      },
      violet: {
        input: "text-violet-600 focus:ring-violet-500 dark:focus:ring-violet-600"
      },
      purple: {
        input: "text-purple-600 focus:ring-purple-500 dark:focus:ring-purple-600"
      },
      fuchsia: {
        input: "text-fuchsia-600 focus:ring-fuchsia-500 dark:focus:ring-fuchsia-600"
      },
      pink: {
        input: "text-pink-600 focus:ring-pink-500 dark:focus:ring-pink-600"
      },
      rose: {
        input: "text-rose-600 focus:ring-rose-500 dark:focus:ring-rose-600"
      }
    },
    tinted: {
      true: { input: "dark:bg-gray-600 dark:border-gray-500" },
      false: { input: "dark:bg-gray-700 dark:border-gray-600" }
    },
    custom: {
      true: { input: "sr-only peer" },
      false: { input: "relative" }
    },
    inline: {
      true: { label: "inline-flex" },
      false: { label: "flex" }
    }
  },
  defaultVariants: {
    color: "primary"
  }
});
var radiobutton = ce({
  base: "",
  variants: {
    inline: {
      true: "inline-flex",
      false: "flex"
    }
  },
  defaultVariants: {
    inline: true
  }
});

// node_modules/flowbite-svelte/dist/forms/range/Range.svelte
Range[FILENAME] = "node_modules/flowbite-svelte/dist/forms/range/Range.svelte";
var root100 = add_locations(from_html(`<input/>`), Range[FILENAME], [[11, 0]]);
function Range($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Range);
  let value = prop($$props, "value", 15), appearance = prop($$props, "appearance", 3, "none"), color = prop($$props, "color", 3, "blue"), size = prop($$props, "size", 3, "md"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "value",
      "appearance",
      "color",
      "size",
      "class"
    ],
    "restProps"
  );
  const inputCls = user_derived(() => range({
    class: clsx_default($$props.class),
    appearance: appearance(),
    color: color(),
    size: size()
  }));
  var input2 = root100();
  remove_input_defaults(input2);
  let attributes;
  template_effect(() => attributes = set_attributes(input2, attributes, {
    type: "range",
    ...restProps,
    class: get(inputCls)
  }));
  bind_value(input2, value);
  append($$anchor, input2);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Range = hmr(Range, () => Range[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Range[HMR].source;
    set(Range[HMR].source, module.default[HMR].original);
  });
}
var Range_default = Range;

// node_modules/flowbite-svelte/dist/forms/range/theme.js
var range = ce({
  base: "w-full bg-gray-200 rounded-lg cursor-pointer dark:bg-gray-700",
  variants: {
    size: {
      sm: "h-1 range-sm",
      md: "h-2",
      lg: "h-3 range-lg"
    },
    color: {
      // other colors do not work
      gray: "",
      red: "",
      blue: "",
      indigo: "",
      violet: "",
      purple: "",
      fuchsia: "",
      pink: "",
      rose: ""
    },
    appearance: {
      auto: "range accent-red-500",
      none: "appearance-none"
    }
  },
  compoundVariants: [
    {
      appearance: "auto",
      color: "gray",
      class: "accent-gray-500"
    },
    {
      appearance: "auto",
      color: "red",
      class: "accent-red-500"
    },
    {
      appearance: "auto",
      color: "blue",
      class: "accent-blue-500"
    },
    {
      appearance: "auto",
      color: "indigo",
      class: "accent-indigo-500"
    },
    {
      appearance: "auto",
      color: "violet",
      class: "accent-violet-500"
    },
    {
      appearance: "auto",
      color: "purple",
      class: "accent-purple-500"
    },
    {
      appearance: "auto",
      color: "fuchsia",
      class: "accent-fuchsia-500"
    },
    {
      appearance: "auto",
      color: "pink",
      class: "accent-pink-500"
    },
    {
      appearance: "auto",
      color: "rose",
      class: "accent-rose-500"
    }
  ]
});

// node_modules/flowbite-svelte/dist/forms/search/Search.svelte
Search[FILENAME] = "node_modules/flowbite-svelte/dist/forms/search/Search.svelte";
var root_165 = add_locations(from_html(`<div><!></div>`), Search[FILENAME], [[27, 4]]);
var root101 = add_locations(from_html(`<div><div><svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"></path></svg></div> <input/> <!> <!></div>`), Search[FILENAME], [
  [
    19,
    0,
    [
      [20, 2, [[21, 4, [[22, 6]]]]],
      [25, 2]
    ]
  ]
]);
function Search($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Search);
  var $$ownership_validator = create_ownership_validator($$props);
  let placeholder = prop($$props, "placeholder", 3, "Search"), value = prop($$props, "value", 15), elementRef = prop($$props, "elementRef", 15), clearable = prop($$props, "clearable", 3, false), clearableColor = prop($$props, "clearableColor", 3, "none"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "size",
      "placeholder",
      "value",
      "elementRef",
      "clearable",
      "clearableSvgClass",
      "clearableColor",
      "clearableClass",
      "clearableOnClick"
    ],
    "restProps"
  );
  const $$d = user_derived(() => search({ size: $$props.size })), base = user_derived(() => {
    let {
      base: $$1,
      content: $$2,
      icon: $$3,
      clearbtn: $$4,
      input: $$5,
      leftDiv: $$6
    } = get($$d);
    return $$1;
  }), content = user_derived(() => {
    let {
      base: $$1,
      content: $$2,
      icon: $$3,
      clearbtn: $$4,
      input: $$5,
      leftDiv: $$6
    } = get($$d);
    return $$2;
  }), icon = user_derived(() => {
    let {
      base: $$1,
      content: $$2,
      icon: $$3,
      clearbtn: $$4,
      input: $$5,
      leftDiv: $$6
    } = get($$d);
    return $$3;
  }), clearbtn = user_derived(() => {
    let {
      base: $$1,
      content: $$2,
      icon: $$3,
      clearbtn: $$4,
      input: $$5,
      leftDiv: $$6
    } = get($$d);
    return $$4;
  }), inputCls = user_derived(() => {
    let {
      base: $$1,
      content: $$2,
      icon: $$3,
      clearbtn: $$4,
      input: $$5,
      leftDiv: $$6
    } = get($$d);
    return $$5;
  }), leftDiv = user_derived(() => {
    let {
      base: $$1,
      content: $$2,
      icon: $$3,
      clearbtn: $$4,
      input: $$5,
      leftDiv: $$6
    } = get($$d);
    return $$6;
  });
  const clearAll = () => {
    if (elementRef()) {
      $$ownership_validator.mutation("elementRef", ["elementRef", "value"], elementRef(elementRef().value = "", true), 12, 6);
      value(void 0);
    }
    if ($$props.clearableOnClick) $$props.clearableOnClick();
  };
  var div = root101();
  var div_1 = child(div);
  var svg = child(div_1);
  reset(div_1);
  var input2 = sibling(div_1, 2);
  remove_input_defaults(input2);
  let attributes;
  bind_this(input2, ($$value) => elementRef($$value), () => elementRef());
  var node = sibling(input2, 2);
  {
    var consequent = ($$anchor2) => {
      var div_2 = root_165();
      var node_1 = child(div_2);
      snippet(node_1, () => $$props.children);
      reset(div_2);
      template_effect(($0) => set_class(div_2, 1, $0), [() => clsx2(get(content)())]);
      append($$anchor2, div_2);
    };
    if_block(node, ($$render) => {
      if ($$props.children) $$render(consequent);
    });
  }
  var node_2 = sibling(node, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment = comment();
      var node_3 = first_child(fragment);
      const expression = user_derived(() => get(clearbtn)({ class: $$props.clearableClass }));
      CloseButton_default(node_3, {
        onclick: clearAll,
        get class() {
          return get(expression);
        },
        get color() {
          return clearableColor();
        },
        "aria-label": "Clear search value",
        get svgClass() {
          return $$props.clearableSvgClass;
        }
      });
      append($$anchor2, fragment);
    };
    if_block(node_2, ($$render) => {
      if (strict_equals(value(), void 0, false) && strict_equals(value(), "", false) && clearable()) $$render(consequent_1);
    });
  }
  reset(div);
  template_effect(
    ($0, $1, $2, $3) => {
      set_class(div, 1, $0);
      set_class(div_1, 1, $1);
      set_class(svg, 0, $2);
      attributes = set_attributes(input2, attributes, {
        type: "search",
        class: $3,
        placeholder: placeholder(),
        required: true,
        ...restProps
      });
    },
    [
      () => clsx2(get(base)()),
      () => clsx2(get(leftDiv)()),
      () => clsx2(get(icon)()),
      () => get(inputCls)({ class: clsx_default($$props.class) })
    ]
  );
  bind_value(input2, value);
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Search = hmr(Search, () => Search[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Search[HMR].source;
    set(Search[HMR].source, module.default[HMR].original);
  });
}
var Search_default = Search;

// node_modules/flowbite-svelte/dist/forms/search/theme.js
var search = ce({
  slots: {
    base: "relative w-full",
    leftDiv: "absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none",
    icon: "text-gray-500 dark:text-gray-400",
    content: "absolute inset-y-0 end-0 flex items-center text-gray-500 dark:text-gray-400",
    input: "block w-full text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500",
    clearbtn: "absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-black"
  },
  variants: {
    size: {
      sm: {
        input: "text-xs p-2 ps-9 pe-9 ",
        icon: "w-3 h-3"
        // leftDiv: 'ps-2.5',
      },
      md: {
        input: "text-sm p-2.5 ps-10 pe-10",
        icon: "w-4 h-4"
        // leftDiv: 'ps-10',
      },
      lg: {
        input: "sm:text-base p-3 ps-11 pe-11",
        icon: "w-6 h-6"
        // leftDiv: 'ps-11',
      }
    }
  },
  defaultVariants: {
    size: "lg"
  }
});

// node_modules/flowbite-svelte/dist/forms/tags/theme.js
var tags = ce({
  slots: {
    base: "border bg-gray-50 border-gray-300 rounded-lg flex focus-within:ring-primary-500 focus-within:ring-1 focus-within:border-primary-500 overflow-x-auto scrollbar-hidden",
    tag: "flex items-center rounded-lg bg-gray-100 text-gray-900 border border-gray-300 my-1 ml-1 px-2 text-sm max-w-full min-w-fit",
    span: "items-center",
    close: "my-auto ml-1",
    input: "block text-sm m-2.5 p-0 bg-transparent border-none outline-none text-gray-900 h-min w-full min-w-fit focus:ring-0 placeholder-gray-400"
  }
});

// node_modules/flowbite-svelte/dist/forms/tags/Tags.svelte
Tags[FILENAME] = "node_modules/flowbite-svelte/dist/forms/tags/Tags.svelte";
var root_166 = add_locations(from_html(`<div><span> </span> <!></div>`), Tags[FILENAME], [[38, 4, [[39, 6]]]]);
var on_keydown = (event3, handleKeys) => {
  handleKeys(event3);
};
var root102 = add_locations(from_html(`<div><!> <input type="text" autocomplete="new-password"/></div>`), Tags[FILENAME], [[36, 0, [[52, 2]]]]);
function Tags($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Tags);
  let value = prop($$props, "value", 31, () => proxy([])), placeholder = prop($$props, "placeholder", 3, "Enter tags"), closeBtnSize = prop($$props, "closeBtnSize", 3, "xs"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "value",
      "itemClass",
      "spanClass",
      "placeholder",
      "class",
      "closeClass",
      "inputClass",
      "closeBtnSize"
    ],
    "restProps"
  );
  const $$d = user_derived(tags), base = user_derived(() => {
    let {
      base: $$1,
      tag: $$2,
      span: $$3,
      close: $$4,
      input: $$5
    } = get($$d);
    return $$1;
  }), tagCls = user_derived(() => {
    let {
      base: $$1,
      tag: $$2,
      span: $$3,
      close: $$4,
      input: $$5
    } = get($$d);
    return $$2;
  }), spanCls = user_derived(() => {
    let {
      base: $$1,
      tag: $$2,
      span: $$3,
      close: $$4,
      input: $$5
    } = get($$d);
    return $$3;
  }), close = user_derived(() => {
    let {
      base: $$1,
      tag: $$2,
      span: $$3,
      close: $$4,
      input: $$5
    } = get($$d);
    return $$4;
  }), inputCls = user_derived(() => {
    let {
      base: $$1,
      tag: $$2,
      span: $$3,
      close: $$4,
      input: $$5
    } = get($$d);
    return $$5;
  });
  let contents = state("");
  const handleKeys = (event3) => {
    if (strict_equals(event3.key, "Enter")) {
      event3.preventDefault();
      if (get(contents).length > 0 && get(contents).trim().length > 0) {
        value().push(get(contents).trim());
        value(value());
        set(contents, "");
      }
    }
    if (strict_equals(event3.key, "Backspace")) {
      if (strict_equals(get(contents).length, 0)) {
        event3.preventDefault();
        set(contents, value().pop() ?? "", true);
        value(value());
      }
    }
  };
  const deleteField = (index2) => {
    value().splice(index2, 1);
    value(value());
  };
  var div = root102();
  let attributes;
  var node = child(div);
  each(node, 17, value, index, ($$anchor2, tag, index2) => {
    var div_1 = root_166();
    var span2 = child(div_1);
    var text2 = child(span2, true);
    reset(span2);
    var node_1 = sibling(span2, 2);
    const expression = user_derived(() => get(close)({ class: $$props.closeClass }));
    CloseButton_default(node_1, {
      get size() {
        return closeBtnSize();
      },
      get class() {
        return get(expression);
      },
      onclick: () => {
        deleteField(index2);
      }
    });
    reset(div_1);
    template_effect(
      ($0, $1) => {
        set_class(div_1, 1, $0);
        set_class(span2, 1, $1);
        set_text(text2, get(tag));
      },
      [
        () => clsx2(get(tagCls)({ class: $$props.itemClass })),
        () => clsx2(get(spanCls)({ class: $$props.spanClass }))
      ]
    );
    append($$anchor2, div_1);
  });
  var input2 = sibling(node, 2);
  remove_input_defaults(input2);
  input2.__keydown = [on_keydown, handleKeys];
  reset(div);
  template_effect(
    ($0, $1) => {
      attributes = set_attributes(div, attributes, { ...restProps, class: $0 });
      set_attribute(input2, "placeholder", strict_equals(value().length, 0) ? placeholder() : "");
      set_class(input2, 1, $1);
    },
    [
      () => get(base)({ class: $$props.class }),
      () => clsx2(get(inputCls)({ class: $$props.inputClass }))
    ]
  );
  bind_value(input2, () => get(contents), ($$value) => set(contents, $$value));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tags = hmr(Tags, () => Tags[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tags[HMR].source;
    set(Tags[HMR].source, module.default[HMR].original);
  });
}
var Tags_default = Tags;
delegate(["keydown"]);

// node_modules/flowbite-svelte/dist/forms/textarea/Textarea.svelte
Textarea[FILENAME] = "node_modules/flowbite-svelte/dist/forms/textarea/Textarea.svelte";
var root_167 = add_locations(from_html(`<textarea></textarea>`), Textarea[FILENAME], [[25, 4]]);
var root_330 = add_locations(from_html(`<div><!></div>`), Textarea[FILENAME], [[29, 8]]);
var root_418 = add_locations(from_html(`<div><!></div>`), Textarea[FILENAME], [[37, 8]]);
var root_235 = add_locations(from_html(`<div><!> <div><textarea></textarea></div> <!></div>`), Textarea[FILENAME], [
  [27, 4, [[33, 6, [[34, 8]]]]]
]);
var root103 = add_locations(from_html(`<div><!> <!></div>`), Textarea[FILENAME], [[23, 0]]);
function Textarea($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Textarea);
  var $$ownership_validator = create_ownership_validator($$props);
  let value = prop($$props, "value", 15), elementRef = prop($$props, "elementRef", 15), clearableColor = prop($$props, "clearableColor", 3, "none"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "header",
      "footer",
      "value",
      "elementRef",
      "divClass",
      "innerClass",
      "headerClass",
      "footerClass",
      "disabled",
      "class",
      "cols",
      "clearable",
      "clearableSvgClass",
      "clearableColor",
      "clearableClass",
      "clearableOnClick"
    ],
    "restProps"
  );
  let hasHeader = user_derived(() => !!$$props.header);
  let hasFooter = user_derived(() => !!$$props.footer);
  let wrapped = user_derived(() => get(hasHeader) || get(hasFooter));
  const $$d = user_derived(() => textarea({
    wrapped: get(wrapped),
    hasHeader: get(hasHeader),
    hasFooter: get(hasFooter),
    cols: !!$$props.cols
  })), divWrapper = user_derived(() => {
    let {
      divWrapper: $$1,
      base: $$2,
      wrapper: $$3,
      innerWrapper: $$4,
      headerCls: $$5,
      footerCls: $$6,
      clearbtn: $$7
    } = get($$d);
    return $$1;
  }), base = user_derived(() => {
    let {
      divWrapper: $$1,
      base: $$2,
      wrapper: $$3,
      innerWrapper: $$4,
      headerCls: $$5,
      footerCls: $$6,
      clearbtn: $$7
    } = get($$d);
    return $$2;
  }), wrapper = user_derived(() => {
    let {
      divWrapper: $$1,
      base: $$2,
      wrapper: $$3,
      innerWrapper: $$4,
      headerCls: $$5,
      footerCls: $$6,
      clearbtn: $$7
    } = get($$d);
    return $$3;
  }), innerWrapper = user_derived(() => {
    let {
      divWrapper: $$1,
      base: $$2,
      wrapper: $$3,
      innerWrapper: $$4,
      headerCls: $$5,
      footerCls: $$6,
      clearbtn: $$7
    } = get($$d);
    return $$4;
  }), headerCls = user_derived(() => {
    let {
      divWrapper: $$1,
      base: $$2,
      wrapper: $$3,
      innerWrapper: $$4,
      headerCls: $$5,
      footerCls: $$6,
      clearbtn: $$7
    } = get($$d);
    return $$5;
  }), footerCls = user_derived(() => {
    let {
      divWrapper: $$1,
      base: $$2,
      wrapper: $$3,
      innerWrapper: $$4,
      headerCls: $$5,
      footerCls: $$6,
      clearbtn: $$7
    } = get($$d);
    return $$6;
  }), clearbtn = user_derived(() => {
    let {
      divWrapper: $$1,
      base: $$2,
      wrapper: $$3,
      innerWrapper: $$4,
      headerCls: $$5,
      footerCls: $$6,
      clearbtn: $$7
    } = get($$d);
    return $$7;
  });
  const clearAll = () => {
    if (elementRef()) {
      $$ownership_validator.mutation("elementRef", ["elementRef", "value"], elementRef(elementRef().value = "", true), 16, 6);
      value(void 0);
    }
    if ($$props.clearableOnClick) $$props.clearableOnClick();
  };
  var div = root103();
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var textarea_1 = root_167();
      remove_textarea_child(textarea_1);
      let attributes;
      bind_this(textarea_1, ($$value) => elementRef($$value), () => elementRef());
      template_effect(
        ($0) => attributes = set_attributes(textarea_1, attributes, {
          disabled: $$props.disabled,
          ...restProps,
          class: $0
        }),
        [
          () => get(wrapper)({ class: clsx_default($$props.class) })
        ]
      );
      bind_value(textarea_1, value);
      append($$anchor2, textarea_1);
    };
    var alternate = ($$anchor2) => {
      var div_1 = root_235();
      var node_1 = child(div_1);
      {
        var consequent_1 = ($$anchor3) => {
          var div_2 = root_330();
          var node_2 = child(div_2);
          snippet(node_2, () => $$props.header);
          reset(div_2);
          template_effect(($0) => set_class(div_2, 1, $0), [
            () => clsx2(get(headerCls)({ class: $$props.headerClass }))
          ]);
          append($$anchor3, div_2);
        };
        if_block(node_1, ($$render) => {
          if ($$props.header) $$render(consequent_1);
        });
      }
      var div_3 = sibling(node_1, 2);
      var textarea_2 = child(div_3);
      remove_textarea_child(textarea_2);
      let attributes_1;
      bind_this(textarea_2, ($$value) => elementRef($$value), () => elementRef());
      reset(div_3);
      var node_3 = sibling(div_3, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var div_4 = root_418();
          var node_4 = child(div_4);
          snippet(node_4, () => $$props.footer);
          reset(div_4);
          template_effect(($0) => set_class(div_4, 1, $0), [
            () => clsx2(get(footerCls)({ class: $$props.footerClass }))
          ]);
          append($$anchor3, div_4);
        };
        if_block(node_3, ($$render) => {
          if ($$props.footer) $$render(consequent_2);
        });
      }
      reset(div_1);
      template_effect(
        ($0, $1, $2) => {
          set_class(div_1, 1, $0);
          set_class(div_3, 1, $1);
          attributes_1 = set_attributes(textarea_2, attributes_1, {
            disabled: $$props.disabled,
            ...restProps,
            class: $2
          });
        },
        [
          () => clsx2(get(wrapper)({ class: clsx_default($$props.class) })),
          () => clsx2(get(innerWrapper)({ class: $$props.innerClass })),
          () => get(base)()
        ]
      );
      bind_value(textarea_2, value);
      append($$anchor2, div_1);
    };
    if_block(node, ($$render) => {
      if (!get(wrapped)) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  var node_5 = sibling(node, 2);
  {
    var consequent_3 = ($$anchor2) => {
      var fragment = comment();
      var node_6 = first_child(fragment);
      const expression = user_derived(() => get(clearbtn)({ class: $$props.clearableClass }));
      CloseButton_default(node_6, {
        onclick: clearAll,
        get class() {
          return get(expression);
        },
        get color() {
          return clearableColor();
        },
        "aria-label": "Clear search value",
        get svgClass() {
          return $$props.clearableSvgClass;
        }
      });
      append($$anchor2, fragment);
    };
    if_block(node_5, ($$render) => {
      if (strict_equals(value(), void 0, false) && strict_equals(value(), "", false) && $$props.clearable) $$render(consequent_3);
    });
  }
  reset(div);
  template_effect(($0) => set_class(div, 1, $0), [
    () => clsx2(get(divWrapper)({ class: $$props.divClass }))
  ]);
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Textarea = hmr(Textarea, () => Textarea[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Textarea[HMR].source;
    set(Textarea[HMR].source, module.default[HMR].original);
  });
}
var Textarea_default = Textarea;

// node_modules/flowbite-svelte/dist/forms/textarea/theme.js
var textarea = ce({
  slots: {
    divWrapper: "relative",
    base: "block text-sm border-0 px-0 bg-inherit dark:bg-inherit focus:outline-hidden focus:ring-0 disabled:cursor-not-allowed disabled:opacity-50",
    wrapper: "text-sm rounded-lg bg-gray-50 dark:bg-gray-600 text-gray-900 dark:placeholder-gray-400 dark:text-white border border-gray-200 dark:border-gray-500",
    innerWrapper: "py-2 px-4 bg-white dark:bg-gray-800",
    headerCls: "py-2 px-3 border-gray-200 dark:border-gray-500",
    footerCls: "py-2 px-3 border-gray-200 dark:border-gray-500",
    clearbtn: "absolute right-2 top-5 -translate-y-1/2 text-gray-400 hover:text-black"
  },
  variants: {
    cols: {
      false: {
        base: "w-full",
        wrapper: "w-full"
      }
    },
    wrapped: {
      false: { wrapper: "p-2.5 text-sm focus:outline-hidden focus:ring-primary-500 border-gray-300 focus:border-primary-500 dark:focus:ring-primary-500 dark:focus:border-primary-500 disabled:cursor-not-allowed disabled:opacity-50" }
    },
    hasHeader: {
      true: {
        headerCls: "border-b"
      },
      false: {
        innerWrapper: "rounded-t-lg"
      }
    },
    hasFooter: {
      true: {
        footerCls: "border-t"
      },
      false: {
        innerWrapper: "rounded-b-lg"
      }
    }
  }
});

// node_modules/flowbite-svelte/dist/forms/timepicker/Timepicker.svelte
Timepicker[FILENAME] = "node_modules/flowbite-svelte/dist/forms/timepicker/Timepicker.svelte";
var root_611 = add_locations(from_svg(`<svg class="h-4 w-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6v4l3.276 3.276M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`), Timepicker[FILENAME], [[99, 10, [[100, 12]]]]);
var root_331 = add_locations(from_html(`<!> <!>`, 1), Timepicker[FILENAME], []);
var root_89 = add_locations(from_html(`<!> <!>`, 1), Timepicker[FILENAME], []);
var root_1111 = add_locations(from_svg(` <svg class="ml-2 h-4 w-4" aria-hidden="true" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>`, 1), Timepicker[FILENAME], [[111, 8, [[111, 142]]]]);
var root_103 = add_locations(from_html(`<!> <!> <!>`, 1), Timepicker[FILENAME], []);
var root_192 = add_locations(from_svg(`<svg class="h-4 w-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6v4l3.276 3.276M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`), Timepicker[FILENAME], [[126, 10, [[127, 12]]]]);
var root_2210 = add_locations(from_svg(`<svg class="h-4 w-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6v4l3.276 3.276M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`), Timepicker[FILENAME], [[137, 10, [[138, 12]]]]);
var root_168 = add_locations(from_html(`<!> <!> <span class="flex items-center justify-center px-2 text-gray-500 dark:text-gray-400">-</span> <!> <!>`, 1), Timepicker[FILENAME], [[131, 6]]);
var root_252 = add_locations(from_svg(` <svg class="ml-2 h-4 w-4" aria-hidden="true" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>`, 1), Timepicker[FILENAME], [[145, 8, [[145, 142]]]]);
var root_262 = add_locations(from_html(`<div class="flex flex-col space-y-4"><div class="flex space-x-4"><div class="flex flex-col"><!> <!></div> <div class="flex flex-col"><!> <!></div></div> <!></div>`), Timepicker[FILENAME], [
  [
    148,
    8,
    [
      [149, 10, [[150, 12], [154, 12]]]
    ]
  ]
]);
var root_242 = add_locations(from_html(`<!> <!>`, 1), Timepicker[FILENAME], []);
var root_3210 = add_locations(from_html(`<div class="flex space-x-4"><div class="flex flex-col"><!> <!></div> <div class="flex flex-col"><!> <!></div></div>`), Timepicker[FILENAME], [
  [170, 10, [[171, 12], [175, 12]]]
]);
var root_31 = add_locations(from_html(`<div class="flex w-full flex-col space-y-2"><div class="flex items-center justify-between"><!></div> <!></div>`), Timepicker[FILENAME], [[165, 6, [[166, 8]]]]);
var root_352 = add_locations(from_html(`<div></div>`), Timepicker[FILENAME], [[185, 2]]);
function Timepicker($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Timepicker);
  var $$ownership_validator = create_ownership_validator($$props);
  let id = prop($$props, "id", 3, "time"), endId = prop($$props, "endId", 3, "end-time"), value = prop($$props, "value", 7, "00:00"), endValue = prop($$props, "endValue", 7, "00:00"), min = prop($$props, "min", 3, ""), max = prop($$props, "max", 3, ""), required = prop($$props, "required", 3, true), disabled = prop($$props, "disabled", 3, false), buttonColor = prop($$props, "buttonColor", 3, "primary"), type = prop($$props, "type", 3, "default"), optionLabel = prop($$props, "optionLabel", 3, "Options"), options = prop($$props, "options", 19, () => []), size = prop($$props, "size", 3, "md"), divClass = prop($$props, "divClass", 3, "inline-flex rounded-lg shadow-sm"), timerangeLabel = prop($$props, "timerangeLabel", 3, "Choose time range"), timerangeButtonLabel = prop($$props, "timerangeButtonLabel", 3, "Save time"), timeIntervals = prop($$props, "timeIntervals", 19, () => []), columns = prop($$props, "columns", 3, 2);
  const defaultInputClass = "block disabled:cursor-not-allowed disabled:opacity-50 rtl:text-right focus:ring-0 focus:outline-none p-2.5 border-r-0";
  const inputCls = twMerge(defaultInputClass, $$props.inputClass);
  const defaultSelectClass = "text-gray-900 disabled:text-gray-400 bg-gray-50 border border-gray-300 rounded-r-lg rounded-l-none focus:ring-0 focus:outline-none block w-full p-2.5 border-l-1 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:disabled:text-gray-500 dark:focus:ring-primary-500 dark:focus:border-primary-500";
  const selectCls = twMerge(defaultSelectClass, $$props.selectClass);
  let selectedOption = state("");
  let dropdownOpen = state(false);
  let showTimerange = state(false);
  function timeToMinutes(time) {
    const [hours, minutes] = time.split(":").map(Number);
    return hours * 60 + minutes;
  }
  function handleTimeChange(event3, isEndTime = false) {
    const target = event3.target;
    const newValue = target.value;
    const newMinutes = timeToMinutes(newValue);
    const valueMinutes = timeToMinutes(value());
    const endValueMinutes = timeToMinutes(endValue());
    if (isEndTime) {
      if (newMinutes < valueMinutes) {
        value(newValue);
      } else {
        endValue(newValue);
      }
    } else {
      if (newMinutes > endValueMinutes) {
        endValue(newValue);
      } else {
        value(newValue);
      }
    }
    if (strict_equals(type(), "timerange-dropdown", false)) {
      notifyChange();
    }
  }
  function handleOptionSelect(event3) {
    const target = event3.target;
    set(selectedOption, target.value, true);
    notifyChange();
  }
  function handleDropdownSelect(option) {
    set(dropdownOpen, false);
    set(selectedOption, option.value, true);
    notifyChange();
  }
  function notifyChange() {
    var _a;
    if ($$props.onselect) {
      $$props.onselect({
        time: value(),
        endTime: endValue(),
        [optionLabel() ? optionLabel().toLowerCase() : "options"]: get(selectedOption) || ((_a = options()[0]) == null ? void 0 : _a.value) || ""
      });
    }
  }
  function applyTimerange() {
    set(dropdownOpen, false);
    notifyChange();
  }
  function toggleTimerange() {
    set(showTimerange, !get(showTimerange));
    if (!get(showTimerange)) {
      notifyChange();
    }
  }
  function handleInlineButtonSelect(time) {
    value(time);
    notifyChange();
  }
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_10 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      ButtonGroup_default(node_1, {
        get size() {
          return size();
        },
        get class() {
          return divClass();
        },
        children: wrap_snippet(Timepicker, ($$anchor3, $$slotProps) => {
          var fragment_2 = comment();
          var node_2 = first_child(fragment_2);
          {
            var consequent_1 = ($$anchor4) => {
              var fragment_3 = root_331();
              var node_3 = first_child(fragment_3);
              {
                $$ownership_validator.binding("value", Input_default, value);
                Input_default(node_3, {
                  get id() {
                    return id();
                  },
                  get color() {
                    return $$props.inputColor;
                  },
                  type: "time",
                  get min() {
                    return min();
                  },
                  get max() {
                    return max();
                  },
                  get required() {
                    return required();
                  },
                  get disabled() {
                    return disabled();
                  },
                  class: `${inputCls ?? ""} rounded-l-lg`,
                  onchange: (e) => handleTimeChange(e),
                  get value() {
                    return value();
                  },
                  set value($$value) {
                    value($$value);
                  }
                });
              }
              var node_4 = sibling(node_3, 2);
              InputAddon_default(node_4, {
                class: "rounded-r-lg",
                children: wrap_snippet(Timepicker, ($$anchor5, $$slotProps2) => {
                  var fragment_4 = comment();
                  var node_5 = first_child(fragment_4);
                  {
                    var consequent = ($$anchor6) => {
                      var fragment_5 = comment();
                      var node_6 = first_child(fragment_5);
                      component(node_6, () => $$props.Icon, ($$anchor7, $$component) => {
                        $$component($$anchor7, {
                          class: "h-4 w-4 text-gray-500 dark:text-gray-400"
                        });
                      });
                      append($$anchor6, fragment_5);
                    };
                    var alternate = ($$anchor6) => {
                      var svg = root_611();
                      append($$anchor6, svg);
                    };
                    if_block(node_5, ($$render) => {
                      if ($$props.Icon) $$render(consequent);
                      else $$render(alternate, false);
                    });
                  }
                  append($$anchor5, fragment_4);
                }),
                $$slots: { default: true }
              });
              append($$anchor4, fragment_3);
            };
            var alternate_1 = ($$anchor4, $$elseif) => {
              {
                var consequent_2 = ($$anchor5) => {
                  var fragment_6 = root_89();
                  var node_7 = first_child(fragment_6);
                  {
                    $$ownership_validator.binding("value", Input_default, value);
                    Input_default(node_7, {
                      get id() {
                        return id();
                      },
                      get color() {
                        return $$props.inputColor;
                      },
                      type: "time",
                      get min() {
                        return min();
                      },
                      get max() {
                        return max();
                      },
                      get required() {
                        return required();
                      },
                      get disabled() {
                        return disabled();
                      },
                      class: `${inputCls ?? ""} w-1/3 rounded-l-lg`,
                      onchange: (e) => handleTimeChange(e),
                      get value() {
                        return value();
                      },
                      set value($$value) {
                        value($$value);
                      }
                    });
                  }
                  var node_8 = sibling(node_7, 2);
                  Select_default(node_8, {
                    class: selectCls,
                    onchange: handleOptionSelect,
                    get items() {
                      return options();
                    },
                    get value() {
                      return get(selectedOption);
                    }
                  });
                  append($$anchor5, fragment_6);
                };
                var alternate_2 = ($$anchor5, $$elseif2) => {
                  {
                    var consequent_3 = ($$anchor6) => {
                      var fragment_7 = root_103();
                      var node_9 = first_child(fragment_7);
                      {
                        $$ownership_validator.binding("value", Input_default, value);
                        Input_default(node_9, {
                          get id() {
                            return id();
                          },
                          get color() {
                            return $$props.inputColor;
                          },
                          type: "time",
                          get min() {
                            return min();
                          },
                          get max() {
                            return max();
                          },
                          get required() {
                            return required();
                          },
                          get disabled() {
                            return disabled();
                          },
                          class: `${inputCls ?? ""} rounded-l-lg`,
                          onchange: (e) => handleTimeChange(e),
                          get value() {
                            return value();
                          },
                          set value($$value) {
                            value($$value);
                          }
                        });
                      }
                      var node_10 = sibling(node_9, 2);
                      Button_default(node_10, {
                        get color() {
                          return buttonColor();
                        },
                        class: "!rounded-r-lg",
                        children: wrap_snippet(Timepicker, ($$anchor7, $$slotProps2) => {
                          next();
                          var fragment_8 = root_1111();
                          var text2 = first_child(fragment_8, true);
                          next();
                          template_effect(() => set_text(text2, optionLabel()));
                          append($$anchor7, fragment_8);
                        }),
                        $$slots: { default: true }
                      });
                      var node_11 = sibling(node_10, 2);
                      Dropdown_default(node_11, {
                        simple: true,
                        children: wrap_snippet(Timepicker, ($$anchor7, $$slotProps2) => {
                          var fragment_9 = comment();
                          var node_12 = first_child(fragment_9);
                          each(node_12, 17, options, index, ($$anchor8, option) => {
                            var fragment_10 = comment();
                            var node_13 = first_child(fragment_10);
                            DropdownItem_default(node_13, {
                              onclick: () => handleDropdownSelect(get(option)),
                              children: wrap_snippet(Timepicker, ($$anchor9, $$slotProps3) => {
                                next();
                                var text_1 = text();
                                template_effect(() => set_text(text_1, get(option).name));
                                append($$anchor9, text_1);
                              }),
                              $$slots: { default: true }
                            });
                            append($$anchor8, fragment_10);
                          });
                          append($$anchor7, fragment_9);
                        }),
                        $$slots: { default: true }
                      });
                      append($$anchor6, fragment_7);
                    };
                    var alternate_3 = ($$anchor6, $$elseif3) => {
                      {
                        var consequent_6 = ($$anchor7) => {
                          var fragment_12 = root_168();
                          var node_14 = first_child(fragment_12);
                          {
                            $$ownership_validator.binding("value", Input_default, value);
                            Input_default(node_14, {
                              get id() {
                                return id();
                              },
                              get color() {
                                return $$props.inputColor;
                              },
                              type: "time",
                              get min() {
                                return min();
                              },
                              get max() {
                                return max();
                              },
                              get required() {
                                return required();
                              },
                              get disabled() {
                                return disabled();
                              },
                              class: `${inputCls ?? ""} rounded-l-lg`,
                              onchange: (e) => handleTimeChange(e),
                              get value() {
                                return value();
                              },
                              set value($$value) {
                                value($$value);
                              }
                            });
                          }
                          var node_15 = sibling(node_14, 2);
                          InputAddon_default(node_15, {
                            class: "rounded-none",
                            children: wrap_snippet(Timepicker, ($$anchor8, $$slotProps2) => {
                              var fragment_13 = comment();
                              var node_16 = first_child(fragment_13);
                              {
                                var consequent_4 = ($$anchor9) => {
                                  var fragment_14 = comment();
                                  var node_17 = first_child(fragment_14);
                                  component(node_17, () => $$props.Icon, ($$anchor10, $$component) => {
                                    $$component($$anchor10, {
                                      class: "h-4 w-4 text-gray-500 dark:text-gray-400"
                                    });
                                  });
                                  append($$anchor9, fragment_14);
                                };
                                var alternate_4 = ($$anchor9) => {
                                  var svg_1 = root_192();
                                  append($$anchor9, svg_1);
                                };
                                if_block(node_16, ($$render) => {
                                  if ($$props.Icon) $$render(consequent_4);
                                  else $$render(alternate_4, false);
                                });
                              }
                              append($$anchor8, fragment_13);
                            }),
                            $$slots: { default: true }
                          });
                          var node_18 = sibling(node_15, 4);
                          {
                            $$ownership_validator.binding("endValue", Input_default, endValue);
                            Input_default(node_18, {
                              get id() {
                                return endId();
                              },
                              get color() {
                                return $$props.inputColor;
                              },
                              type: "time",
                              get min() {
                                return min();
                              },
                              get max() {
                                return max();
                              },
                              get required() {
                                return required();
                              },
                              get disabled() {
                                return disabled();
                              },
                              class: `${inputCls ?? ""} rounded-none`,
                              onchange: (e) => handleTimeChange(e, true),
                              get value() {
                                return endValue();
                              },
                              set value($$value) {
                                endValue($$value);
                              }
                            });
                          }
                          var node_19 = sibling(node_18, 2);
                          InputAddon_default(node_19, {
                            class: "rounded-r-lg",
                            children: wrap_snippet(Timepicker, ($$anchor8, $$slotProps2) => {
                              var fragment_15 = comment();
                              var node_20 = first_child(fragment_15);
                              {
                                var consequent_5 = ($$anchor9) => {
                                  var fragment_16 = comment();
                                  var node_21 = first_child(fragment_16);
                                  component(node_21, () => $$props.Icon, ($$anchor10, $$component) => {
                                    $$component($$anchor10, {
                                      class: "h-4 w-4 text-gray-500 dark:text-gray-400"
                                    });
                                  });
                                  append($$anchor9, fragment_16);
                                };
                                var alternate_5 = ($$anchor9) => {
                                  var svg_2 = root_2210();
                                  append($$anchor9, svg_2);
                                };
                                if_block(node_20, ($$render) => {
                                  if ($$props.Icon) $$render(consequent_5);
                                  else $$render(alternate_5, false);
                                });
                              }
                              append($$anchor8, fragment_15);
                            }),
                            $$slots: { default: true }
                          });
                          append($$anchor7, fragment_12);
                        };
                        var alternate_6 = ($$anchor7, $$elseif4) => {
                          {
                            var consequent_7 = ($$anchor8) => {
                              var fragment_17 = root_242();
                              var node_22 = first_child(fragment_17);
                              Button_default(node_22, {
                                get color() {
                                  return buttonColor();
                                },
                                get size() {
                                  return size();
                                },
                                class: "!rounded-r-lg",
                                children: wrap_snippet(Timepicker, ($$anchor9, $$slotProps2) => {
                                  next();
                                  var fragment_18 = root_252();
                                  var text_2 = first_child(fragment_18, true);
                                  next();
                                  template_effect(() => set_text(text_2, timerangeLabel()));
                                  append($$anchor9, fragment_18);
                                }),
                                $$slots: { default: true }
                              });
                              var node_23 = sibling(node_22, 2);
                              Dropdown_default(node_23, {
                                simple: true,
                                class: "p-4 last:rounded-r-lg",
                                children: wrap_snippet(Timepicker, ($$anchor9, $$slotProps2) => {
                                  var div = root_262();
                                  var div_1 = child(div);
                                  var div_2 = child(div_1);
                                  var node_24 = child(div_2);
                                  Label_default(node_24, {
                                    get for() {
                                      return id();
                                    },
                                    children: wrap_snippet(Timepicker, ($$anchor10, $$slotProps3) => {
                                      next();
                                      var text_3 = text("Start time:");
                                      append($$anchor10, text_3);
                                    }),
                                    $$slots: { default: true }
                                  });
                                  var node_25 = sibling(node_24, 2);
                                  {
                                    $$ownership_validator.binding("value", Input_default, value);
                                    Input_default(node_25, {
                                      get id() {
                                        return id();
                                      },
                                      get color() {
                                        return $$props.inputColor;
                                      },
                                      type: "time",
                                      get min() {
                                        return min();
                                      },
                                      get max() {
                                        return max();
                                      },
                                      get required() {
                                        return required();
                                      },
                                      get disabled() {
                                        return disabled();
                                      },
                                      class: `${inputCls ?? ""} rounded-l-lg border-r`,
                                      onchange: (e) => handleTimeChange(e),
                                      get value() {
                                        return value();
                                      },
                                      set value($$value) {
                                        value($$value);
                                      }
                                    });
                                  }
                                  reset(div_2);
                                  var div_3 = sibling(div_2, 2);
                                  var node_26 = child(div_3);
                                  Label_default(node_26, {
                                    get for() {
                                      return endId();
                                    },
                                    children: wrap_snippet(Timepicker, ($$anchor10, $$slotProps3) => {
                                      next();
                                      var text_4 = text("End time:");
                                      append($$anchor10, text_4);
                                    }),
                                    $$slots: { default: true }
                                  });
                                  var node_27 = sibling(node_26, 2);
                                  {
                                    $$ownership_validator.binding("endValue", Input_default, endValue);
                                    Input_default(node_27, {
                                      get id() {
                                        return endId();
                                      },
                                      get color() {
                                        return $$props.inputColor;
                                      },
                                      type: "time",
                                      get min() {
                                        return min();
                                      },
                                      get max() {
                                        return max();
                                      },
                                      get required() {
                                        return required();
                                      },
                                      get disabled() {
                                        return disabled();
                                      },
                                      class: `${inputCls ?? ""} rounded-l-lg border-r`,
                                      onchange: (e) => handleTimeChange(e, true),
                                      get value() {
                                        return endValue();
                                      },
                                      set value($$value) {
                                        endValue($$value);
                                      }
                                    });
                                  }
                                  reset(div_3);
                                  reset(div_1);
                                  var node_28 = sibling(div_1, 2);
                                  Button_default(node_28, {
                                    get color() {
                                      return buttonColor();
                                    },
                                    class: "w-full !rounded-l-lg",
                                    onclick: applyTimerange,
                                    children: wrap_snippet(Timepicker, ($$anchor10, $$slotProps3) => {
                                      next();
                                      var text_5 = text();
                                      template_effect(() => set_text(text_5, timerangeButtonLabel()));
                                      append($$anchor10, text_5);
                                    }),
                                    $$slots: { default: true }
                                  });
                                  reset(div);
                                  append($$anchor9, div);
                                }),
                                $$slots: { default: true }
                              });
                              append($$anchor8, fragment_17);
                            };
                            var alternate_7 = ($$anchor8, $$elseif5) => {
                              {
                                var consequent_9 = ($$anchor9) => {
                                  var div_4 = root_31();
                                  var div_5 = child(div_4);
                                  var node_29 = child(div_5);
                                  const expression = user_derived(() => `${id()}-timerange-toggle`);
                                  Toggle_default(node_29, {
                                    get id() {
                                      return get(expression);
                                    },
                                    get checked() {
                                      return get(showTimerange);
                                    },
                                    onchange: toggleTimerange,
                                    spanClass: "me-0"
                                  });
                                  reset(div_5);
                                  var node_30 = sibling(div_5, 2);
                                  {
                                    var consequent_8 = ($$anchor10) => {
                                      var div_6 = root_3210();
                                      var div_7 = child(div_6);
                                      var node_31 = child(div_7);
                                      Label_default(node_31, {
                                        get for() {
                                          return id();
                                        },
                                        children: wrap_snippet(Timepicker, ($$anchor11, $$slotProps2) => {
                                          next();
                                          var text_6 = text("Start time:");
                                          append($$anchor11, text_6);
                                        }),
                                        $$slots: { default: true }
                                      });
                                      var node_32 = sibling(node_31, 2);
                                      {
                                        $$ownership_validator.binding("value", Input_default, value);
                                        Input_default(node_32, {
                                          get id() {
                                            return id();
                                          },
                                          get color() {
                                            return $$props.inputColor;
                                          },
                                          type: "time",
                                          get min() {
                                            return min();
                                          },
                                          get max() {
                                            return max();
                                          },
                                          get required() {
                                            return required();
                                          },
                                          get disabled() {
                                            return disabled();
                                          },
                                          class: `${inputCls ?? ""} !rounded-lg border-r-1`,
                                          onchange: (e) => handleTimeChange(e),
                                          get value() {
                                            return value();
                                          },
                                          set value($$value) {
                                            value($$value);
                                          }
                                        });
                                      }
                                      reset(div_7);
                                      var div_8 = sibling(div_7, 2);
                                      var node_33 = child(div_8);
                                      Label_default(node_33, {
                                        get for() {
                                          return endId();
                                        },
                                        children: wrap_snippet(Timepicker, ($$anchor11, $$slotProps2) => {
                                          next();
                                          var text_7 = text("End time:");
                                          append($$anchor11, text_7);
                                        }),
                                        $$slots: { default: true }
                                      });
                                      var node_34 = sibling(node_33, 2);
                                      {
                                        $$ownership_validator.binding("endValue", Input_default, endValue);
                                        Input_default(node_34, {
                                          get id() {
                                            return endId();
                                          },
                                          get color() {
                                            return $$props.inputColor;
                                          },
                                          type: "time",
                                          get min() {
                                            return min();
                                          },
                                          get max() {
                                            return max();
                                          },
                                          get required() {
                                            return required();
                                          },
                                          get disabled() {
                                            return disabled();
                                          },
                                          class: `${inputCls ?? ""} !rounded-lg border-r-1`,
                                          onchange: (e) => handleTimeChange(e, true),
                                          get value() {
                                            return endValue();
                                          },
                                          set value($$value) {
                                            endValue($$value);
                                          }
                                        });
                                      }
                                      reset(div_8);
                                      reset(div_6);
                                      append($$anchor10, div_6);
                                    };
                                    if_block(node_30, ($$render) => {
                                      if (get(showTimerange)) $$render(consequent_8);
                                    });
                                  }
                                  reset(div_4);
                                  append($$anchor9, div_4);
                                };
                                if_block(
                                  $$anchor8,
                                  ($$render) => {
                                    if (strict_equals(type(), "timerange-toggle")) $$render(consequent_9);
                                  },
                                  $$elseif5
                                );
                              }
                            };
                            if_block(
                              $$anchor7,
                              ($$render) => {
                                if (strict_equals(type(), "timerange-dropdown")) $$render(consequent_7);
                                else $$render(alternate_7, false);
                              },
                              $$elseif4
                            );
                          }
                        };
                        if_block(
                          $$anchor6,
                          ($$render) => {
                            if (strict_equals(type(), "range")) $$render(consequent_6);
                            else $$render(alternate_6, false);
                          },
                          $$elseif3
                        );
                      }
                    };
                    if_block(
                      $$anchor5,
                      ($$render) => {
                        if (strict_equals(type(), "dropdown")) $$render(consequent_3);
                        else $$render(alternate_3, false);
                      },
                      $$elseif2
                    );
                  }
                };
                if_block(
                  $$anchor4,
                  ($$render) => {
                    if (strict_equals(type(), "select")) $$render(consequent_2);
                    else $$render(alternate_2, false);
                  },
                  $$elseif
                );
              }
            };
            if_block(node_2, ($$render) => {
              if (strict_equals(type(), "default")) $$render(consequent_1);
              else $$render(alternate_1, false);
            });
          }
          append($$anchor3, fragment_2);
        }),
        $$slots: { default: true }
      });
      append($$anchor2, fragment_1);
    };
    var alternate_8 = ($$anchor2) => {
      var div_9 = root_352();
      let classes;
      each(div_9, 21, timeIntervals, index, ($$anchor3, time) => {
        var fragment_20 = comment();
        var node_35 = first_child(fragment_20);
        const expression_1 = user_derived(() => strict_equals(value(), get(time)) ? buttonColor() : "light");
        Button_default(node_35, {
          get size() {
            return size();
          },
          get color() {
            return get(expression_1);
          },
          class: "rounded-lg",
          onclick: () => handleInlineButtonSelect(get(time)),
          children: wrap_snippet(Timepicker, ($$anchor4, $$slotProps) => {
            next();
            var text_8 = text();
            template_effect(() => set_text(text_8, get(time)));
            append($$anchor4, text_8);
          }),
          $$slots: { default: true }
        });
        append($$anchor3, fragment_20);
      });
      reset(div_9);
      template_effect(($0) => classes = set_class(div_9, 1, "grid w-full gap-2", null, classes, $0), [
        () => ({
          "grid-cols-1": strict_equals(columns(), 1),
          "grid-cols-2": strict_equals(columns(), 2),
          "grid-cols-3": strict_equals(columns(), 3),
          "grid-cols-4": strict_equals(columns(), 4)
        })
      ]);
      append($$anchor2, div_9);
    };
    if_block(node, ($$render) => {
      if (strict_equals(type(), "inline-buttons", false)) $$render(consequent_10);
      else $$render(alternate_8, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Timepicker = hmr(Timepicker, () => Timepicker[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Timepicker[HMR].source;
    set(Timepicker[HMR].source, module.default[HMR].original);
  });
}
var Timepicker_default = Timepicker;

// node_modules/flowbite-svelte/dist/forms/toggle/Toggle.svelte
Toggle[FILENAME] = "node_modules/flowbite-svelte/dist/forms/toggle/Toggle.svelte";
var root_169 = add_locations(from_html(`<!> <input/> <span></span> <!>`, 1), Toggle[FILENAME], [[16, 2], [17, 2]]);
function Toggle($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Toggle);
  let size = prop($$props, "size", 3, "default"), checked = prop($$props, "checked", 15), color = prop($$props, "color", 3, "primary"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "size",
      "value",
      "checked",
      "disabled",
      "color",
      "class",
      "inputClass",
      "spanClass",
      "offLabel"
    ],
    "restProps"
  );
  const $$d = user_derived(() => toggle({
    color: color(),
    checked: checked(),
    size: size(),
    disabled: $$props.disabled,
    off_state_label: !!$$props.offLabel
  })), input2 = user_derived(() => {
    let { input: $$1, label: $$2, span: $$3 } = get($$d);
    return $$1;
  }), label2 = user_derived(() => {
    let { input: $$1, label: $$2, span: $$3 } = get($$d);
    return $$2;
  }), span2 = user_derived(() => {
    let { input: $$1, label: $$2, span: $$3 } = get($$d);
    return $$3;
  });
  var fragment = comment();
  var node = first_child(fragment);
  const expression = user_derived(() => get(label2)({ class: clsx_default($$props.class) }));
  Label_default(node, {
    get class() {
      return get(expression);
    },
    children: wrap_snippet(Toggle, ($$anchor2, $$slotProps) => {
      var fragment_1 = root_169();
      var node_1 = first_child(fragment_1);
      {
        var consequent = ($$anchor3) => {
          var fragment_2 = comment();
          var node_2 = first_child(fragment_2);
          snippet(node_2, () => $$props.offLabel);
          append($$anchor3, fragment_2);
        };
        if_block(node_1, ($$render) => {
          if ($$props.offLabel) $$render(consequent);
        });
      }
      var input_1 = sibling(node_1, 2);
      remove_input_defaults(input_1);
      let attributes;
      var span_1 = sibling(input_1, 2);
      var node_3 = sibling(span_1, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_3 = comment();
          var node_4 = first_child(fragment_3);
          snippet(node_4, () => $$props.children);
          append($$anchor3, fragment_3);
        };
        if_block(node_3, ($$render) => {
          if ($$props.children) $$render(consequent_1);
        });
      }
      template_effect(
        ($0, $1) => {
          attributes = set_attributes(input_1, attributes, {
            type: "checkbox",
            value: $$props.value,
            ...restProps,
            disabled: $$props.disabled,
            class: $0
          });
          set_class(span_1, 1, $1);
        },
        [
          () => get(input2)({ class: $$props.inputClass }),
          () => clsx2(get(span2)({ class: $$props.spanClass }))
        ]
      );
      bind_checked(input_1, checked);
      append($$anchor2, fragment_1);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Toggle = hmr(Toggle, () => Toggle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toggle[HMR].source;
    set(Toggle[HMR].source, module.default[HMR].original);
  });
}
var Toggle_default = Toggle;

// node_modules/flowbite-svelte/dist/forms/toggle/theme.js
var toggle = ce({
  slots: {
    span: "me-3 shrink-0 bg-gray-200 rounded-full peer-focus:ring-4 peer-checked:after:translate-x-full peer-checked:rtl:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:bg-white after:border-gray-300 after:border after:rounded-full after:transition-all dark:bg-gray-600 dark:border-gray-500 relative ",
    label: "flex items-center",
    input: "w-4 h-4 bg-gray-100 border-gray-300 dark:ring-offset-gray-800 focus:ring-2 rounded-sm dark:bg-gray-700 dark:border-gray-600 sr-only peer"
  },
  variants: {
    disabled: {
      true: { label: "cursor-not-allowed opacity-50" }
    },
    checked: {
      true: "",
      false: ""
    },
    off_state_label: {
      true: { span: "ms-3" }
    },
    color: {
      // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      primary: {
        span: "peer-focus:ring-primary-300 dark:peer-focus:ring-primary-800 peer-checked:bg-primary-600"
      },
      secondary: {
        span: "peer-focus:ring-secondary-300 dark:peer-focus:ring-secondary-800 peer-checked:bg-secondary-600"
      },
      gray: {
        span: "peer-focus:ring-gray-300 dark:peer-focus:ring-gray-800 peer-checked:bg-gray-500"
      },
      red: {
        span: "peer-focus:ring-red-300 dark:peer-focus:ring-red-800 peer-checked:bg-red-600"
      },
      orange: {
        span: "peer-focus:ring-orange-300 dark:peer-focus:ring-orange-800 peer-checked:bg-orange-500"
      },
      amber: {
        span: "peer-focus:ring-amber-300 dark:peer-focus:ring-amber-800 peer-checked:bg-amber-600"
      },
      yellow: {
        span: "peer-focus:ring-yellow-300 dark:peer-focus:ring-yellow-800 peer-checked:bg-yellow-400"
      },
      lime: {
        span: "peer-focus:ring-lime-300 dark:peer-focus:ring-lime-800 peer-checked:bg-lime-500"
      },
      green: {
        span: "peer-focus:ring-green-300 dark:peer-focus:ring-green-800 peer-checked:bg-green-600"
      },
      emerald: {
        span: "peer-focus:ring-emerald-300 dark:peer-focus:ring-emerald-800 peer-checked:bg-emerald-600"
      },
      teal: {
        span: "peer-focus:ring-teal-300 dark:peer-focus:ring-teal-800 peer-checked:bg-teal-600"
      },
      cyan: {
        span: "peer-focus:ring-cyan-300 dark:peer-focus:ring-cyan-800 peer-checked:bg-cyan-600"
      },
      sky: {
        span: "peer-focus:ring-sky-300 dark:peer-focus:ring-sky-800 peer-checked:bg-sky-600"
      },
      blue: {
        span: "peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 peer-checked:bg-blue-600"
      },
      indigo: {
        span: "peer-focus:ring-indigo-300 dark:peer-focus:ring-indigo-800 peer-checked:bg-indigo-600"
      },
      violet: {
        span: "peer-focus:ring-violet-300 dark:peer-focus:ring-violet-800 peer-checked:bg-violet-600"
      },
      purple: {
        span: "peer-focus:ring-purple-300 dark:peer-focus:ring-purple-800 peer-checked:bg-purple-600"
      },
      fuchsia: {
        span: "peer-focus:ring-fuchsia-300 dark:peer-focus:ring-fuchsia-800 peer-checked:bg-fuchsia-600"
      },
      pink: {
        span: "peer-focus:ring-pink-300 dark:peer-focus:ring-pink-800 peer-checked:bg-pink-600"
      },
      rose: {
        span: "peer-focus:ring-rose-300 dark:peer-focus:ring-rose-800 peer-checked:bg-rose-600"
      }
    },
    size: {
      small: {
        span: "w-9 h-5 after:top-[2px] after:start-[2px] after:h-4 after:w-4"
      },
      default: {
        span: "w-11 h-6 after:top-0.5 after:start-[2px] after:h-5 after:w-5"
      },
      large: {
        span: "w-14 h-7 after:top-0.5 after:start-[4px]  after:h-6 after:w-6"
      }
    }
  },
  defaultVariants: {
    color: "primary"
  }
});

// node_modules/flowbite-svelte/dist/typography/anchor/A.svelte
A[FILENAME] = "node_modules/flowbite-svelte/dist/typography/anchor/A.svelte";
var root_170 = add_locations(from_html(`<button><!></button>`), A[FILENAME], [[29, 2]]);
var root_236 = add_locations(from_html(`<a><!></a>`), A[FILENAME], [[34, 2]]);
function A($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, A);
  let color = prop($$props, "color", 3, "primary"), asButton = prop($$props, "asButton", 3, false), href = prop($$props, "href", 3, "#"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "color",
      "asButton",
      "onclick",
      "href",
      "class"
    ],
    "restProps"
  );
  let linkClass = user_derived(() => anchor({
    color: color(),
    class: clsx_default($$props.class)
  }));
  function handleClick(event3) {
    if (asButton()) {
      event3.preventDefault();
    }
    if ($$props.onclick) {
      $$props.onclick(event3);
    }
  }
  let buttonProps = user_derived(() => () => {
    const { href: href2, target, rel, download, ...filtered } = restProps;
    return filtered;
  });
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var button2 = root_170();
      let attributes;
      var node_1 = child(button2);
      snippet(node_1, () => $$props.children);
      reset(button2);
      template_effect(() => attributes = set_attributes(button2, attributes, {
        type: "button",
        class: get(linkClass),
        onclick: handleClick,
        ...get(buttonProps)
      }));
      append($$anchor2, button2);
    };
    var alternate = ($$anchor2) => {
      var a = root_236();
      let attributes_1;
      var node_2 = child(a);
      snippet(node_2, () => $$props.children);
      reset(a);
      template_effect(() => attributes_1 = set_attributes(a, attributes_1, {
        href: href(),
        class: get(linkClass),
        onclick: handleClick,
        ...restProps
      }));
      append($$anchor2, a);
    };
    if_block(node, ($$render) => {
      if (asButton()) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  A = hmr(A, () => A[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = A[HMR].source;
    set(A[HMR].source, module.default[HMR].original);
  });
}
var A_default = A;

// node_modules/flowbite-svelte/dist/typography/anchor/theme.js
var anchor = ce({
  base: "inline-flex items-center hover:underline",
  variants: {
    color: {
      // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      primary: "text-primary-600 dark:text-primary-500",
      secondary: "text-secondary-600 dark:text-secondary-500",
      gray: "text-gray-600 dark:text-gray-500",
      red: "text-red-600 dark:text-red-500",
      orange: "text-orange-600 dark:text-orange-500",
      amber: "text-amber-600 dark:text-amber-500",
      yellow: "text-yellow-600 dark:text-yellow-500",
      lime: "text-lime-600 dark:text-lime-500",
      green: "text-green-600 dark:text-green-500",
      emerald: "text-emerald-600 dark:text-emerald-500",
      teal: "text-teal-600 dark:text-teal-500",
      cyan: "text-cyan-600 dark:text-cyan-500",
      sky: "text-sky-600 dark:text-sky-500",
      blue: "text-blue-600 dark:text-blue-500",
      indigo: "text-indigo-600 dark:text-indigo-500",
      violet: "text-violet-600 dark:text-violet-500",
      purple: "text-purple-600 dark:text-purple-500",
      fuchsia: "text-fuchsia-600 dark:text-fuchsia-500",
      pink: "text-pink-600 dark:text-pink-500",
      rose: "text-rose-600 dark:text-rose-500"
    }
  }
});

// node_modules/flowbite-svelte/dist/typography/blockquote/Blockquote.svelte
Blockquote[FILENAME] = "node_modules/flowbite-svelte/dist/typography/blockquote/Blockquote.svelte";
var root104 = add_locations(from_html(`<blockquote><!></blockquote>`), Blockquote[FILENAME], [[20, 0]]);
function Blockquote($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Blockquote);
  let italic = prop($$props, "italic", 3, true), alignment = prop($$props, "alignment", 3, "left"), size = prop($$props, "size", 3, "lg"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "border",
      "italic",
      "bg",
      "alignment",
      "size"
    ],
    "restProps"
  );
  let blockquoteClass = user_derived(() => blockquote({
    border: $$props.border,
    italic: italic(),
    bg: $$props.bg,
    alignment: alignment(),
    size: size(),
    class: clsx_default($$props.class)
  }));
  var blockquote_1 = root104();
  let attributes;
  var node = child(blockquote_1);
  snippet(node, () => $$props.children);
  reset(blockquote_1);
  template_effect(() => attributes = set_attributes(blockquote_1, attributes, {
    ...restProps,
    class: get(blockquoteClass)
  }));
  append($$anchor, blockquote_1);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Blockquote = hmr(Blockquote, () => Blockquote[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Blockquote[HMR].source;
    set(Blockquote[HMR].source, module.default[HMR].original);
  });
}
var Blockquote_default = Blockquote;

// node_modules/flowbite-svelte/dist/typography/blockquote/theme.js
var blockquote = ce({
  base: "font-semibold text-gray-900 dark:text-white",
  variants: {
    border: {
      true: "border-s-4 border-gray-300 dark:border-gray-500",
      false: ""
    },
    italic: {
      true: "italic",
      false: ""
    },
    bg: {
      true: "bg-gray-50 dark:bg-gray-800",
      false: ""
    },
    alignment: {
      left: "text-left",
      center: "text-center",
      right: "text-right"
    },
    size: {
      xs: "text-xs",
      sm: "text-sm",
      base: "text-base",
      lg: "text-lg",
      xl: "text-xl",
      "2xl": "text-2xl",
      "3xl": "text-3xl",
      "4xl": "text-4xl",
      "5xl": "text-5xl",
      "6xl": "text-6xl",
      "7xl": "text-7xl",
      "8xl": "text-8xl",
      "9xl": "text-9xl"
    }
  },
  defaultVariants: {
    border: false,
    italic: true,
    bg: false,
    alignment: "left",
    size: "lg"
  }
});

// node_modules/flowbite-svelte/dist/typography/descriptionlist/DescriptionList.svelte
DescriptionList[FILENAME] = "node_modules/flowbite-svelte/dist/typography/descriptionlist/DescriptionList.svelte";
function DescriptionList($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, DescriptionList);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "tag",
      "class"
    ],
    "restProps"
  );
  let classDesc = user_derived(() => descriptionList({
    tag: $$props.tag,
    class: clsx_default($$props.class)
  }));
  var fragment = comment();
  var node = first_child(fragment);
  validate_void_dynamic_element(() => $$props.tag);
  validate_dynamic_element_tag(() => $$props.tag);
  element(
    node,
    () => $$props.tag,
    false,
    ($$element, $$anchor2) => {
      let attributes;
      template_effect(() => attributes = set_attributes($$element, attributes, { ...restProps, class: get(classDesc) }));
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      snippet(node_1, () => $$props.children);
      append($$anchor2, fragment_1);
    },
    void 0,
    [16, 0]
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DescriptionList = hmr(DescriptionList, () => DescriptionList[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DescriptionList[HMR].source;
    set(DescriptionList[HMR].source, module.default[HMR].original);
  });
}
var DescriptionList_default = DescriptionList;

// node_modules/flowbite-svelte/dist/typography/descriptionlist/theme.js
var descriptionList = ce({
  variants: {
    tag: {
      dt: "text-gray-500 md:text-lg dark:text-gray-400",
      dd: "text-lg font-semibold"
    }
  },
  defaultVariants: {
    tag: "dt"
  }
});

// node_modules/flowbite-svelte/dist/typography/heading/Heading.svelte
Heading[FILENAME] = "node_modules/flowbite-svelte/dist/typography/heading/Heading.svelte";
function Heading($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Heading);
  let tag = prop($$props, "tag", 3, "h1"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "tag",
      "class"
    ],
    "restProps"
  );
  let headingClass = user_derived(() => heading({
    tag: tag(),
    class: clsx_default($$props.class)
  }));
  var fragment = comment();
  var node = first_child(fragment);
  validate_void_dynamic_element(tag);
  validate_dynamic_element_tag(tag);
  element(
    node,
    tag,
    false,
    ($$element, $$anchor2) => {
      let attributes;
      template_effect(() => attributes = set_attributes($$element, attributes, { ...restProps, class: get(headingClass) }));
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      snippet(node_1, () => $$props.children);
      append($$anchor2, fragment_1);
    },
    void 0,
    [11, 0]
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heading = hmr(Heading, () => Heading[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heading[HMR].source;
    set(Heading[HMR].source, module.default[HMR].original);
  });
}
var Heading_default = Heading;

// node_modules/flowbite-svelte/dist/typography/heading/theme.js
var heading = ce({
  base: "font-bold text-gray-900 dark:text-white",
  variants: {
    tag: {
      h1: "text-5xl font-extrabold",
      h2: "text-4xl",
      h3: "text-3xl",
      h4: "text-2xl",
      h5: "text-xl",
      h6: "text-lg"
    }
  },
  defaultVariants: {
    tag: "h1"
  }
});

// node_modules/flowbite-svelte/dist/typography/hr/Hr.svelte
Hr[FILENAME] = "node_modules/flowbite-svelte/dist/typography/hr/Hr.svelte";
var root_171 = add_locations(from_html(`<div><hr/> <div><!></div></div>`), Hr[FILENAME], [[12, 2, [[13, 4], [14, 4]]]]);
var root_237 = add_locations(from_html(`<hr/>`), Hr[FILENAME], [[19, 2]]);
function Hr($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Hr);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "divClass",
      "class",
      "innerDivClass"
    ],
    "restProps"
  );
  let $$d = user_derived(() => hr({ withChildren: !!$$props.children })), base = user_derived(() => {
    let { base: $$1, container: $$2, content: $$3 } = get($$d);
    return $$1;
  }), container = user_derived(() => {
    let { base: $$1, container: $$2, content: $$3 } = get($$d);
    return $$2;
  }), content = user_derived(() => {
    let { base: $$1, container: $$2, content: $$3 } = get($$d);
    return $$3;
  });
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_171();
      let attributes;
      var hr_1 = child(div);
      var div_1 = sibling(hr_1, 2);
      var node_1 = child(div_1);
      snippet(node_1, () => $$props.children);
      reset(div_1);
      reset(div);
      template_effect(
        ($0, $1, $2) => {
          attributes = set_attributes(div, attributes, { ...restProps, class: $0 });
          set_class(hr_1, 1, $1);
          set_class(div_1, 1, $2);
        },
        [
          () => get(container)({ class: $$props.divClass }),
          () => clsx2(get(base)({ class: clsx_default($$props.class) })),
          () => clsx2(get(content)({ class: $$props.innerDivClass }))
        ]
      );
      append($$anchor2, div);
    };
    var alternate = ($$anchor2) => {
      var hr_2 = root_237();
      let attributes_1;
      template_effect(($0) => attributes_1 = set_attributes(hr_2, attributes_1, { class: $0, ...restProps }), [
        () => get(base)({ class: clsx_default($$props.class) })
      ]);
      append($$anchor2, hr_2);
    };
    if_block(node, ($$render) => {
      if ($$props.children) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hr = hmr(Hr, () => Hr[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hr[HMR].source;
    set(Hr[HMR].source, module.default[HMR].original);
  });
}
var Hr_default = Hr;

// node_modules/flowbite-svelte/dist/typography/hr/theme.js
var hr = ce({
  slots: {
    base: "h-px my-8 bg-gray-200 border-0 dark:bg-gray-700",
    container: "inline-flex items-center justify-center w-full",
    content: "absolute px-4 -translate-x-1/2 rtl:translate-x-1/2 bg-white start-1/2 dark:bg-gray-900"
  },
  variants: {
    withChildren: {
      true: {
        base: "w-full",
        container: "relative"
      }
    }
  },
  defaultVariants: {
    withChildren: false
  }
});

// node_modules/flowbite-svelte/dist/typography/img/Img.svelte
Img[FILENAME] = "node_modules/flowbite-svelte/dist/typography/img/Img.svelte";
var root_238 = add_locations(from_html(`<figure><img/> <figcaption><!></figcaption></figure>`), Img[FILENAME], [[13, 4, [[14, 6], [15, 6]]]]);
var root_332 = add_locations(from_html(`<img/>`), Img[FILENAME], [[20, 4]]);
var root_419 = add_locations(from_html(`<a><!></a>`), Img[FILENAME], [[25, 2]]);
function Img($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Img);
  const imageSlot = wrap_snippet(Img, function($$anchor2) {
    validate_snippet_args(...arguments);
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor3) => {
        var figure_1 = root_238();
        var img_1 = child(figure_1);
        let attributes;
        var figcaption = sibling(img_1, 2);
        var node_1 = child(figcaption);
        html(node_1, () => $$props.caption);
        reset(figcaption);
        reset(figure_1);
        template_effect(
          ($0, $1, $2) => {
            set_class(figure_1, 1, $0);
            attributes = set_attributes(img_1, attributes, { ...restProps, class: $1 });
            set_class(figcaption, 1, $2);
          },
          [
            () => clsx2(get(figure)({ class: $$props.figClass })),
            () => get(base)({ class: clsx_default($$props.class) }),
            () => clsx2(get(figureCaption)({ class: $$props.captionClass }))
          ]
        );
        replay_events(img_1);
        append($$anchor3, figure_1);
      };
      var alternate = ($$anchor3) => {
        var img_2 = root_332();
        let attributes_1;
        template_effect(($0) => attributes_1 = set_attributes(img_2, attributes_1, { ...restProps, class: $0 }), [
          () => get(base)({ class: clsx_default($$props.class) })
        ]);
        replay_events(img_2);
        append($$anchor3, img_2);
      };
      if_block(node, ($$render) => {
        if ($$props.caption) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor2, fragment);
  });
  let size = prop($$props, "size", 3, "none"), effect2 = prop($$props, "effect", 3, "none"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "size",
      "effect",
      "caption",
      "class",
      "figClass",
      "captionClass",
      "href"
    ],
    "restProps"
  );
  let $$d = user_derived(() => img({ size: size(), effect: effect2() })), base = user_derived(() => {
    let { base: $$1, figure: $$2, figureCaption: $$3 } = get($$d);
    return $$1;
  }), figure = user_derived(() => {
    let { base: $$1, figure: $$2, figureCaption: $$3 } = get($$d);
    return $$2;
  }), figureCaption = user_derived(() => {
    let { base: $$1, figure: $$2, figureCaption: $$3 } = get($$d);
    return $$3;
  });
  var fragment_1 = comment();
  var node_2 = first_child(fragment_1);
  {
    var consequent_1 = ($$anchor2) => {
      var a = root_419();
      var node_3 = child(a);
      imageSlot(node_3);
      reset(a);
      template_effect(() => set_attribute(a, "href", $$props.href));
      append($$anchor2, a);
    };
    var alternate_1 = ($$anchor2) => {
      imageSlot($$anchor2);
    };
    if_block(node_2, ($$render) => {
      if ($$props.href) $$render(consequent_1);
      else $$render(alternate_1, false);
    });
  }
  append($$anchor, fragment_1);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Img = hmr(Img, () => Img[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Img[HMR].source;
    set(Img[HMR].source, module.default[HMR].original);
  });
}
var Img_default = Img;

// node_modules/flowbite-svelte/dist/typography/img/EnhancedImg.svelte
EnhancedImg[FILENAME] = "node_modules/flowbite-svelte/dist/typography/img/EnhancedImg.svelte";
var root_239 = add_locations(from_html(`<figure><enhanced:img></enhanced:img> <figcaption><!></figcaption></figure>`), EnhancedImg[FILENAME], [[13, 4, [[14, 6], [15, 6]]]]);
var root_333 = add_locations(from_html(`<enhanced:img></enhanced:img>`), EnhancedImg[FILENAME], [[20, 4]]);
var root_420 = add_locations(from_html(`<a><!></a>`), EnhancedImg[FILENAME], [[25, 2]]);
function EnhancedImg($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, EnhancedImg);
  const imageSlot = wrap_snippet(EnhancedImg, function($$anchor2) {
    validate_snippet_args(...arguments);
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor3) => {
        var figure_1 = root_239();
        var enhanced_img = child(figure_1);
        let attributes;
        var figcaption = sibling(enhanced_img, 2);
        var node_1 = child(figcaption);
        html(node_1, () => $$props.caption);
        reset(figcaption);
        reset(figure_1);
        template_effect(
          ($0, $1, $2) => {
            set_class(figure_1, 1, $0);
            attributes = set_attributes(enhanced_img, attributes, { src: $$props.src, ...restProps, class: $1 });
            set_class(figcaption, 1, $2);
          },
          [
            () => clsx2(get(figure)({ class: $$props.figClass })),
            () => get(base)({ class: clsx_default($$props.class) }),
            () => clsx2(get(figureCaption)({ class: $$props.captionClass }))
          ]
        );
        append($$anchor3, figure_1);
      };
      var alternate = ($$anchor3) => {
        var enhanced_img_1 = root_333();
        let attributes_1;
        template_effect(($0) => attributes_1 = set_attributes(enhanced_img_1, attributes_1, { src: $$props.src, ...restProps, class: $0 }), [
          () => get(base)({ class: clsx_default($$props.class) })
        ]);
        append($$anchor3, enhanced_img_1);
      };
      if_block(node, ($$render) => {
        if ($$props.caption) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor2, fragment);
  });
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "src",
      "href",
      "caption",
      "size",
      "figClass",
      "class",
      "captionClass"
    ],
    "restProps"
  );
  let $$d = user_derived(() => img({ size: $$props.size })), base = user_derived(() => {
    let { base: $$1, figure: $$2, figureCaption: $$3 } = get($$d);
    return $$1;
  }), figure = user_derived(() => {
    let { base: $$1, figure: $$2, figureCaption: $$3 } = get($$d);
    return $$2;
  }), figureCaption = user_derived(() => {
    let { base: $$1, figure: $$2, figureCaption: $$3 } = get($$d);
    return $$3;
  });
  var fragment_1 = comment();
  var node_2 = first_child(fragment_1);
  {
    var consequent_1 = ($$anchor2) => {
      var a = root_420();
      var node_3 = child(a);
      imageSlot(node_3);
      reset(a);
      template_effect(() => set_attribute(a, "href", $$props.href));
      append($$anchor2, a);
    };
    var alternate_1 = ($$anchor2) => {
      imageSlot($$anchor2);
    };
    if_block(node_2, ($$render) => {
      if ($$props.href) $$render(consequent_1);
      else $$render(alternate_1, false);
    });
  }
  append($$anchor, fragment_1);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EnhancedImg = hmr(EnhancedImg, () => EnhancedImg[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnhancedImg[HMR].source;
    set(EnhancedImg[HMR].source, module.default[HMR].original);
  });
}
var EnhancedImg_default = EnhancedImg;

// node_modules/flowbite-svelte/dist/typography/img/theme.js
var img = ce({
  slots: {
    base: "max-w-full h-auto",
    figure: "",
    figureCaption: "mt-2 text-sm text-center text-gray-500 dark:text-gray-400"
  },
  variants: {
    size: {
      xs: { base: "max-w-xs", figure: "max-w-xs" },
      sm: { base: "max-w-sm", figure: "max-w-sm" },
      md: { base: "max-w-md", figure: "max-w-md" },
      lg: { base: "max-w-lg", figure: "max-w-lg" },
      xl: { base: "max-w-xl", figure: "max-w-xl" },
      "2xl": { base: "max-w-2xl", figure: "max-w-2xl" },
      full: { base: "max-w-full", figure: "max-w-full" },
      none: { base: "", figure: "" }
    },
    effect: {
      grayscale: {
        base: "cursor-pointer rounded-lg grayscale filter transition-all duration-300 hover:grayscale-0"
      },
      blur: { base: "blur-xs transition-all duration-300 hover:blur-none" },
      invert: {
        base: "invert filter transition-all duration-300 hover:invert-0"
      },
      sepia: {
        base: "sepia filter transition-all duration-300 hover:sepia-0"
      },
      saturate: {
        base: "saturate-50 filter transition-all duration-300 hover:saturate-100"
      },
      "hue-rotate": {
        base: "hue-rotate-60 filter transition-all duration-300 hover:hue-rotate-0"
      },
      none: {
        base: "transition-all duration-300"
      }
    }
  }
});

// node_modules/flowbite-svelte/dist/typography/layout/Layout.svelte
Layout[FILENAME] = "node_modules/flowbite-svelte/dist/typography/layout/Layout.svelte";
var root105 = add_locations(from_html(`<div><!></div>`), Layout[FILENAME], [[11, 0]]);
function Layout($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Layout);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class"
    ],
    "restProps"
  );
  let classDiv = user_derived(() => layout({ class: clsx_default($$props.class) }));
  var div = root105();
  let attributes;
  var node = child(div);
  snippet(node, () => $$props.children);
  reset(div);
  template_effect(() => attributes = set_attributes(div, attributes, { ...restProps, class: get(classDiv) }));
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Layout = hmr(Layout, () => Layout[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Layout[HMR].source;
    set(Layout[HMR].source, module.default[HMR].original);
  });
}
var Layout_default = Layout;

// node_modules/flowbite-svelte/dist/typography/layout/theme.js
var layout = ce({
  base: "grid grid-cols-1 sm:grid-cols-2"
});

// node_modules/flowbite-svelte/dist/typography/list/List.svelte
List[FILENAME] = "node_modules/flowbite-svelte/dist/typography/list/List.svelte";
function List($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, List);
  let tag = prop($$props, "tag", 3, "ul"), isContenteditable = prop($$props, "isContenteditable", 3, false), position = prop($$props, "position", 3, "inside"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "tag",
      "isContenteditable",
      "position",
      "ctxClass",
      "class"
    ],
    "restProps"
  );
  let contextClass = state(proxy($$props.ctxClass || ""));
  setContext("ctxClass", () => get(contextClass));
  user_effect(() => {
    set(contextClass, $$props.ctxClass || "", true);
  });
  let classList = user_derived(() => list({
    position: position(),
    tag: tag(),
    class: clsx_default($$props.class)
  }));
  var fragment = comment();
  var node = first_child(fragment);
  validate_void_dynamic_element(tag);
  validate_dynamic_element_tag(tag);
  element(
    node,
    tag,
    false,
    ($$element, $$anchor2) => {
      let attributes;
      template_effect(() => attributes = set_attributes($$element, attributes, {
        ...restProps,
        class: get(classList),
        contenteditable: isContenteditable()
      }));
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      snippet(node_1, () => $$props.children);
      append($$anchor2, fragment_1);
    },
    void 0,
    [20, 0]
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List = hmr(List, () => List[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List[HMR].source;
    set(List[HMR].source, module.default[HMR].original);
  });
}
var List_default = List;

// node_modules/flowbite-svelte/dist/typography/list/Li.svelte
Li[FILENAME] = "node_modules/flowbite-svelte/dist/typography/list/Li.svelte";
var root106 = add_locations(from_html(`<li><!></li>`), Li[FILENAME], [[14, 0]]);
function Li($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Li);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "icon",
      "class"
    ],
    "restProps"
  );
  const getCtxClass = getContext("ctxClass");
  let liCls = user_derived(() => twMerge(getCtxClass(), $$props.icon && "flex items-center", clsx_default($$props.class)));
  var li = root106();
  let attributes;
  var node = child(li);
  snippet(node, () => $$props.children);
  reset(li);
  template_effect(() => attributes = set_attributes(li, attributes, { ...restProps, class: get(liCls) }));
  append($$anchor, li);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Li = hmr(Li, () => Li[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Li[HMR].source;
    set(Li[HMR].source, module.default[HMR].original);
  });
}
var Li_default = Li;

// node_modules/flowbite-svelte/dist/typography/list/theme.js
var list = ce({
  base: "",
  variants: {
    tag: {
      ul: "list-disc",
      dl: "list-none",
      ol: "list-decimal"
    },
    position: {
      inside: "list-inside",
      outside: "list-outside"
    }
  },
  defaultVariants: {
    position: "inside",
    tag: "ul"
  }
});

// node_modules/flowbite-svelte/dist/typography/mark/Mark.svelte
Mark[FILENAME] = "node_modules/flowbite-svelte/dist/typography/mark/Mark.svelte";
var root107 = add_locations(from_html(`<mark><!></mark>`), Mark[FILENAME], [[9, 0]]);
function Mark($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Mark);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class"
    ],
    "restProps"
  );
  var mark_1 = root107();
  let attributes;
  var node = child(mark_1);
  snippet(node, () => $$props.children);
  reset(mark_1);
  template_effect(($0) => attributes = set_attributes(mark_1, attributes, { ...restProps, class: $0 }), [
    () => mark({ class: clsx_default($$props.class) })
  ]);
  append($$anchor, mark_1);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mark = hmr(Mark, () => Mark[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mark[HMR].source;
    set(Mark[HMR].source, module.default[HMR].original);
  });
}
var Mark_default = Mark;

// node_modules/flowbite-svelte/dist/typography/mark/theme.js
var mark = ce({
  base: "text-white dark:bg-blue-500 bg-blue-600 px-2 rounded-sm"
});

// node_modules/flowbite-svelte/dist/typography/paragraph/P.svelte
P[FILENAME] = "node_modules/flowbite-svelte/dist/typography/paragraph/P.svelte";
var root108 = add_locations(from_html(`<p><!></p>`), P[FILENAME], [[11, 0]]);
function P($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, P);
  let className = prop($$props, "class", 3, "text-gray-900 dark:text-white"), height = prop($$props, "height", 3, "normal"), align = prop($$props, "align", 3, "left"), justify = prop($$props, "justify", 3, false), firstUpper = prop($$props, "firstUpper", 3, false), whitespace = prop($$props, "whitespace", 3, "normal"), size = prop($$props, "size", 3, "base"), space = prop($$props, "space", 3, "normal"), weight = prop($$props, "weight", 3, "normal"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "height",
      "align",
      "justify",
      "italic",
      "firstUpper",
      "whitespace",
      "size",
      "space",
      "weight"
    ],
    "restProps"
  );
  let classP = user_derived(() => paragraph({
    height: height(),
    size: size(),
    weight: weight(),
    space: space(),
    align: align(),
    justify: justify(),
    italic: $$props.italic,
    firstUpper: firstUpper(),
    whitespace: whitespace(),
    class: clsx_default(className())
  }));
  var p = root108();
  let attributes;
  var node = child(p);
  snippet(node, () => $$props.children);
  reset(p);
  template_effect(() => attributes = set_attributes(p, attributes, { ...restProps, class: get(classP) }));
  append($$anchor, p);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  P = hmr(P, () => P[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = P[HMR].source;
    set(P[HMR].source, module.default[HMR].original);
  });
}
var P_default = P;

// node_modules/flowbite-svelte/dist/typography/paragraph/theme.js
var paragraph = ce({
  base: "text-gray-900 dark:text-white",
  variants: {
    size: {
      xs: "text-xs",
      sm: "text-sm",
      base: "text-base",
      lg: "text-lg",
      xl: "text-xl",
      "2xl": "text-2xl",
      "3xl": "text-3xl",
      "4xl": "text-4xl",
      "5xl": "text-5xl",
      "6xl": "text-6xl",
      "7xl": "text-7xl",
      "8xl": "text-8xl",
      "9xl": "text-9xl"
    },
    weight: {
      thin: "font-thin",
      extralight: "font-extralight",
      light: "font-light",
      normal: "font-normal",
      medium: "font-medium",
      semibold: "font-semibold",
      bold: "font-bold",
      extrabold: "font-extrabold",
      black: "font-black"
    },
    space: {
      tighter: "tracking-tighter",
      tight: "tracking-tight",
      normal: "tracking-normal",
      wide: "tracking-wide",
      wider: "tracking-wider",
      widest: "tracking-widest"
    },
    height: {
      none: "leading-none",
      tight: "leading-tight",
      snug: "leading-snug",
      normal: "leading-normal",
      relaxed: "leading-relaxed",
      loose: "leading-loose",
      "3": "leading-3",
      "4": "leading-4",
      "5": "leading-5",
      "6": "leading-6",
      "7": "leading-7",
      "8": "leading-8",
      "9": "leading-9",
      "10": "leading-10"
    },
    align: {
      left: "text-left",
      center: "text-center",
      right: "text-right"
    },
    whitespace: {
      normal: "whitespace-normal",
      nowrap: "whitespace-nowrap",
      pre: "whitespace-pre",
      preline: "whitespace-pre-line",
      prewrap: "whitespace-pre-wrap"
    },
    italic: {
      true: "italic"
    },
    firstUpper: {
      true: "first-line:uppercase first-line:tracking-widest first-letter:text-7xl first-letter:font-bold first-letter:text-gray-900 dark:first-letter:text-gray-100 first-letter:me-3 first-letter:float-left",
      false: ""
    },
    justify: {
      true: "text-justify",
      false: ""
    }
  }
});

// node_modules/flowbite-svelte/dist/typography/secondary/Secondary.svelte
Secondary[FILENAME] = "node_modules/flowbite-svelte/dist/typography/secondary/Secondary.svelte";
var root109 = add_locations(from_html(`<small><!></small>`), Secondary[FILENAME], [[9, 0]]);
function Secondary($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Secondary);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class"
    ],
    "restProps"
  );
  var small = root109();
  let attributes;
  var node = child(small);
  snippet(node, () => $$props.children);
  reset(small);
  template_effect(($0) => attributes = set_attributes(small, attributes, { ...restProps, class: $0 }), [
    () => secondary({ class: clsx_default($$props.class) })
  ]);
  append($$anchor, small);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Secondary = hmr(Secondary, () => Secondary[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Secondary[HMR].source;
    set(Secondary[HMR].source, module.default[HMR].original);
  });
}
var Secondary_default = Secondary;

// node_modules/flowbite-svelte/dist/typography/secondary/theme.js
var secondary = ce({
  base: "text-gray-500 dark:text-gray-400 font-semibold"
});

// node_modules/flowbite-svelte/dist/typography/span/Span.svelte
Span[FILENAME] = "node_modules/flowbite-svelte/dist/typography/span/Span.svelte";
var root110 = add_locations(from_html(`<span><!></span>`), Span[FILENAME], [[24, 0]]);
function Span($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Span);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "italic",
      "underline",
      "linethrough",
      "uppercase",
      "gradient",
      "highlight",
      "decoration",
      "decorationColor",
      "decorationThickness"
    ],
    "restProps"
  );
  let classSpan = user_derived(() => span({
    italic: $$props.italic,
    underline: $$props.underline,
    linethrough: $$props.linethrough,
    uppercase: $$props.uppercase,
    gradient: $$props.gradient,
    highlight: $$props.highlight,
    decoration: $$props.decoration,
    decorationColor: $$props.decorationColor,
    decorationThickness: $$props.decorationThickness,
    class: clsx_default($$props.class)
  }));
  var span_1 = root110();
  let attributes;
  var node = child(span_1);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      snippet(node_1, () => $$props.children);
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if ($$props.children) $$render(consequent);
    });
  }
  reset(span_1);
  template_effect(() => attributes = set_attributes(span_1, attributes, { ...restProps, class: get(classSpan) }));
  append($$anchor, span_1);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Span = hmr(Span, () => Span[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Span[HMR].source;
    set(Span[HMR].source, module.default[HMR].original);
  });
}
var Span_default = Span;

// node_modules/flowbite-svelte/dist/typography/span/theme.js
var span = ce({
  variants: {
    italic: {
      true: "italic"
    },
    underline: {
      true: "underline decoration-2 decoration-blue-400 dark:decoration-blue-600"
    },
    linethrough: {
      true: "line-through"
    },
    uppercase: {
      true: "uppercase"
    },
    gradient: {
      skyToEmerald: "text-transparent bg-clip-text bg-linear-to-r to-emerald-600 from-sky-400",
      purpleToBlue: "text-transparent bg-clip-text bg-linear-to-r from-purple-500 to-blue-500",
      pinkToOrange: "text-transparent bg-clip-text bg-linear-to-r from-pink-500 to-orange-400",
      tealToLime: "text-transparent bg-clip-text bg-linear-to-r from-teal-400 to-lime-300",
      redToYellow: "text-transparent bg-clip-text bg-linear-to-r from-red-600 to-yellow-500",
      indigoToCyan: "text-transparent bg-clip-text bg-linear-to-r from-indigo-600 to-cyan-400",
      fuchsiaToRose: "text-transparent bg-clip-text bg-linear-to-r from-fuchsia-500 to-rose-500",
      amberToEmerald: "text-transparent bg-clip-text bg-linear-to-r from-amber-400 to-emerald-500",
      violetToRed: "text-transparent bg-clip-text bg-linear-to-r from-violet-600 to-red-500",
      blueToGreen: "text-transparent bg-clip-text bg-linear-to-r from-blue-400 via-teal-500 to-green-400",
      orangeToPurple: "text-transparent bg-clip-text bg-linear-to-r from-orange-400 via-pink-500 to-purple-500",
      yellowToRed: "text-transparent bg-clip-text bg-linear-to-r from-yellow-200 via-indigo-400 to-red-600",
      none: ""
    },
    highlight: {
      blue: "text-blue-600 dark:text-blue-500",
      green: "text-green-600 dark:text-green-500",
      red: "text-red-600 dark:text-red-500",
      yellow: "text-yellow-600 dark:text-yellow-500",
      purple: "text-purple-600 dark:text-purple-500",
      pink: "text-pink-600 dark:text-pink-500",
      indigo: "text-indigo-600 dark:text-indigo-500",
      teal: "text-teal-600 dark:text-teal-500",
      orange: "text-orange-600 dark:text-orange-500",
      cyan: "text-cyan-600 dark:text-cyan-500",
      fuchsia: "text-fuchsia-600 dark:text-fuchsia-500",
      amber: "text-amber-600 dark:text-amber-500",
      lime: "text-lime-600 dark:text-lime-500",
      none: ""
    },
    decoration: {
      solid: "underline decoratio-solid",
      double: "underline decoration-double",
      dotted: "underline decoration-dotted",
      dashed: "underline decoration-dashed",
      wavy: "underline decoration-wavy",
      none: "decoration-none"
    },
    decorationColor: {
      // blue, green, red, yellow, purple, pink, indigo, teal, orange, cyan, fuchsia, amber, lime, none
      // radio
      // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      primary: "underline decoration-primary-400 dark:decoration-primary-600",
      secondary: "underline decoration-secondary-400 dark:decoration-secondary-600",
      gray: "underline decoration-gray-400 dark:decoration-gray-600",
      orange: "underline decoration-orange-400 dark:decoration-orange-600",
      red: "underline decoration-red-400 dark:decoration-red-600",
      yellow: "underline decoration-yellow-400 dark:decoration-yellow-600",
      lime: "underline decoration-lime-400 dark:decoration-lime-600",
      green: "underline decoration-green-400 dark:decoration-green-600",
      emerald: "underline decoration-emerald-400 dark:decoration-emerald-600",
      teal: "underline decoration-teal-400 dark:decoration-teal-600",
      cyan: "underline decoration-cyan-400 dark:decoration-cyan-600",
      sky: "underline decoration-sky-400 dark:decoration-sky-600",
      blue: "underline decoration-blue-400 dark:decoration-blue-600",
      indigo: "underline decoration-indigo-400 dark:decoration-indigo-600",
      violet: "underline decoration-violet-400 dark:decoration-violet-600",
      purple: "underline decoration-purple-400 dark:decoration-purple-600",
      fuchsia: "underline decoration-fuchsia-400 dark:decoration-fuchsia-600",
      pink: "underline decoration-pink-400 dark:decoration-pink-600",
      rose: "underline decoration-rose-400 dark:decoration-rose-600",
      none: "decoration-none"
    },
    decorationThickness: {
      "1": "underline decoration-1",
      "2": "underline decoration-2",
      "4": "underline decoration-4",
      "8": "underline decoration-8",
      "0": "decoration-0"
    }
  }
});

// node_modules/flowbite-svelte/dist/theme/index.js
var baseThemes = {
  accordion,
  accordionitem,
  alert,
  avatar,
  badge,
  banner,
  bottomNav,
  bottomNavItem,
  bottomnavheader,
  bottomnavheaderitem,
  breadcrumb,
  buttonGroup,
  button,
  gradientButton,
  card,
  darkmode,
  android,
  defaultMockup,
  desktop,
  ios,
  laptop,
  smartwatch,
  tablet,
  drawer,
  drawerhead,
  dropdown,
  dropdownDivider,
  dropdownItem,
  dropdownGroup,
  dropdownHeader,
  footer,
  footerBrand,
  footerCopyright,
  footerIcon,
  footerLinkGroup,
  footerLink,
  gallery,
  indicator,
  kbd,
  listGroup,
  listGroupItem,
  megamenu,
  modal,
  navbar,
  navbar_ul,
  navbar_brand,
  navbar_li,
  navbar_hamburger,
  paginationItem,
  pagination,
  popover,
  progressbar,
  advancedrating,
  rating,
  review,
  scorerating,
  sidebar,
  sidebarbutton,
  sidebarcta,
  sitebarbrand,
  sidebardropdownwrapper,
  cardPlaceholder,
  imagePlaceholder,
  listPlaceholder,
  skeleton,
  testimonialPlaceholder,
  textPlaceholder,
  videoPlaceholder,
  widgetPlaceholder,
  spinner,
  table,
  tablebodyrow,
  tablehead,
  tablebodycell,
  tableheadcell,
  tabs,
  tabItem,
  activity,
  activityitem,
  group,
  groupitem,
  timeline,
  timelineitem,
  toast,
  toolbar,
  toolbarGroup,
  toolbarButton,
  tooltip,
  checkbox,
  dropzone,
  fileupload,
  floatingLabelInput,
  helper,
  input,
  label,
  radio,
  radiobutton,
  range,
  search,
  select,
  textarea,
  toggle,
  anchor,
  blockquote,
  descriptionList,
  heading,
  hr,
  img,
  layout,
  list,
  mark,
  paragraph,
  secondary,
  span
};

// node_modules/flowbite-svelte/dist/theme/Theme.svelte
var import_deepmerge = __toESM(require_cjs());
Theme[FILENAME] = "node_modules/flowbite-svelte/dist/theme/Theme.svelte";
function Theme($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Theme);
  function mergeThemes(baseThemes2, customTheme) {
    const mergedTheme = (0, import_deepmerge.default)(baseThemes2, {});
    for (const [name, baseTheme] of Object.entries(baseThemes2)) {
      const componentName = name;
      if (customTheme && componentName in customTheme) {
        const customComponentTheme = customTheme[componentName];
        const result = (0, import_deepmerge.default)(
          {
            slots: baseTheme.slots,
            variants: baseTheme.variants,
            compoundVariants: baseTheme.compoundVariants,
            defaultVariants: baseTheme.defaultVariants
          },
          {
            slots: customComponentTheme.slots || {},
            variants: customComponentTheme.variants || {},
            compoundVariants: customComponentTheme.compoundVariants || [],
            defaultVariants: customComponentTheme.defaultVariants || {}
          }
        );
        mergedTheme[componentName] = ce(result);
      }
    }
    return mergedTheme;
  }
  const mergedThemes = mergeThemes(baseThemes, $$props.theme);
  setContext("themeConfig", mergedThemes);
  var fragment = comment();
  var node = first_child(fragment);
  snippet(node, () => $$props.children);
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Theme = hmr(Theme, () => Theme[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Theme[HMR].source;
    set(Theme[HMR].source, module.default[HMR].original);
  });
}
var Theme_default = Theme;
export {
  A_default as A,
  Accordion_default as Accordion,
  AccordionItem_default as AccordionItem,
  Activity_default as Activity,
  ActivityItem_default as ActivityItem,
  AdvancedRating_default as AdvancedRating,
  Alert_default as Alert,
  Android_default as Android,
  Avatar_default as Avatar,
  Badge_default as Badge,
  Banner_default as Banner,
  Blockquote_default as Blockquote,
  BottomNav_default as BottomNav,
  BottomNavHeader_default as BottomNavHeader,
  BottomNavHeaderItem_default as BottomNavHeaderItem,
  BottomNavItem_default as BottomNavItem,
  Breadcrumb_default as Breadcrumb,
  BreadcrumbItem_default as BreadcrumbItem,
  Button_default as Button,
  ButtonGroup_default as ButtonGroup,
  ButtonToggle_default as ButtonToggle,
  ButtonToggleGroup_default as ButtonToggleGroup,
  Card_default as Card,
  CardPlaceholder_default as CardPlaceholder,
  Carousel_default as Carousel,
  Chart_default as Chart,
  CheckIcon_default as CheckIcon,
  Checkbox_default as Checkbox,
  CheckboxButton_default as CheckboxButton,
  CloseButton_default as CloseButton,
  ControlButton_default as ControlButton,
  Controls_default as Controls,
  CustomIcon_default as CustomIcon,
  DarkMode_default as DarkMode,
  Datepicker_default as Datepicker,
  DefaultMockup_default as DefaultMockup,
  DescriptionList_default as DescriptionList,
  Desktop_default as Desktop,
  DeviceMockup_default as DeviceMockup,
  Drawer_default as Drawer,
  Drawerhead_default as Drawerhead,
  Dropdown_default as Dropdown,
  DropdownDivider_default as DropdownDivider,
  DropdownGroup_default as DropdownGroup,
  DropdownHeader_default as DropdownHeader,
  DropdownItem_default as DropdownItem,
  Dropzone_default as Dropzone,
  EnhancedImg_default as EnhancedImg,
  Fileupload_default as Fileupload,
  FloatingLabelInput_default as FloatingLabelInput,
  Footer_default as Footer,
  FooterBrand_default as FooterBrand,
  FooterCopyright_default as FooterCopyright,
  FooterIcon_default as FooterIcon,
  FooterLink_default as FooterLink,
  FooterLinkGroup_default as FooterLinkGroup,
  Gallery_default as Gallery,
  GradientButton_default as GradientButton,
  Group_default as Group,
  GroupItem_default as GroupItem,
  Heading_default as Heading,
  Heart_default as Heart,
  Helper_default as Helper,
  Hr_default as Hr,
  ImagePlaceholder_default as ImagePlaceholder,
  Img_default as Img,
  Indicator_default as Indicator,
  Indicators_default as Indicators,
  Input_default as Input,
  InputAddon_default as InputAddon,
  Ios_default as Ios,
  Kbd_default as Kbd,
  Label_default as Label,
  Laptop_default as Laptop,
  Layout_default as Layout,
  Li_default as Li,
  List_default as List,
  ListPlaceholder_default as ListPlaceholder,
  Listgroup_default as Listgroup,
  ListgroupItem_default as ListgroupItem,
  Mark_default as Mark,
  MegaMenu_default as MegaMenu,
  Modal_default as Modal,
  MultiSelect_default as MultiSelect,
  NavBrand_default as NavBrand,
  NavHamburger_default as NavHamburger,
  NavLi_default as NavLi,
  NavUl_default as NavUl,
  Navbar_default as Navbar,
  P_default as P,
  Pagination_default as Pagination,
  PaginationButton_default as PaginationButton,
  PaginationItem_default as PaginationItem,
  PaginationNav_default as PaginationNav,
  Popover_default as Popover,
  Progressbar_default as Progressbar,
  Progressradial_default as Progressradial,
  Radio_default as Radio,
  RadioButton_default as RadioButton,
  Range_default as Range,
  Rating_default as Rating,
  RatingComment_default as RatingComment,
  Review_default as Review,
  ScoreRating_default as ScoreRating,
  Search_default as Search,
  Secondary_default as Secondary,
  Select_default as Select,
  Sidebar_default as Sidebar,
  SidebarBrand_default as SidebarBrand,
  SidebarButton_default as SidebarButton,
  SidebarCta_default as SidebarCta,
  SidebarItem_default as SidebarDropdownItem,
  SidebarDropdownWrapper_default as SidebarDropdownWrapper,
  SidebarGroup_default as SidebarGroup,
  SidebarItem_default as SidebarItem,
  SidebarWrapper_default as SidebarWrapper,
  Skeleton_default as Skeleton,
  Smartwatch_default as Smartwatch,
  Span_default as Span,
  SpeedDial_default as SpeedDial,
  SpeedDialButton_default as SpeedDialButton,
  SpeedDialTrigger_default as SpeedDialTrigger,
  Spinner_default as Spinner,
  Star_default as Star,
  StepIndicator_default as StepIndicator,
  TabItem_default as TabItem,
  Table_default as Table,
  TableBody_default as TableBody,
  TableBodyCell_default as TableBodyCell,
  TableBodyRow_default as TableBodyRow,
  TableHead_default as TableHead,
  TableHeadCell_default as TableHeadCell,
  TableSearch_default as TableSearch,
  Tablet_default as Tablet,
  Tabs_default as Tabs,
  Tags_default as Tags,
  TestimonialPlaceholder_default as TestimonialPlaceholder,
  TextPlaceholder_default as TextPlaceholder,
  Textarea_default as Textarea,
  Theme_default as Theme,
  Thumbnails_default as Thumbnails,
  Thumbup_default as Thumbup,
  Timeline_default as Timeline,
  TimelineItem_default as TimelineItem,
  Timepicker_default as Timepicker,
  Toast_default as Toast,
  Toggle_default as Toggle,
  Toolbar_default as Toolbar,
  ToolbarButton_default as ToolbarButton,
  ToolbarGroup_default as ToolbarGroup,
  Tooltip_default as Tooltip,
  Video_default as Video,
  VideoPlaceholder_default as VideoPlaceholder,
  WidgetPlaceholder_default as WidgetPlaceholder,
  accordion,
  accordionitem,
  activity,
  activityitem,
  advancedrating,
  alert,
  anchor,
  android,
  avatar,
  badge,
  banner,
  blockquote,
  bottomNav,
  bottomNavItem,
  bottomnavheader,
  bottomnavheaderitem,
  breadcrumb,
  button,
  buttonGroup,
  buttonToggle,
  buttonToggleGroup,
  card,
  cardPlaceholder,
  carousel,
  checkbox,
  checkboxbutton,
  clampSize,
  clickOutside,
  closeButtonVariants,
  cn,
  darkmode,
  datepicker,
  defaultMockup,
  descriptionList,
  desktop,
  drawer,
  drawerhead,
  dropdown,
  dropdownDivider,
  dropdownGroup,
  dropdownHeader,
  dropdownItem,
  dropzone,
  fileupload,
  floatingLabelInput,
  footer,
  footerBrand,
  footerCopyright,
  footerIcon,
  footerLink,
  footerLinkGroup,
  gallery,
  gradientButton,
  group,
  groupitem,
  heading,
  helper,
  hr,
  idGenerator,
  imagePlaceholder,
  img,
  indicator,
  input,
  ios,
  kbd,
  label,
  laptop,
  layout,
  list,
  listGroup,
  listGroupItem,
  listPlaceholder,
  mark,
  megamenu,
  modal,
  navbar,
  navbar_brand,
  navbar_hamburger,
  navbar_li,
  navbar_ul,
  pagination,
  paginationItem,
  paginationbutton,
  paginationnav,
  paragraph,
  popover,
  progressbar,
  radio,
  radiobutton,
  range,
  rating,
  review,
  scorerating,
  search,
  secondary,
  select,
  sidebar,
  sidebarbutton,
  sidebarcta,
  sidebardropdownwrapper,
  sitebarbrand,
  skeleton,
  smartwatch,
  span,
  speed_dial,
  spinner,
  tabItem,
  table,
  tablebodycell,
  tablebodyrow,
  tablehead,
  tableheadcell,
  tablet,
  tabs,
  tags,
  testimonialPlaceholder,
  textPlaceholder,
  textarea,
  timeline,
  timelineitem,
  toast,
  toggle,
  toolbar,
  toolbarButton,
  toolbarGroup,
  tooltip,
  trapFocus,
  uiHelpers,
  videoPlaceholder,
  widgetPlaceholder
};
//# sourceMappingURL=flowbite-svelte.js.map
