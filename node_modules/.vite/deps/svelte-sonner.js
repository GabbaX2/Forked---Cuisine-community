import "./chunk-NZTLVUMK.js";
import "./chunk-MPCSGXTG.js";
import "./chunk-7RQDXF5S.js";
import {
  createSubscriber
} from "./chunk-IHXKLMDG.js";
import {
  STYLE,
  add_locations,
  append_styles,
  bind_this,
  check_target,
  cleanup_styles,
  clsx,
  component,
  each,
  hmr,
  if_block,
  legacy_api,
  onMount,
  prop,
  rest_props,
  set_attribute,
  set_attributes,
  set_class,
  set_style,
  snippet,
  spread_props,
  validate_each_keys,
  validate_snippet_args,
  wrap_snippet
} from "./chunk-VOYJ3SK6.js";
import "./chunk-U7P2NEEE.js";
import {
  append,
  comment,
  from_html,
  from_svg,
  set_text,
  text
} from "./chunk-2ELJ2S42.js";
import {
  FILENAME,
  HMR,
  child,
  delegate,
  effect_root,
  event,
  first_child,
  get,
  getContext,
  hasContext,
  noop,
  on,
  pop,
  proxy,
  push,
  reset,
  set,
  setContext,
  sibling,
  state,
  strict_equals,
  template_effect,
  untrack,
  user_derived,
  user_effect,
  user_pre_effect
} from "./chunk-L47DFKLK.js";
import "./chunk-NXGWPDOQ.js";
import {
  true_default
} from "./chunk-HNWPC2PS.js";
import "./chunk-TZZ7LK5Y.js";
import "./chunk-RIXFT5AQ.js";
import "./chunk-RVAV4ZRS.js";
import {
  __privateAdd,
  __privateGet,
  __privateSet,
  __publicField
} from "./chunk-NNIHVWYK.js";

// node_modules/svelte-sonner/dist/Icon.svelte
Icon[FILENAME] = "node_modules/svelte-sonner/dist/Icon.svelte";
var root_1 = add_locations(from_svg(`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" height="20" width="20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z" clip-rule="evenodd"></path></svg>`), Icon[FILENAME], [[6, 1, [[13, 2]]]]);
var root_3 = add_locations(from_svg(`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" height="20" width="20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path></svg>`), Icon[FILENAME], [[20, 1, [[27, 2]]]]);
var root_5 = add_locations(from_svg(`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" height="20" width="20"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z" clip-rule="evenodd"></path></svg>`), Icon[FILENAME], [[34, 1, [[41, 2]]]]);
var root_7 = add_locations(from_svg(`<svg viewBox="0 0 64 64" fill="currentColor" height="20" width="20" xmlns="http://www.w3.org/2000/svg"><path d="M32.427,7.987c2.183,0.124 4,1.165 5.096,3.281l17.936,36.208c1.739,3.66 -0.954,8.585 -5.373,8.656l-36.119,0c-4.022,-0.064 -7.322,-4.631 -5.352,-8.696l18.271,-36.207c0.342,-0.65 0.498,-0.838 0.793,-1.179c1.186,-1.375 2.483,-2.111 4.748,-2.063Zm-0.295,3.997c-0.687,0.034 -1.316,0.419 -1.659,1.017c-6.312,11.979 -12.397,24.081 -18.301,36.267c-0.546,1.225 0.391,2.797 1.762,2.863c12.06,0.195 24.125,0.195 36.185,0c1.325,-0.064 2.321,-1.584 1.769,-2.85c-5.793,-12.184 -11.765,-24.286 -17.966,-36.267c-0.366,-0.651 -0.903,-1.042 -1.79,-1.03Z"></path><path d="M33.631,40.581l-3.348,0l-0.368,-16.449l4.1,0l-0.384,16.449Zm-3.828,5.03c0,-0.609 0.197,-1.113 0.592,-1.514c0.396,-0.4 0.935,-0.601 1.618,-0.601c0.684,0 1.223,0.201 1.618,0.601c0.395,0.401 0.593,0.905 0.593,1.514c0,0.587 -0.193,1.078 -0.577,1.473c-0.385,0.395 -0.929,0.593 -1.634,0.593c-0.705,0 -1.249,-0.198 -1.634,-0.593c-0.384,-0.395 -0.576,-0.886 -0.576,-1.473Z"></path></svg>`), Icon[FILENAME], [[48, 1, [[55, 2], [58, 2]]]]);
function Icon($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Icon);
  const type = prop($$props, "type", 3, "success");
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var svg = root_1();
      append($$anchor2, svg);
    };
    var alternate = ($$anchor2, $$elseif) => {
      {
        var consequent_1 = ($$anchor3) => {
          var svg_1 = root_3();
          append($$anchor3, svg_1);
        };
        var alternate_1 = ($$anchor3, $$elseif2) => {
          {
            var consequent_2 = ($$anchor4) => {
              var svg_2 = root_5();
              append($$anchor4, svg_2);
            };
            var alternate_2 = ($$anchor4, $$elseif3) => {
              {
                var consequent_3 = ($$anchor5) => {
                  var svg_3 = root_7();
                  append($$anchor5, svg_3);
                };
                var alternate_3 = ($$anchor5) => {
                };
                if_block(
                  $$anchor4,
                  ($$render) => {
                    if (strict_equals(type(), "warning")) $$render(consequent_3);
                    else $$render(alternate_3, false);
                  },
                  $$elseif3
                );
              }
            };
            if_block(
              $$anchor3,
              ($$render) => {
                if (strict_equals(type(), "info")) $$render(consequent_2);
                else $$render(alternate_2, false);
              },
              $$elseif2
            );
          }
        };
        if_block(
          $$anchor2,
          ($$render) => {
            if (strict_equals(type(), "error")) $$render(consequent_1);
            else $$render(alternate_1, false);
          },
          $$elseif
        );
      }
    };
    if_block(node, ($$render) => {
      if (strict_equals(type(), "success")) $$render(consequent);
      else $$render(alternate, false);
    });
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Icon = hmr(Icon, () => Icon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Icon[HMR].source;
    set(Icon[HMR].source, module.default[HMR].original);
  });
}
var Icon_default = Icon;

// node_modules/svelte-sonner/dist/Loader.svelte
Loader[FILENAME] = "node_modules/svelte-sonner/dist/Loader.svelte";
var bars = Array(12).fill(0);
var root_12 = add_locations(from_html(`<div class="sonner-loading-bar"></div>`), Loader[FILENAME], [[15, 3]]);
var root = add_locations(from_html(`<div><div class="sonner-spinner"></div></div>`), Loader[FILENAME], [[9, 0, [[13, 1]]]]);
function Loader($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Loader);
  "use strict";
  var div = root();
  var div_1 = child(div);
  validate_each_keys(() => bars, (_, i) => `spinner-bar-${i}`);
  each(div_1, 23, () => bars, (_, i) => `spinner-bar-${i}`, ($$anchor2, _) => {
    var div_2 = root_12();
    append($$anchor2, div_2);
  });
  reset(div_1);
  reset(div);
  template_effect(
    ($0) => {
      set_class(div, 1, $0);
      set_attribute(div, "data-visible", $$props.visible);
    },
    [
      () => clsx(["sonner-loading-wrapper", $$props.class].filter(Boolean).join(" "))
    ]
  );
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Loader = hmr(Loader, () => Loader[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Loader[HMR].source;
    set(Loader[HMR].source, module.default[HMR].original);
  });
}
var Loader_default = Loader;

// node_modules/svelte-sonner/dist/internal/helpers.js
function cn(...classes) {
  return classes.filter(Boolean).join(" ");
}
var isBrowser = typeof document !== "undefined";

// node_modules/runed/dist/internal/configurable-globals.js
var defaultWindow = true_default && typeof window !== "undefined" ? window : void 0;
var defaultDocument = true_default && typeof window !== "undefined" ? window.document : void 0;
var defaultNavigator = true_default && typeof window !== "undefined" ? window.navigator : void 0;
var defaultLocation = true_default && typeof window !== "undefined" ? window.location : void 0;

// node_modules/runed/dist/internal/utils/dom.js
function getActiveElement(document2) {
  let activeElement2 = document2.activeElement;
  while (activeElement2 == null ? void 0 : activeElement2.shadowRoot) {
    const node = activeElement2.shadowRoot.activeElement;
    if (node === activeElement2)
      break;
    else
      activeElement2 = node;
  }
  return activeElement2;
}

// node_modules/runed/dist/utilities/active-element/active-element.svelte.js
var _document, _subscribe;
var ActiveElement = class {
  constructor(options = {}) {
    __privateAdd(this, _document);
    __privateAdd(this, _subscribe);
    const {
      window: window2 = defaultWindow,
      document: document2 = window2 == null ? void 0 : window2.document
    } = options;
    if (strict_equals(window2, void 0)) return;
    __privateSet(this, _document, document2);
    __privateSet(this, _subscribe, createSubscriber((update) => {
      const cleanupFocusIn = on(window2, "focusin", update);
      const cleanupFocusOut = on(window2, "focusout", update);
      return () => {
        cleanupFocusIn();
        cleanupFocusOut();
      };
    }));
  }
  get current() {
    var _a;
    (_a = __privateGet(this, _subscribe)) == null ? void 0 : _a.call(this);
    if (!__privateGet(this, _document)) return null;
    return getActiveElement(__privateGet(this, _document));
  }
};
_document = new WeakMap();
_subscribe = new WeakMap();
var activeElement = new ActiveElement();

// node_modules/runed/dist/utilities/watch/watch.svelte.js
function runEffect(flush, effect) {
  switch (flush) {
    case "post":
      user_effect(effect);
      break;
    case "pre":
      user_pre_effect(effect);
      break;
  }
}
function runWatcher(sources, flush, effect, options = {}) {
  const { lazy = false } = options;
  let active = !lazy;
  let previousValues = Array.isArray(sources) ? [] : void 0;
  runEffect(flush, () => {
    const values = Array.isArray(sources) ? sources.map((source) => source()) : sources();
    if (!active) {
      active = true;
      previousValues = values;
      return;
    }
    const cleanup = untrack(() => effect(values, previousValues));
    previousValues = values;
    return cleanup;
  });
}
function runWatcherOnce(sources, flush, effect) {
  const cleanupRoot = effect_root(() => {
    let stop = false;
    runWatcher(
      sources,
      flush,
      (values, previousValues) => {
        if (stop) {
          cleanupRoot();
          return;
        }
        const cleanup = effect(values, previousValues);
        stop = true;
        return cleanup;
      },
      // Running the effect immediately just once makes no sense at all.
      // That's just `onMount` with extra steps.
      { lazy: true }
    );
  });
  user_effect(() => {
    return cleanupRoot;
  });
}
function watch(sources, effect, options) {
  runWatcher(sources, "post", effect, options);
}
function watchPre(sources, effect, options) {
  runWatcher(sources, "pre", effect, options);
}
watch.pre = watchPre;
function watchOnce(source, effect) {
  runWatcherOnce(source, "post", effect);
}
function watchOncePre(source, effect) {
  runWatcherOnce(source, "pre", effect);
}
watchOnce.pre = watchOncePre;

// node_modules/runed/dist/utilities/context/context.js
var _name, _key;
var Context = class {
  /**
   * @param name The name of the context.
   * This is used for generating the context key and error messages.
   */
  constructor(name) {
    __privateAdd(this, _name);
    __privateAdd(this, _key);
    __privateSet(this, _name, name);
    __privateSet(this, _key, Symbol(name));
  }
  /**
   * The key used to get and set the context.
   *
   * It is not recommended to use this value directly.
   * Instead, use the methods provided by this class.
   */
  get key() {
    return __privateGet(this, _key);
  }
  /**
   * Checks whether this has been set in the context of a parent component.
   *
   * Must be called during component initialisation.
   */
  exists() {
    return hasContext(__privateGet(this, _key));
  }
  /**
   * Retrieves the context that belongs to the closest parent component.
   *
   * Must be called during component initialisation.
   *
   * @throws An error if the context does not exist.
   */
  get() {
    const context = getContext(__privateGet(this, _key));
    if (context === void 0) {
      throw new Error(`Context "${__privateGet(this, _name)}" not found`);
    }
    return context;
  }
  /**
   * Retrieves the context that belongs to the closest parent component,
   * or the given fallback value if the context does not exist.
   *
   * Must be called during component initialisation.
   */
  getOr(fallback) {
    const context = getContext(__privateGet(this, _key));
    if (context === void 0) {
      return fallback;
    }
    return context;
  }
  /**
   * Associates the given value with the current component and returns it.
   *
   * Must be called during component initialisation.
   */
  set(context) {
    return setContext(__privateGet(this, _key), context);
  }
};
_name = new WeakMap();
_key = new WeakMap();

// node_modules/runed/dist/utilities/resource/resource.svelte.js
function debounce(fn, delay) {
  let timeoutId;
  let lastResolve = null;
  return (...args) => {
    return new Promise((resolve) => {
      if (lastResolve) {
        lastResolve(void 0);
      }
      lastResolve = resolve;
      clearTimeout(timeoutId);
      timeoutId = setTimeout(
        async () => {
          const result = await fn(...args);
          if (lastResolve) {
            lastResolve(result);
            lastResolve = null;
          }
        },
        delay
      );
    });
  };
}
function throttle(fn, delay) {
  let lastRun = 0;
  let lastPromise = null;
  return (...args) => {
    const now = Date.now();
    if (lastRun && now - lastRun < delay) {
      return lastPromise ?? Promise.resolve(void 0);
    }
    lastRun = now;
    lastPromise = fn(...args);
    return lastPromise;
  };
}
function runResource(source, fetcher, options = {}, effectFn) {
  const {
    lazy = false,
    once = false,
    initialValue,
    debounce: debounceTime,
    throttle: throttleTime
  } = options;
  let current = state(proxy(initialValue));
  let loading = state(false);
  let error = state(void 0);
  let cleanupFns = state(proxy([]));
  const runCleanup = () => {
    get(cleanupFns).forEach((fn) => fn());
    set(cleanupFns, [], true);
  };
  const onCleanup = (fn) => {
    set(cleanupFns, [...get(cleanupFns), fn], true);
  };
  const baseFetcher = async (value, previousValue, refetching = false) => {
    try {
      set(loading, true);
      set(error, void 0);
      runCleanup();
      const controller = new AbortController();
      onCleanup(() => controller.abort());
      const result = await fetcher(value, previousValue, {
        data: get(current),
        refetching,
        onCleanup,
        signal: controller.signal
      });
      set(current, result, true);
      return result;
    } catch (e) {
      if (!(e instanceof DOMException && strict_equals(e.name, "AbortError"))) {
        set(error, e, true);
      }
      return void 0;
    } finally {
      set(loading, false);
    }
  };
  const runFetcher = debounceTime ? debounce(baseFetcher, debounceTime) : throttleTime ? throttle(baseFetcher, throttleTime) : baseFetcher;
  const sources = Array.isArray(source) ? source : [source];
  let prevValues;
  effectFn(
    (values, previousValues) => {
      if (once && prevValues) {
        return;
      }
      prevValues = values;
      runFetcher(Array.isArray(source) ? values : values[0], Array.isArray(source) ? previousValues : previousValues == null ? void 0 : previousValues[0]);
    },
    { lazy }
  );
  return {
    get current() {
      return get(current);
    },
    get loading() {
      return get(loading);
    },
    get error() {
      return get(error);
    },
    mutate: (value) => {
      set(current, value, true);
    },
    refetch: (info) => {
      const values = sources.map((s) => s());
      return runFetcher(Array.isArray(source) ? values : values[0], Array.isArray(source) ? values : values[0], info ?? true);
    }
  };
}
function resource(source, fetcher, options) {
  return runResource(source, fetcher, options, (fn, options2) => {
    const sources = Array.isArray(source) ? source : [source];
    const getters = () => sources.map((s) => s());
    watch(
      getters,
      (values, previousValues) => {
        fn(values, previousValues ?? []);
      },
      options2
    );
  });
}
function resourcePre(source, fetcher, options) {
  return runResource(source, fetcher, options, (fn, options2) => {
    const sources = Array.isArray(source) ? source : [source];
    const getter = () => sources.map((s) => s());
    watch.pre(
      getter,
      (values, previousValues) => {
        fn(values, previousValues ?? []);
      },
      options2
    );
  });
}
resource.pre = resourcePre;

// node_modules/svelte-sonner/dist/internal/ctx.js
var richColorsContext = new Context("richColorsContext");
var sonnerContext = new Context("<Toaster/>");

// node_modules/svelte-sonner/dist/toast-state.svelte.js
var toastsCounter = 0;
var _toasts, _heights, _findToastIdx;
var ToastState = class {
  constructor() {
    __privateAdd(this, _toasts, state(proxy([])));
    __privateAdd(this, _heights, state(proxy([])));
    __privateAdd(this, _findToastIdx, (id) => {
      const idx = this.toasts.findIndex((toast2) => strict_equals(toast2.id, id));
      if (strict_equals(idx, -1)) return null;
      return idx;
    });
    __publicField(this, "addToast", (data) => {
      if (!isBrowser) return;
      this.toasts.unshift(data);
    });
    __publicField(this, "updateToast", ({ id, data, type, message }) => {
      const toastIdx = this.toasts.findIndex((toast2) => strict_equals(toast2.id, id));
      const toastToUpdate = this.toasts[toastIdx];
      this.toasts[toastIdx] = {
        ...toastToUpdate,
        ...data,
        id,
        title: message,
        type,
        updated: true
      };
    });
    __publicField(this, "create", (data) => {
      var _a;
      const { message, ...rest } = data;
      const id = strict_equals(typeof (data == null ? void 0 : data.id), "number") || data.id && ((_a = data.id) == null ? void 0 : _a.length) > 0 ? data.id : toastsCounter++;
      const dismissable = strict_equals(data.dismissable, void 0) ? true : data.dismissable;
      const type = strict_equals(data.type, void 0) ? "default" : data.type;
      untrack(() => {
        const alreadyExists = this.toasts.find((toast2) => strict_equals(toast2.id, id));
        if (alreadyExists) {
          this.updateToast({ id, data, type, message, dismissable });
        } else {
          this.addToast({
            ...rest,
            id,
            title: message,
            dismissable,
            type
          });
        }
      });
      return id;
    });
    __publicField(this, "dismiss", (id) => {
      untrack(() => {
        if (strict_equals(id, void 0)) {
          this.toasts = this.toasts.map((toast2) => ({ ...toast2, dismiss: true }));
          return;
        }
        const toastIdx = this.toasts.findIndex((toast2) => strict_equals(toast2.id, id));
        if (this.toasts[toastIdx]) {
          this.toasts[toastIdx] = { ...this.toasts[toastIdx], dismiss: true };
        }
      });
      return id;
    });
    __publicField(this, "remove", (id) => {
      if (strict_equals(id, void 0)) {
        this.toasts = [];
        return;
      }
      const toastIdx = __privateGet(this, _findToastIdx).call(this, id);
      if (strict_equals(toastIdx, null)) return;
      this.toasts.splice(toastIdx, 1);
      return id;
    });
    __publicField(this, "message", (message, data) => {
      return this.create({ ...data, type: "default", message });
    });
    __publicField(this, "error", (message, data) => {
      return this.create({ ...data, type: "error", message });
    });
    __publicField(this, "success", (message, data) => {
      return this.create({ ...data, type: "success", message });
    });
    __publicField(this, "info", (message, data) => {
      return this.create({ ...data, type: "info", message });
    });
    __publicField(this, "warning", (message, data) => {
      return this.create({ ...data, type: "warning", message });
    });
    __publicField(this, "loading", (message, data) => {
      return this.create({ ...data, type: "loading", message });
    });
    __publicField(this, "promise", (promise, data) => {
      if (!data) {
        return;
      }
      let id = void 0;
      if (strict_equals(data.loading, void 0, false)) {
        id = this.create({
          ...data,
          promise,
          type: "loading",
          message: strict_equals(typeof data.loading, "string") ? data.loading : data.loading()
        });
      }
      const p = promise instanceof Promise ? promise : promise();
      let shouldDismiss = strict_equals(id, void 0, false);
      p.then((response) => {
        if (strict_equals(typeof response, "object") && response && "ok" in response && strict_equals(typeof response.ok, "boolean") && !response.ok) {
          shouldDismiss = false;
          const message = constructPromiseErrorMessage(response);
          this.create({ id, type: "error", message });
        } else if (strict_equals(data.success, void 0, false)) {
          shouldDismiss = false;
          const message = strict_equals(typeof data.success, "function") ? data.success(response) : data.success;
          this.create({ id, type: "success", message });
        }
      }).catch((error) => {
        if (strict_equals(data.error, void 0, false)) {
          shouldDismiss = false;
          const message = strict_equals(typeof data.error, "function") ? data.error(error) : data.error;
          this.create({ id, type: "error", message });
        }
      }).finally(() => {
        var _a;
        if (shouldDismiss) {
          this.dismiss(id);
          id = void 0;
        }
        (_a = data.finally) == null ? void 0 : _a.call(data);
      });
      return id;
    });
    __publicField(this, "custom", (component2, data) => {
      const id = (data == null ? void 0 : data.id) || toastsCounter++;
      this.create({ component: component2, id, ...data });
      return id;
    });
    __publicField(this, "removeHeight", (id) => {
      this.heights = this.heights.filter((height) => strict_equals(height.toastId, id, false));
    });
    __publicField(this, "setHeight", (data) => {
      const toastIdx = __privateGet(this, _findToastIdx).call(this, data.toastId);
      if (strict_equals(toastIdx, null)) {
        this.heights.push(data);
        return;
      }
      this.heights[toastIdx] = data;
    });
    __publicField(this, "reset", () => {
      this.toasts = [];
      this.heights = [];
    });
  }
  get toasts() {
    return get(__privateGet(this, _toasts));
  }
  set toasts(value) {
    set(__privateGet(this, _toasts), value, true);
  }
  get heights() {
    return get(__privateGet(this, _heights));
  }
  set heights(value) {
    set(__privateGet(this, _heights), value, true);
  }
};
_toasts = new WeakMap();
_heights = new WeakMap();
_findToastIdx = new WeakMap();
function constructPromiseErrorMessage(response) {
  if (response && strict_equals(typeof response, "object") && "status" in response) {
    return `HTTP error! Status: ${response.status}`;
  }
  return `Error! ${response}`;
}
var toastState = new ToastState();
function toastFunction(message, data) {
  return toastState.create({ message, ...data });
}
var _activeToasts;
var SonnerState = class {
  constructor() {
    /**
     * A derived state of the toasts that are not dismissed.
     */
    __privateAdd(this, _activeToasts, user_derived(() => toastState.toasts.filter((toast2) => !toast2.dismiss)));
  }
  get toasts() {
    return get(__privateGet(this, _activeToasts));
  }
};
_activeToasts = new WeakMap();
function useSonner() {
  return sonnerContext.get();
}
var basicToast = toastFunction;
var toast = Object.assign(basicToast, {
  success: toastState.success,
  info: toastState.info,
  warning: toastState.warning,
  error: toastState.error,
  custom: toastState.custom,
  message: toastState.message,
  promise: toastState.promise,
  dismiss: toastState.dismiss,
  loading: toastState.loading,
  getActiveToasts: () => {
    return toastState.toasts.filter((toast2) => !toast2.dismiss);
  }
});

// node_modules/svelte-sonner/dist/types.js
function isAction(action) {
  return action.label !== void 0;
}

// node_modules/svelte-sonner/dist/internal/use-document-hidden.svelte.js
function useDocumentHidden() {
  let current = state(proxy(strict_equals(typeof document, "undefined", false) ? document.hidden : false));
  user_effect(() => {
    return on(document, "visibilitychange", () => {
      set(current, document.hidden, true);
    });
  });
  return {
    get current() {
      return get(current);
    }
  };
}

// node_modules/svelte-sonner/dist/Toast.svelte
Toast[FILENAME] = "node_modules/svelte-sonner/dist/Toast.svelte";
var TOAST_LIFETIME = 4e3;
var GAP = 14;
var SWIPE_THRESHOLD = 45;
var TIME_BEFORE_UNMOUNT = 200;
var SCALE_MULTIPLIER = 0.05;
var DEFAULT_TOAST_CLASSES = {
  toast: "",
  title: "",
  description: "",
  loader: "",
  closeButton: "",
  cancelButton: "",
  actionButton: "",
  action: "",
  warning: "",
  error: "",
  success: "",
  default: "",
  info: "",
  loading: ""
};
function getDefaultSwipeDirections(position) {
  const [y, x] = position.split("-");
  const directions = [];
  if (y) {
    directions.push(y);
  }
  if (x) {
    directions.push(x);
  }
  return directions;
}
function getDampening(delta) {
  const factor = Math.abs(delta) / 20;
  return 1 / (1.5 + factor);
}
var root_2 = add_locations(from_html(`<div><!></div>`), Toast[FILENAME], [[323, 2]]);
var on_click = (_, disabled, dismissable, deleteToast, $$props) => {
  var _a, _b;
  if (get(disabled) || !get(dismissable)) return;
  deleteToast();
  (_b = (_a = $$props.toast).onDismiss) == null ? void 0 : _b.call(_a, $$props.toast);
};
var root_4 = add_locations(from_html(`<button data-close-button=""><!></button>`), Toast[FILENAME], [[380, 2]]);
var root_72 = add_locations(from_html(`<div data-icon=""><!> <!></div>`), Toast[FILENAME], [[400, 3]]);
var root_24 = add_locations(from_html(`<div data-description=""><!></div>`), Toast[FILENAME], [[438, 4]]);
var on_click_1 = (event2, $$props, dismissable, deleteToast) => {
  var _a, _b;
  if (!isAction($$props.toast.cancel)) return;
  if (!get(dismissable)) return;
  (_b = (_a = $$props.toast.cancel) == null ? void 0 : _a.onClick) == null ? void 0 : _b.call(_a, event2);
  deleteToast();
};
var root_30 = add_locations(from_html(`<button data-button="" data-cancel=""> </button>`), Toast[FILENAME], [[460, 4]]);
var on_click_2 = (event2, $$props, deleteToast) => {
  var _a;
  if (!isAction($$props.toast.action)) return;
  (_a = $$props.toast.action) == null ? void 0 : _a.onClick(event2);
  if (event2.defaultPrevented) return;
  deleteToast();
};
var root_34 = add_locations(from_html(`<button data-button=""> </button>`), Toast[FILENAME], [[483, 4]]);
var root_6 = add_locations(from_html(`<!> <div data-content=""><div data-title=""><!></div> <!></div> <!> <!>`, 1), Toast[FILENAME], [[423, 2, [[424, 3]]]]);
var root2 = add_locations(from_html(`<li data-sonner-toast=""><!> <!></li>`), Toast[FILENAME], [[338, 0]]);
function Toast($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Toast);
  const LoadingIcon = wrap_snippet(Toast, function($$anchor2) {
    validate_snippet_args(...arguments);
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor3) => {
        var div = root_2();
        var node_1 = child(div);
        snippet(node_1, () => $$props.loadingIcon);
        reset(div);
        template_effect(
          ($0) => {
            set_class(div, 1, $0);
            set_attribute(div, "data-visible", strict_equals(get(toastType), "loading"));
          },
          [
            () => {
              var _a, _b, _c;
              return clsx(cn((_a = get(classes)) == null ? void 0 : _a.loader, (_c = (_b = $$props.toast) == null ? void 0 : _b.classes) == null ? void 0 : _c.loader, "sonner-loader"));
            }
          ]
        );
        append($$anchor3, div);
      };
      var alternate = ($$anchor3) => {
        var fragment_1 = comment();
        var node_2 = first_child(fragment_1);
        const expression = user_derived(() => {
          var _a, _b;
          return cn((_a = get(classes)) == null ? void 0 : _a.loader, (_b = $$props.toast.classes) == null ? void 0 : _b.loader);
        });
        const expression_1 = user_derived(() => strict_equals(get(toastType), "loading"));
        Loader_default(node_2, {
          get class() {
            return get(expression);
          },
          get visible() {
            return get(expression_1);
          }
        });
        append($$anchor3, fragment_1);
      };
      if_block(node, ($$render) => {
        if ($$props.loadingIcon) $$render(consequent);
        else $$render(alternate, false);
      });
    }
    append($$anchor2, fragment);
  });
  let cancelButtonStyle = prop($$props, "cancelButtonStyle", 3, ""), actionButtonStyle = prop($$props, "actionButtonStyle", 3, ""), descriptionClass = prop($$props, "descriptionClass", 3, ""), unstyled = prop($$props, "unstyled", 3, false), defaultRichColors = prop($$props, "defaultRichColors", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "toast",
      "index",
      "expanded",
      "invert",
      "position",
      "visibleToasts",
      "expandByDefault",
      "closeButton",
      "interacting",
      "cancelButtonStyle",
      "actionButtonStyle",
      "duration",
      "descriptionClass",
      "classes",
      "unstyled",
      "loadingIcon",
      "successIcon",
      "errorIcon",
      "warningIcon",
      "closeIcon",
      "infoIcon",
      "defaultRichColors",
      "swipeDirections",
      "closeButtonAriaLabel"
    ],
    "restProps"
  );
  const defaultClasses = { ...DEFAULT_TOAST_CLASSES };
  let mounted = state(false);
  let removed = state(false);
  let swiping = state(false);
  let swipeOut = state(false);
  let isSwiped = state(false);
  let offsetBeforeRemove = state(0);
  let initialHeight = state(0);
  let remainingTime = $$props.toast.duration || $$props.duration || TOAST_LIFETIME;
  let dragStartTime = null;
  let toastRef = state(void 0);
  let swipeDirection = state(null);
  let swipeOutDirection = state(null);
  const isFront = user_derived(() => strict_equals($$props.index, 0));
  const isVisible = user_derived(() => $$props.index + 1 <= $$props.visibleToasts);
  const toastType = user_derived(() => $$props.toast.type);
  const dismissable = user_derived(() => strict_equals($$props.toast.dismissable, false, false));
  const toastClass = user_derived(() => $$props.toast.class || "");
  const toastDescriptionClass = user_derived(() => $$props.toast.descriptionClass || "");
  const heightIndex = user_derived(() => toastState.heights.findIndex((height) => strict_equals(height.toastId, $$props.toast.id)) || 0);
  const closeButton = user_derived(() => $$props.toast.closeButton ?? $$props.closeButton);
  const duration = user_derived(() => $$props.toast.duration ?? $$props.duration ?? TOAST_LIFETIME);
  let pointerStart = null;
  const coords = user_derived(() => $$props.position.split("-"));
  const toastsHeightBefore = user_derived(() => toastState.heights.reduce(
    (prev, curr, reducerIndex) => {
      if (reducerIndex >= get(heightIndex)) return prev;
      return prev + curr.height;
    },
    0
  ));
  const isDocumentHidden = useDocumentHidden();
  const invert = user_derived(() => $$props.toast.invert || $$props.invert);
  const disabled = user_derived(() => strict_equals(get(toastType), "loading"));
  const classes = user_derived(() => ({ ...defaultClasses, ...$$props.classes }));
  const toastTitle = user_derived(() => $$props.toast.title);
  const toastDescription = user_derived(() => $$props.toast.description);
  let closeTimerStartTime = state(0);
  let lastCloseTimerStartTime = state(0);
  const offset = user_derived(() => Math.round(get(heightIndex) * GAP + get(toastsHeightBefore)));
  user_effect(() => {
    get(toastTitle);
    get(toastDescription);
    let scale;
    if ($$props.expanded || $$props.expandByDefault) {
      scale = 1;
    } else {
      scale = 1 - $$props.index * SCALE_MULTIPLIER;
    }
    const toastEl = untrack(() => get(toastRef));
    if (strict_equals(toastEl, void 0)) return;
    toastEl.style.setProperty("height", "auto");
    const offsetHeight = toastEl.offsetHeight;
    const rectHeight = toastEl.getBoundingClientRect().height;
    const scaledRectHeight = Math.round(rectHeight / scale + Number.EPSILON & 100) / 100;
    toastEl.style.removeProperty("height");
    let finalHeight;
    if (Math.abs(scaledRectHeight - offsetHeight) < 1) {
      finalHeight = scaledRectHeight;
    } else {
      finalHeight = offsetHeight;
    }
    set(initialHeight, finalHeight, true);
    untrack(() => {
      toastState.setHeight({
        toastId: $$props.toast.id,
        height: finalHeight
      });
    });
  });
  function deleteToast() {
    set(removed, true);
    set(offsetBeforeRemove, get(offset), true);
    toastState.removeHeight($$props.toast.id);
    setTimeout(
      () => {
        toastState.remove($$props.toast.id);
      },
      TIME_BEFORE_UNMOUNT
    );
  }
  let timeoutId;
  const isPromiseLoadingOrInfiniteDuration = user_derived(() => $$props.toast.promise && strict_equals(get(toastType), "loading") || strict_equals($$props.toast.duration, Number.POSITIVE_INFINITY));
  function startTimer() {
    set(closeTimerStartTime, (/* @__PURE__ */ new Date()).getTime(), true);
    timeoutId = setTimeout(
      () => {
        var _a, _b;
        (_b = (_a = $$props.toast).onAutoClose) == null ? void 0 : _b.call(_a, $$props.toast);
        deleteToast();
      },
      remainingTime
    );
  }
  function pauseTimer() {
    if (get(lastCloseTimerStartTime) < get(closeTimerStartTime)) {
      const elapsedTime = (/* @__PURE__ */ new Date()).getTime() - get(closeTimerStartTime);
      remainingTime = remainingTime - elapsedTime;
    }
    set(lastCloseTimerStartTime, (/* @__PURE__ */ new Date()).getTime(), true);
  }
  user_effect(() => {
    if ($$props.toast.updated) {
      clearTimeout(timeoutId);
      remainingTime = get(duration);
      startTimer();
    }
  });
  user_effect(() => {
    if (!get(isPromiseLoadingOrInfiniteDuration)) {
      if ($$props.expanded || $$props.interacting || isDocumentHidden.current) {
        pauseTimer();
      } else {
        startTimer();
      }
    }
    return () => clearTimeout(timeoutId);
  });
  onMount(() => {
    var _a;
    set(mounted, true);
    const height = (_a = get(toastRef)) == null ? void 0 : _a.getBoundingClientRect().height;
    set(initialHeight, height, true);
    toastState.setHeight({ toastId: $$props.toast.id, height });
    return () => {
      toastState.removeHeight($$props.toast.id);
    };
  });
  user_effect(() => {
    if ($$props.toast.delete) {
      untrack(() => {
        deleteToast();
      });
    }
  });
  const handlePointerDown = (event2) => {
    if (get(disabled)) return;
    set(offsetBeforeRemove, get(offset), true);
    const target = event2.target;
    target.setPointerCapture(event2.pointerId);
    if (strict_equals(target.tagName, "BUTTON")) return;
    set(swiping, true);
    pointerStart = { x: event2.clientX, y: event2.clientY };
  };
  const handlePointerUp = () => {
    var _a, _b, _c, _d, _e, _f;
    if (get(swipeOut) || !get(dismissable)) return;
    pointerStart = null;
    const swipeAmountX = Number(((_a = get(toastRef)) == null ? void 0 : _a.style.getPropertyValue("--swipe-amount-x").replace("px", "")) || 0);
    const swipeAmountY = Number(((_b = get(toastRef)) == null ? void 0 : _b.style.getPropertyValue("--swipe-amount-y").replace("px", "")) || 0);
    const timeTaken = (/* @__PURE__ */ new Date()).getTime() - ((dragStartTime == null ? void 0 : dragStartTime.getTime()) ?? 0);
    const swipeAmount = strict_equals(get(swipeDirection), "x") ? swipeAmountX : swipeAmountY;
    const velocity = Math.abs(swipeAmount) / timeTaken;
    if (Math.abs(swipeAmount) >= SWIPE_THRESHOLD || velocity > 0.11) {
      set(offsetBeforeRemove, get(offset), true);
      (_d = (_c = $$props.toast).onDismiss) == null ? void 0 : _d.call(_c, $$props.toast);
      if (strict_equals(get(swipeDirection), "x")) {
        set(swipeOutDirection, swipeAmountX > 0 ? "right" : "left", true);
      } else {
        set(swipeOutDirection, swipeAmountY > 0 ? "down" : "up", true);
      }
      deleteToast();
      set(swipeOut, true);
      return;
    } else {
      (_e = get(toastRef)) == null ? void 0 : _e.style.setProperty("--swipe-amount-x", "0px");
      (_f = get(toastRef)) == null ? void 0 : _f.style.setProperty("--swipe-amount-y", "0px");
    }
    set(isSwiped, false);
    set(swiping, false);
    set(swipeDirection, null);
  };
  const handlePointerMove = (event2) => {
    var _a, _b, _c;
    if (!pointerStart || !get(dismissable)) return;
    const isHighlighted = (((_a = window.getSelection()) == null ? void 0 : _a.toString().length) ?? -1) > 0;
    if (isHighlighted) return;
    const yDelta = event2.clientY - pointerStart.y;
    const xDelta = event2.clientX - pointerStart.x;
    const swipeDirections = $$props.swipeDirections ?? getDefaultSwipeDirections($$props.position);
    if (!get(swipeDirection) && (Math.abs(xDelta) > 1 || Math.abs(yDelta) > 1)) {
      set(swipeDirection, Math.abs(xDelta) > Math.abs(yDelta) ? "x" : "y", true);
    }
    let swipeAmount = { x: 0, y: 0 };
    if (strict_equals(get(swipeDirection), "y")) {
      if (swipeDirections.includes("top") || swipeDirections.includes("bottom")) {
        if (swipeDirections.includes("top") && yDelta < 0 || swipeDirections.includes("bottom") && yDelta > 0) {
          swipeAmount.y = yDelta;
        } else {
          const dampenedDelta = yDelta * getDampening(yDelta);
          swipeAmount.y = Math.abs(dampenedDelta) < Math.abs(yDelta) ? dampenedDelta : yDelta;
        }
      }
    } else if (strict_equals(get(swipeDirection), "x")) {
      if (swipeDirections.includes("left") || swipeDirections.includes("right")) {
        if (swipeDirections.includes("left") && xDelta < 0 || swipeDirections.includes("right") && xDelta > 0) {
          swipeAmount.x = xDelta;
        } else {
          const dampenedDelta = xDelta * getDampening(xDelta);
          swipeAmount.x = Math.abs(dampenedDelta) < Math.abs(xDelta) ? dampenedDelta : xDelta;
        }
      }
    }
    if (Math.abs(swipeAmount.x) > 0 || Math.abs(swipeAmount.y) > 0) {
      set(isSwiped, true);
    }
    (_b = get(toastRef)) == null ? void 0 : _b.style.setProperty("--swipe-amount-x", `${swipeAmount.x}px`);
    (_c = get(toastRef)) == null ? void 0 : _c.style.setProperty("--swipe-amount-y", `${swipeAmount.y}px`);
  };
  const handleDragEnd = () => {
    set(swiping, false);
    set(swipeDirection, null);
    pointerStart = null;
  };
  const icon = user_derived(() => {
    if ($$props.toast.icon) return $$props.toast.icon;
    if (strict_equals(get(toastType), "success")) return $$props.successIcon;
    if (strict_equals(get(toastType), "error")) return $$props.errorIcon;
    if (strict_equals(get(toastType), "warning")) return $$props.warningIcon;
    if (strict_equals(get(toastType), "info")) return $$props.infoIcon;
    if (strict_equals(get(toastType), "loading")) return $$props.loadingIcon;
    return null;
  });
  var li = root2();
  set_attribute(li, "tabindex", 0);
  let styles;
  li.__pointermove = handlePointerMove;
  li.__pointerup = handlePointerUp;
  li.__pointerdown = handlePointerDown;
  var node_3 = child(li);
  {
    var consequent_1 = ($$anchor2) => {
      var button = root_4();
      button.__click = [
        on_click,
        disabled,
        dismissable,
        deleteToast,
        $$props
      ];
      var node_4 = child(button);
      snippet(node_4, () => $$props.closeIcon ?? noop);
      reset(button);
      template_effect(
        ($0) => {
          set_attribute(button, "aria-label", $$props.closeButtonAriaLabel);
          set_attribute(button, "data-disabled", get(disabled));
          set_class(button, 1, $0);
        },
        [
          () => {
            var _a, _b, _c;
            return clsx(cn((_a = get(classes)) == null ? void 0 : _a.closeButton, (_c = (_b = $$props.toast) == null ? void 0 : _b.classes) == null ? void 0 : _c.closeButton));
          }
        ]
      );
      append($$anchor2, button);
    };
    if_block(node_3, ($$render) => {
      if (get(closeButton) && !$$props.toast.component && strict_equals(get(toastType), "loading", false) && strict_equals($$props.closeIcon, null, false)) $$render(consequent_1);
    });
  }
  var node_5 = sibling(node_3, 2);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment_2 = comment();
      const Component = user_derived(() => $$props.toast.component);
      get(Component);
      var node_6 = first_child(fragment_2);
      component(node_6, () => get(Component), ($$anchor3, $$component) => {
        $$component($$anchor3, spread_props(() => $$props.toast.componentProps, { closeToast: deleteToast }));
      });
      append($$anchor2, fragment_2);
    };
    var alternate_1 = ($$anchor2) => {
      var fragment_3 = root_6();
      var node_7 = first_child(fragment_3);
      {
        var consequent_11 = ($$anchor3) => {
          var div_1 = root_72();
          var node_8 = child(div_1);
          {
            var consequent_4 = ($$anchor4) => {
              var fragment_4 = comment();
              var node_9 = first_child(fragment_4);
              {
                var consequent_3 = ($$anchor5) => {
                  var fragment_5 = comment();
                  var node_10 = first_child(fragment_5);
                  component(node_10, () => $$props.toast.icon, ($$anchor6, $$component) => {
                    $$component($$anchor6, {});
                  });
                  append($$anchor5, fragment_5);
                };
                var alternate_2 = ($$anchor5) => {
                  LoadingIcon($$anchor5);
                };
                if_block(node_9, ($$render) => {
                  if ($$props.toast.icon) $$render(consequent_3);
                  else $$render(alternate_2, false);
                });
              }
              append($$anchor4, fragment_4);
            };
            if_block(node_8, ($$render) => {
              if ($$props.toast.promise || strict_equals(get(toastType), "loading")) $$render(consequent_4);
            });
          }
          var node_11 = sibling(node_8, 2);
          {
            var consequent_10 = ($$anchor4) => {
              var fragment_7 = comment();
              var node_12 = first_child(fragment_7);
              {
                var consequent_5 = ($$anchor5) => {
                  var fragment_8 = comment();
                  var node_13 = first_child(fragment_8);
                  component(node_13, () => $$props.toast.icon, ($$anchor6, $$component) => {
                    $$component($$anchor6, {});
                  });
                  append($$anchor5, fragment_8);
                };
                var alternate_3 = ($$anchor5, $$elseif) => {
                  {
                    var consequent_6 = ($$anchor6) => {
                      var fragment_9 = comment();
                      var node_14 = first_child(fragment_9);
                      snippet(node_14, () => $$props.successIcon ?? noop);
                      append($$anchor6, fragment_9);
                    };
                    var alternate_4 = ($$anchor6, $$elseif2) => {
                      {
                        var consequent_7 = ($$anchor7) => {
                          var fragment_10 = comment();
                          var node_15 = first_child(fragment_10);
                          snippet(node_15, () => $$props.errorIcon ?? noop);
                          append($$anchor7, fragment_10);
                        };
                        var alternate_5 = ($$anchor7, $$elseif3) => {
                          {
                            var consequent_8 = ($$anchor8) => {
                              var fragment_11 = comment();
                              var node_16 = first_child(fragment_11);
                              snippet(node_16, () => $$props.warningIcon ?? noop);
                              append($$anchor8, fragment_11);
                            };
                            var alternate_6 = ($$anchor8, $$elseif4) => {
                              {
                                var consequent_9 = ($$anchor9) => {
                                  var fragment_12 = comment();
                                  var node_17 = first_child(fragment_12);
                                  snippet(node_17, () => $$props.infoIcon ?? noop);
                                  append($$anchor9, fragment_12);
                                };
                                if_block(
                                  $$anchor8,
                                  ($$render) => {
                                    if (strict_equals(get(toastType), "info")) $$render(consequent_9);
                                  },
                                  $$elseif4
                                );
                              }
                            };
                            if_block(
                              $$anchor7,
                              ($$render) => {
                                if (strict_equals(get(toastType), "warning")) $$render(consequent_8);
                                else $$render(alternate_6, false);
                              },
                              $$elseif3
                            );
                          }
                        };
                        if_block(
                          $$anchor6,
                          ($$render) => {
                            if (strict_equals(get(toastType), "error")) $$render(consequent_7);
                            else $$render(alternate_5, false);
                          },
                          $$elseif2
                        );
                      }
                    };
                    if_block(
                      $$anchor5,
                      ($$render) => {
                        if (strict_equals(get(toastType), "success")) $$render(consequent_6);
                        else $$render(alternate_4, false);
                      },
                      $$elseif
                    );
                  }
                };
                if_block(node_12, ($$render) => {
                  if ($$props.toast.icon) $$render(consequent_5);
                  else $$render(alternate_3, false);
                });
              }
              append($$anchor4, fragment_7);
            };
            if_block(node_11, ($$render) => {
              if (strict_equals($$props.toast.type, "loading", false)) $$render(consequent_10);
            });
          }
          reset(div_1);
          template_effect(($0) => set_class(div_1, 1, $0), [
            () => {
              var _a, _b, _c;
              return clsx(cn((_a = get(classes)) == null ? void 0 : _a.icon, (_c = (_b = $$props.toast) == null ? void 0 : _b.classes) == null ? void 0 : _c.icon));
            }
          ]);
          append($$anchor3, div_1);
        };
        if_block(node_7, ($$render) => {
          if ((get(toastType) || $$props.toast.icon || $$props.toast.promise) && strict_equals($$props.toast.icon, null, false) && (strict_equals(get(icon), null, false) || $$props.toast.icon)) $$render(consequent_11);
        });
      }
      var div_2 = sibling(node_7, 2);
      var div_3 = child(div_2);
      var node_18 = child(div_3);
      {
        var consequent_13 = ($$anchor3) => {
          var fragment_13 = comment();
          var node_19 = first_child(fragment_13);
          {
            var consequent_12 = ($$anchor4) => {
              var fragment_14 = comment();
              const Title = user_derived(() => $$props.toast.title);
              get(Title);
              var node_20 = first_child(fragment_14);
              component(node_20, () => get(Title), ($$anchor5, $$component) => {
                $$component($$anchor5, spread_props(() => $$props.toast.componentProps));
              });
              append($$anchor4, fragment_14);
            };
            var alternate_7 = ($$anchor4) => {
              var text2 = text();
              template_effect(() => set_text(text2, $$props.toast.title));
              append($$anchor4, text2);
            };
            if_block(node_19, ($$render) => {
              if (strict_equals(typeof $$props.toast.title, "string", false)) $$render(consequent_12);
              else $$render(alternate_7, false);
            });
          }
          append($$anchor3, fragment_13);
        };
        if_block(node_18, ($$render) => {
          if ($$props.toast.title) $$render(consequent_13);
        });
      }
      reset(div_3);
      var node_21 = sibling(div_3, 2);
      {
        var consequent_15 = ($$anchor3) => {
          var div_4 = root_24();
          var node_22 = child(div_4);
          {
            var consequent_14 = ($$anchor4) => {
              var fragment_16 = comment();
              const Description = user_derived(() => $$props.toast.description);
              get(Description);
              var node_23 = first_child(fragment_16);
              component(node_23, () => get(Description), ($$anchor5, $$component) => {
                $$component($$anchor5, spread_props(() => $$props.toast.componentProps));
              });
              append($$anchor4, fragment_16);
            };
            var alternate_8 = ($$anchor4) => {
              var text_1 = text();
              template_effect(() => set_text(text_1, $$props.toast.description));
              append($$anchor4, text_1);
            };
            if_block(node_22, ($$render) => {
              if (strict_equals(typeof $$props.toast.description, "string", false)) $$render(consequent_14);
              else $$render(alternate_8, false);
            });
          }
          reset(div_4);
          template_effect(($0) => set_class(div_4, 1, $0), [
            () => {
              var _a, _b;
              return clsx(cn(descriptionClass(), get(toastDescriptionClass), (_a = get(classes)) == null ? void 0 : _a.description, (_b = $$props.toast.classes) == null ? void 0 : _b.description));
            }
          ]);
          append($$anchor3, div_4);
        };
        if_block(node_21, ($$render) => {
          if ($$props.toast.description) $$render(consequent_15);
        });
      }
      reset(div_2);
      var node_24 = sibling(div_2, 2);
      {
        var consequent_18 = ($$anchor3) => {
          var fragment_18 = comment();
          var node_25 = first_child(fragment_18);
          {
            var consequent_16 = ($$anchor4) => {
              var fragment_19 = comment();
              var node_26 = first_child(fragment_19);
              component(node_26, () => $$props.toast.cancel, ($$anchor5, $$component) => {
                $$component($$anchor5, {});
              });
              append($$anchor4, fragment_19);
            };
            var alternate_9 = ($$anchor4, $$elseif) => {
              {
                var consequent_17 = ($$anchor5) => {
                  var button_1 = root_30();
                  button_1.__click = [
                    on_click_1,
                    $$props,
                    dismissable,
                    deleteToast
                  ];
                  var text_2 = child(button_1, true);
                  reset(button_1);
                  template_effect(
                    ($0) => {
                      set_style(button_1, $$props.toast.cancelButtonStyle ?? cancelButtonStyle());
                      set_class(button_1, 1, $0);
                      set_text(text_2, $$props.toast.cancel.label);
                    },
                    [
                      () => {
                        var _a, _b, _c;
                        return clsx(cn((_a = get(classes)) == null ? void 0 : _a.cancelButton, (_c = (_b = $$props.toast) == null ? void 0 : _b.classes) == null ? void 0 : _c.cancelButton));
                      }
                    ]
                  );
                  append($$anchor5, button_1);
                };
                if_block(
                  $$anchor4,
                  ($$render) => {
                    if (isAction($$props.toast.cancel)) $$render(consequent_17);
                  },
                  $$elseif
                );
              }
            };
            if_block(node_25, ($$render) => {
              if (strict_equals(typeof $$props.toast.cancel, "function")) $$render(consequent_16);
              else $$render(alternate_9, false);
            });
          }
          append($$anchor3, fragment_18);
        };
        if_block(node_24, ($$render) => {
          if ($$props.toast.cancel) $$render(consequent_18);
        });
      }
      var node_27 = sibling(node_24, 2);
      {
        var consequent_21 = ($$anchor3) => {
          var fragment_20 = comment();
          var node_28 = first_child(fragment_20);
          {
            var consequent_19 = ($$anchor4) => {
              var fragment_21 = comment();
              var node_29 = first_child(fragment_21);
              component(node_29, () => $$props.toast.action, ($$anchor5, $$component) => {
                $$component($$anchor5, {});
              });
              append($$anchor4, fragment_21);
            };
            var alternate_10 = ($$anchor4, $$elseif) => {
              {
                var consequent_20 = ($$anchor5) => {
                  var button_2 = root_34();
                  button_2.__click = [on_click_2, $$props, deleteToast];
                  var text_3 = child(button_2, true);
                  reset(button_2);
                  template_effect(
                    ($0) => {
                      set_style(button_2, $$props.toast.actionButtonStyle ?? actionButtonStyle());
                      set_class(button_2, 1, $0);
                      set_text(text_3, $$props.toast.action.label);
                    },
                    [
                      () => {
                        var _a, _b, _c;
                        return clsx(cn((_a = get(classes)) == null ? void 0 : _a.actionButton, (_c = (_b = $$props.toast) == null ? void 0 : _b.classes) == null ? void 0 : _c.actionButton));
                      }
                    ]
                  );
                  append($$anchor5, button_2);
                };
                if_block(
                  $$anchor4,
                  ($$render) => {
                    if (isAction($$props.toast.action)) $$render(consequent_20);
                  },
                  $$elseif
                );
              }
            };
            if_block(node_28, ($$render) => {
              if (strict_equals(typeof $$props.toast.action, "function")) $$render(consequent_19);
              else $$render(alternate_10, false);
            });
          }
          append($$anchor3, fragment_20);
        };
        if_block(node_27, ($$render) => {
          if ($$props.toast.action) $$render(consequent_21);
        });
      }
      template_effect(($0) => set_class(div_3, 1, $0), [
        () => {
          var _a, _b, _c;
          return clsx(cn((_a = get(classes)) == null ? void 0 : _a.title, (_c = (_b = $$props.toast) == null ? void 0 : _b.classes) == null ? void 0 : _c.title));
        }
      ]);
      append($$anchor2, fragment_3);
    };
    if_block(node_5, ($$render) => {
      if ($$props.toast.component) $$render(consequent_2);
      else $$render(alternate_1, false);
    });
  }
  reset(li);
  bind_this(li, ($$value) => set(toastRef, $$value), () => get(toastRef));
  template_effect(
    ($0, $1, $2) => {
      set_class(li, 1, $0);
      set_attribute(li, "data-rich-colors", $$props.toast.richColors ?? defaultRichColors());
      set_attribute(li, "data-styled", !($$props.toast.component || $$props.toast.unstyled || unstyled()));
      set_attribute(li, "data-mounted", get(mounted));
      set_attribute(li, "data-promise", $1);
      set_attribute(li, "data-swiped", get(isSwiped));
      set_attribute(li, "data-removed", get(removed));
      set_attribute(li, "data-visible", get(isVisible));
      set_attribute(li, "data-y-position", get(coords)[0]);
      set_attribute(li, "data-x-position", get(coords)[1]);
      set_attribute(li, "data-index", $$props.index);
      set_attribute(li, "data-front", get(isFront));
      set_attribute(li, "data-swiping", get(swiping));
      set_attribute(li, "data-dismissable", get(dismissable));
      set_attribute(li, "data-type", get(toastType));
      set_attribute(li, "data-invert", get(invert));
      set_attribute(li, "data-swipe-out", get(swipeOut));
      set_attribute(li, "data-swipe-direction", get(swipeOutDirection));
      set_attribute(li, "data-expanded", $2);
      styles = set_style(li, `${$$props.style} ${$$props.toast.style}`, styles, {
        "--index": $$props.index,
        "--toasts-before": $$props.index,
        "--z-index": toastState.toasts.length - $$props.index,
        "--offset": `${get(removed) ? get(offsetBeforeRemove) : get(offset)}px`,
        "--initial-height": $$props.expandByDefault ? "auto" : `${get(initialHeight)}px`
      });
    },
    [
      () => {
        var _a, _b, _c, _d, _e, _f;
        return clsx(cn($$props.class, get(toastClass), (_a = get(classes)) == null ? void 0 : _a.toast, (_c = (_b = $$props.toast) == null ? void 0 : _b.classes) == null ? void 0 : _c.toast, (_d = get(classes)) == null ? void 0 : _d[get(toastType)], (_f = (_e = $$props.toast) == null ? void 0 : _e.classes) == null ? void 0 : _f[get(toastType)]));
      },
      () => Boolean($$props.toast.promise),
      () => Boolean($$props.expanded || $$props.expandByDefault && get(mounted))
    ]
  );
  event("dragend", li, handleDragEnd);
  append($$anchor, li);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Toast = hmr(Toast, () => Toast[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toast[HMR].source;
    set(Toast[HMR].source, module.default[HMR].original);
  });
}
var Toast_default = Toast;
delegate([
  "pointermove",
  "pointerup",
  "pointerdown",
  "click"
]);

// node_modules/svelte-sonner/dist/icons/SuccessIcon.svelte
SuccessIcon[FILENAME] = "node_modules/svelte-sonner/dist/icons/SuccessIcon.svelte";
var root3 = add_locations(from_svg(`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" height="20" width="20" data-sonner-success-icon=""><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z" clip-rule="evenodd"></path></svg>`), SuccessIcon[FILENAME], [[1, 0, [[9, 1]]]]);
function SuccessIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SuccessIcon);
  var svg = root3();
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SuccessIcon = hmr(SuccessIcon, () => SuccessIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SuccessIcon[HMR].source;
    set(SuccessIcon[HMR].source, module.default[HMR].original);
  });
}
var SuccessIcon_default = SuccessIcon;

// node_modules/svelte-sonner/dist/icons/ErrorIcon.svelte
ErrorIcon[FILENAME] = "node_modules/svelte-sonner/dist/icons/ErrorIcon.svelte";
var root4 = add_locations(from_svg(`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" height="20" width="20" data-sonner-error-icon=""><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-5a.75.75 0 01.75.75v4.5a.75.75 0 01-1.5 0v-4.5A.75.75 0 0110 5zm0 10a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path></svg>`), ErrorIcon[FILENAME], [[1, 0, [[9, 1]]]]);
function ErrorIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ErrorIcon);
  var svg = root4();
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ErrorIcon = hmr(ErrorIcon, () => ErrorIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ErrorIcon[HMR].source;
    set(ErrorIcon[HMR].source, module.default[HMR].original);
  });
}
var ErrorIcon_default = ErrorIcon;

// node_modules/svelte-sonner/dist/icons/WarningIcon.svelte
WarningIcon[FILENAME] = "node_modules/svelte-sonner/dist/icons/WarningIcon.svelte";
var root5 = add_locations(from_svg(`<svg viewBox="0 0 64 64" fill="currentColor" height="20" width="20" data-sonner-warning-icon="" xmlns="http://www.w3.org/2000/svg"><path d="M32.427,7.987c2.183,0.124 4,1.165 5.096,3.281l17.936,36.208c1.739,3.66 -0.954,8.585 -5.373,8.656l-36.119,0c-4.022,-0.064 -7.322,-4.631 -5.352,-8.696l18.271,-36.207c0.342,-0.65 0.498,-0.838 0.793,-1.179c1.186,-1.375 2.483,-2.111 4.748,-2.063Zm-0.295,3.997c-0.687,0.034 -1.316,0.419 -1.659,1.017c-6.312,11.979 -12.397,24.081 -18.301,36.267c-0.546,1.225 0.391,2.797 1.762,2.863c12.06,0.195 24.125,0.195 36.185,0c1.325,-0.064 2.321,-1.584 1.769,-2.85c-5.793,-12.184 -11.765,-24.286 -17.966,-36.267c-0.366,-0.651 -0.903,-1.042 -1.79,-1.03Z"></path><path d="M33.631,40.581l-3.348,0l-0.368,-16.449l4.1,0l-0.384,16.449Zm-3.828,5.03c0,-0.609 0.197,-1.113 0.592,-1.514c0.396,-0.4 0.935,-0.601 1.618,-0.601c0.684,0 1.223,0.201 1.618,0.601c0.395,0.401 0.593,0.905 0.593,1.514c0,0.587 -0.193,1.078 -0.577,1.473c-0.385,0.395 -0.929,0.593 -1.634,0.593c-0.705,0 -1.249,-0.198 -1.634,-0.593c-0.384,-0.395 -0.576,-0.886 -0.576,-1.473Z"></path></svg>`), WarningIcon[FILENAME], [[1, 0, [[9, 1], [12, 1]]]]);
function WarningIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, WarningIcon);
  var svg = root5();
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WarningIcon = hmr(WarningIcon, () => WarningIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WarningIcon[HMR].source;
    set(WarningIcon[HMR].source, module.default[HMR].original);
  });
}
var WarningIcon_default = WarningIcon;

// node_modules/svelte-sonner/dist/icons/InfoIcon.svelte
InfoIcon[FILENAME] = "node_modules/svelte-sonner/dist/icons/InfoIcon.svelte";
var root6 = add_locations(from_svg(`<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" height="20" width="20" data-sonner-info-icon=""><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z" clip-rule="evenodd"></path></svg>`), InfoIcon[FILENAME], [[1, 0, [[9, 1]]]]);
function InfoIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, InfoIcon);
  var svg = root6();
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  InfoIcon = hmr(InfoIcon, () => InfoIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InfoIcon[HMR].source;
    set(InfoIcon[HMR].source, module.default[HMR].original);
  });
}
var InfoIcon_default = InfoIcon;

// node_modules/svelte-sonner/dist/icons/CloseIcon.svelte
CloseIcon[FILENAME] = "node_modules/svelte-sonner/dist/icons/CloseIcon.svelte";
var root7 = add_locations(from_svg(`<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" data-sonner-close-icon=""><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>`), CloseIcon[FILENAME], [[1, 0, [[13, 1], [14, 1]]]]);
function CloseIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CloseIcon);
  var svg = root7();
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloseIcon = hmr(CloseIcon, () => CloseIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloseIcon[HMR].source;
    set(CloseIcon[HMR].source, module.default[HMR].original);
  });
}
var CloseIcon_default = CloseIcon;

// node_modules/svelte-sonner/dist/Toaster.svelte
Toaster[FILENAME] = "node_modules/svelte-sonner/dist/Toaster.svelte";
var VISIBLE_TOASTS_AMOUNT = 3;
var VIEWPORT_OFFSET = "24px";
var MOBILE_VIEWPORT_OFFSET = "16px";
var TOAST_LIFETIME2 = 4e3;
var TOAST_WIDTH = 356;
var GAP2 = 14;
var DARK = "dark";
var LIGHT = "light";
function getOffsetObject(defaultOffset, mobileOffset) {
  const styles = {};
  [defaultOffset, mobileOffset].forEach((offset, index) => {
    const isMobile = strict_equals(index, 1);
    const prefix = isMobile ? "--mobile-offset" : "--offset";
    const defaultValue = isMobile ? MOBILE_VIEWPORT_OFFSET : VIEWPORT_OFFSET;
    function assignAll(offset2) {
      ["top", "right", "bottom", "left"].forEach((key) => {
        styles[`${prefix}-${key}`] = strict_equals(typeof offset2, "number") ? `${offset2}px` : offset2;
      });
    }
    if (strict_equals(typeof offset, "number") || strict_equals(typeof offset, "string")) {
      assignAll(offset);
    } else if (strict_equals(typeof offset, "object")) {
      ["top", "right", "bottom", "left"].forEach((key) => {
        const value = offset[key];
        if (strict_equals(value, void 0)) {
          styles[`${prefix}-${key}`] = defaultValue;
        } else {
          styles[`${prefix}-${key}`] = strict_equals(typeof value, "number") ? `${value}px` : value;
        }
      });
    } else {
      assignAll(defaultValue);
    }
  });
  return styles;
}
var root_22 = add_locations(from_html(`<ol></ol>`), Toaster[FILENAME], [[239, 3]]);
var root8 = add_locations(from_html(`<section aria-live="polite" aria-relevant="additions text" aria-atomic="false" class="s-KjATBeAaNTDC"><!></section>`), Toaster[FILENAME], [[224, 0]]);
var $$css = {
  hash: "s-KjATBeAaNTDC",
  code: "\n	:where(html[dir='ltr']),\n	:where([data-sonner-toaster][dir='ltr']) {\n		--toast-icon-margin-start: -3px;\n		--toast-icon-margin-end: 4px;\n		--toast-svg-margin-start: -1px;\n		--toast-svg-margin-end: 0px;\n		--toast-button-margin-start: auto;\n		--toast-button-margin-end: 0;\n		--toast-close-button-start: 0;\n		--toast-close-button-end: unset;\n		--toast-close-button-transform: translate(-35%, -35%);\n	}\n\n	:where(html[dir='rtl']),\n	:where([data-sonner-toaster][dir='rtl']) {\n		--toast-icon-margin-start: 4px;\n		--toast-icon-margin-end: -3px;\n		--toast-svg-margin-start: 0px;\n		--toast-svg-margin-end: -1px;\n		--toast-button-margin-start: 0;\n		--toast-button-margin-end: auto;\n		--toast-close-button-start: unset;\n		--toast-close-button-end: 0;\n		--toast-close-button-transform: translate(35%, -35%);\n	}\n\n	:where([data-sonner-toaster]) {\n		position: fixed;\n		width: var(--width);\n		font-family:\n			ui-sans-serif,\n			system-ui,\n			-apple-system,\n			BlinkMacSystemFont,\n			Segoe UI,\n			Roboto,\n			Helvetica Neue,\n			Arial,\n			Noto Sans,\n			sans-serif,\n			Apple Color Emoji,\n			Segoe UI Emoji,\n			Segoe UI Symbol,\n			Noto Color Emoji;\n		--gray1: hsl(0, 0%, 99%);\n		--gray2: hsl(0, 0%, 97.3%);\n		--gray3: hsl(0, 0%, 95.1%);\n		--gray4: hsl(0, 0%, 93%);\n		--gray5: hsl(0, 0%, 90.9%);\n		--gray6: hsl(0, 0%, 88.7%);\n		--gray7: hsl(0, 0%, 85.8%);\n		--gray8: hsl(0, 0%, 78%);\n		--gray9: hsl(0, 0%, 56.1%);\n		--gray10: hsl(0, 0%, 52.3%);\n		--gray11: hsl(0, 0%, 43.5%);\n		--gray12: hsl(0, 0%, 9%);\n		--border-radius: 8px;\n		box-sizing: border-box;\n		padding: 0;\n		margin: 0;\n		list-style: none;\n		outline: none;\n		z-index: 999999999;\n		transition: transform 400ms ease;\n	}\n\n	:where([data-sonner-toaster][data-lifted='true']) {\n		transform: translateY(-8px);\n	}\n\n	@media (hover: none) and (pointer: coarse) {\n		[data-sonner-toaster][data-lifted='true'] {\n			transform: none;\n		}\n	}\n\n	:where([data-sonner-toaster][data-x-position='right']) {\n		right: var(--offset-right);\n	}\n\n	:where([data-sonner-toaster][data-x-position='left']) {\n		left: var(--offset-left);\n	}\n\n	:where([data-sonner-toaster][data-x-position='center']) {\n		left: 50%;\n		transform: translateX(-50%);\n	}\n\n	:where([data-sonner-toaster][data-y-position='top']) {\n		top: var(--offset-top);\n	}\n\n	:where([data-sonner-toaster][data-y-position='bottom']) {\n		bottom: var(--offset-bottom);\n	}\n\n	:where([data-sonner-toast]) {\n		--y: translateY(100%);\n		--lift-amount: calc(var(--lift) * var(--gap));\n		z-index: var(--z-index);\n		position: absolute;\n		opacity: 0;\n		transform: var(--y);\n		touch-action: none;\n		transition:\n			transform 400ms,\n			opacity 400ms,\n			height 400ms,\n			box-shadow 200ms;\n		box-sizing: border-box;\n		outline: none;\n		overflow-wrap: anywhere;\n	}\n\n	:where([data-sonner-toast][data-styled='true']) {\n		padding: 16px;\n		background: var(--normal-bg);\n		border: 1px solid var(--normal-border);\n		color: var(--normal-text);\n		border-radius: var(--border-radius);\n		box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);\n		width: var(--width);\n		font-size: 13px;\n		display: flex;\n		align-items: center;\n		gap: 6px;\n	}\n\n	:where([data-sonner-toast]:focus-visible) {\n		box-shadow:\n			0px 4px 12px rgba(0, 0, 0, 0.1),\n			0 0 0 2px rgba(0, 0, 0, 0.2);\n	}\n\n	:where([data-sonner-toast][data-y-position='top']) {\n		top: 0;\n		--y: translateY(-100%);\n		--lift: 1;\n		--lift-amount: calc(1 * var(--gap));\n	}\n\n	:where([data-sonner-toast][data-y-position='bottom']) {\n		bottom: 0;\n		--y: translateY(100%);\n		--lift: -1;\n		--lift-amount: calc(var(--lift) * var(--gap));\n	}\n\n	:where([data-sonner-toast][data-styled='true']) :where([data-description]) {\n		font-weight: 400;\n		line-height: 1.4;\n		color: #3f3f3f;\n	}\n\n	:where([data-rich-colors='true'][data-sonner-toast][data-styled='true'])\n		:where([data-description]) {\n		color: inherit;\n	}\n\n	:where([data-sonner-toaster][data-sonner-theme='dark'])\n		:where([data-description]) {\n		color: hsl(0, 0%, 91%);\n	}\n\n	:where([data-sonner-toast][data-styled='true']) :where([data-title]) {\n		font-weight: 500;\n		line-height: 1.5;\n		color: inherit;\n	}\n\n	:where([data-sonner-toast][data-styled='true']) :where([data-icon]) {\n		display: flex;\n		height: 16px;\n		width: 16px;\n		position: relative;\n		justify-content: flex-start;\n		align-items: center;\n		flex-shrink: 0;\n		margin-left: var(--toast-icon-margin-start);\n		margin-right: var(--toast-icon-margin-end);\n	}\n\n	:where([data-sonner-toast][data-promise='true']) :where([data-icon] > svg) {\n		opacity: 0;\n		transform: scale(0.8);\n		transform-origin: center;\n		animation: sonner-fade-in 300ms ease forwards;\n	}\n\n	:where([data-sonner-toast][data-styled='true']) :where([data-icon] > *) {\n		flex-shrink: 0;\n	}\n\n	:where([data-sonner-toast][data-styled='true']) :where([data-icon] svg) {\n		margin-left: var(--toast-svg-margin-start);\n		margin-right: var(--toast-svg-margin-end);\n	}\n\n	:where([data-sonner-toast][data-styled='true']) :where([data-content]) {\n		display: flex;\n		flex-direction: column;\n		gap: 2px;\n	}\n\n	:where([data-sonner-toast][data-styled='true']) :where([data-button]) {\n		border-radius: 4px;\n		padding-left: 8px;\n		padding-right: 8px;\n		height: 24px;\n		font-size: 12px;\n		color: var(--normal-bg);\n		background: var(--normal-text);\n		margin-left: var(--toast-button-margin-start);\n		margin-right: var(--toast-button-margin-end);\n		border: none;\n		font-weight: 500;\n		cursor: pointer;\n		outline: none;\n		display: flex;\n		align-items: center;\n		flex-shrink: 0;\n		transition:\n			opacity 400ms,\n			box-shadow 200ms;\n	}\n\n	:where([data-sonner-toast][data-styled='true'])\n		:where([data-button]:focus-visible) {\n		box-shadow: 0 0 0 2px rgba(0, 0, 0, 0.4);\n	}\n\n	:where([data-sonner-toast][data-styled='true'])\n		:where([data-button]:first-of-type) {\n		margin-left: var(--toast-button-margin-start);\n		margin-right: var(--toast-button-margin-end);\n	}\n\n	:where([data-sonner-toast][data-styled='true']) :where([data-cancel]) {\n		color: var(--normal-text);\n		background: rgba(0, 0, 0, 0.08);\n	}\n\n	:where([data-sonner-toaster][data-sonner-theme='dark'])\n		:where([data-sonner-toast][data-styled='true'])\n		:where([data-cancel]) {\n		background: rgba(255, 255, 255, 0.3);\n	}\n\n	[data-sonner-toast][data-styled='true'] [data-close-button] {\n		position: absolute;\n		left: var(--toast-close-button-start);\n		right: var(--toast-close-button-end);\n		top: 0;\n		height: 20px;\n		width: 20px;\n		display: flex;\n		justify-content: center;\n		align-items: center;\n		padding: 0;\n		color: var(--gray12);\n		background: var(--normal-bg);\n		border: 1px solid var(--gray4);\n		transform: var(--toast-close-button-transform);\n		border-radius: 50%;\n		cursor: pointer;\n		z-index: 1;\n		transition:\n			opacity 100ms,\n			background 200ms,\n			border-color 200ms;\n	}\n\n	:where([data-sonner-toast][data-styled='true'])\n		:where([data-close-button]:focus-visible) {\n		box-shadow:\n			0px 4px 12px rgba(0, 0, 0, 0.1),\n			0 0 0 2px rgba(0, 0, 0, 0.2);\n	}\n\n	:where([data-sonner-toast][data-styled='true'])\n		:where([data-disabled='true']) {\n		cursor: not-allowed;\n	}\n\n	:where([data-sonner-toast][data-styled='true'])\n		:where([data-close-button]:hover) {\n		background: var(--gray2);\n		border-color: var(--gray5);\n	}\n\n	:where([data-sonner-toast][data-swiping='true'])::before {\n		content: '';\n		position: absolute;\n		left: -100%;\n		right: -100%;\n		height: 100%;\n		z-index: -1;\n	}\n\n	:where(\n			[data-sonner-toast][data-y-position='top'][data-swiping='true']\n		)::before {\n		bottom: 50%;\n		transform: scaleY(3) translateY(50%);\n	}\n\n	[data-sonner-toast][data-y-position='bottom'][data-swiping='true']::before {\n		top: 50%;\n		transform: scaleY(3) translateY(-50%);\n	}\n\n	:where(\n			[data-sonner-toast][data-swiping='false'][data-removed='true']\n		)::before {\n		content: '';\n		position: absolute;\n		inset: 0;\n		transform: scaleY(2);\n	}\n\n	:where([data-sonner-toast][data-expanded='true'])::after {\n		content: '';\n		position: absolute;\n		left: 0;\n		height: calc(var(--gap) + 1px);\n		bottom: 100%;\n		width: 100%;\n	}\n\n	:where([data-sonner-toast][data-mounted='true']) {\n		--y: translateY(0);\n		opacity: 1;\n	}\n\n	:where([data-sonner-toast][data-expanded='false'][data-front='false']) {\n		--scale: var(--toasts-before) * 0.05 + 1;\n		--y: translateY(calc(var(--lift-amount) * var(--toasts-before)))\n			scale(calc(-1 * var(--scale)));\n		height: var(--front-toast-height);\n	}\n\n	:where([data-sonner-toast]) > * {\n		transition: opacity 400ms;\n	}\n\n	:where([data-sonner-toast][data-x-position='right']) {\n		right: 0;\n	}\n\n	:where([data-sonner-toast][data-x-position='left']) {\n		left: 0;\n	}\n\n	:where(\n			[data-sonner-toast][data-expanded='false'][data-front='false'][data-styled='true']\n		)\n		> * {\n		opacity: 0;\n	}\n\n	:where([data-sonner-toast][data-visible='false']) {\n		opacity: 0;\n		pointer-events: none;\n	}\n\n	:where([data-sonner-toast][data-mounted='true'][data-expanded='true']) {\n		--y: translateY(calc(var(--lift) * var(--offset)));\n		height: var(--initial-height);\n	}\n\n	:where(\n		[data-sonner-toast][data-removed='true'][data-front='true'][data-swipe-out='false']\n	) {\n		--y: translateY(calc(var(--lift) * -100%));\n		opacity: 0;\n	}\n\n	:where(\n		[data-sonner-toast][data-removed='true'][data-front='false'][data-swipe-out='false'][data-expanded='true']\n	) {\n		--y: translateY(\n			calc(var(--lift) * var(--offset) + var(--lift) * -100%)\n		);\n		opacity: 0;\n	}\n\n	:where(\n		[data-sonner-toast][data-removed='true'][data-front='false'][data-swipe-out='false'][data-expanded='false']\n	) {\n		--y: translateY(40%);\n		opacity: 0;\n		transition:\n			transform 500ms,\n			opacity 200ms;\n	}\n\n	:where(\n			[data-sonner-toast][data-removed='true'][data-front='false']\n		)::before {\n		height: calc(var(--initial-height) + 20%);\n	}\n\n	:where([data-sonner-toast][data-swiping='true']) {\n		transform: var(--y) translateY(var(--swipe-amount-y, 0px))\n			translateX(var(--swipe-amount-x, 0px));\n		transition: none;\n	}\n\n	:where([data-sonner-toast][data-swiped='true']) {\n		user-select: none;\n	}\n\n	:where(\n		[data-sonner-toast][data-swipe-out='true'][data-y-position='bottom']\n	),\n	:where([data-sonner-toast][data-swipe-out='true'][data-y-position='top']) {\n		animation-duration: 200ms;\n		animation-timing-function: ease-out;\n		animation-fill-mode: forwards;\n	}\n\n	:where(\n		[data-sonner-toast][data-swipe-out='true'][data-swipe-direction='left']\n	) {\n		animation-name: swipe-out-left;\n	}\n\n	:where(\n		[data-sonner-toast][data-swipe-out='true'][data-swipe-direction='right']\n	) {\n		animation-name: swipe-out-right;\n	}\n\n	:where(\n		[data-sonner-toast][data-swipe-out='true'][data-swipe-direction='up']\n	) {\n		animation-name: swipe-out-up;\n	}\n\n	:where(\n		[data-sonner-toast][data-swipe-out='true'][data-swipe-direction='down']\n	) {\n		animation-name: swipe-out-down;\n	}\n\n	@keyframes swipe-out-left {\n		from {\n			transform: var(--y) translateX(var(--swipe-amount-x));\n			opacity: 1;\n		}\n\n		to {\n			transform: var(--y) translateX(calc(var(--swipe-amount-x) - 100%));\n			opacity: 0;\n		}\n	}\n\n	@keyframes swipe-out-right {\n		from {\n			transform: var(--y) translateX(var(--swipe-amount-x));\n			opacity: 1;\n		}\n\n		to {\n			transform: var(--y) translateX(calc(var(--swipe-amount-x) + 100%));\n			opacity: 0;\n		}\n	}\n\n	@keyframes swipe-out-up {\n		from {\n			transform: var(--y) translateY(var(--swipe-amount-y));\n			opacity: 1;\n		}\n\n		to {\n			transform: var(--y) translateY(calc(var(--swipe-amount-y) - 100%));\n			opacity: 0;\n		}\n	}\n\n	@keyframes swipe-out-down {\n		from {\n			transform: var(--y) translateY(var(--swipe-amount-y));\n			opacity: 1;\n		}\n\n		to {\n			transform: var(--y) translateY(calc(var(--swipe-amount-y) + 100%));\n			opacity: 0;\n		}\n	}\n\n	@media (max-width: 600px) {\n		[data-sonner-toaster] {\n			position: fixed;\n			right: var(--mobile-offset-right);\n			left: var(--mobile-offset-left);\n			width: 100%;\n		}\n\n		[data-sonner-toaster][dir='rtl'] {\n			left: calc(var(--mobile-offset-left) * -1);\n		}\n\n		[data-sonner-toaster] [data-sonner-toast] {\n			left: 0;\n			right: 0;\n			width: calc(100% - var(--mobile-offset-left) * 2);\n		}\n\n		[data-sonner-toaster][data-x-position='left'] {\n			left: var(--mobile-offset-left);\n		}\n\n		[data-sonner-toaster][data-y-position='bottom'] {\n			bottom: var(--mobile-offset-bottom);\n		}\n\n		[data-sonner-toaster][data-y-position='top'] {\n			top: var(--mobile-offset-top);\n		}\n\n		[data-sonner-toaster][data-x-position='center'] {\n			left: var(--mobile-offset-left);\n			right: var(--mobile-offset-right);\n			transform: none;\n		}\n	}\n\n	:where([data-sonner-toaster][data-sonner-theme='light']) {\n		--normal-bg: #fff;\n		--normal-border: var(--gray4);\n		--normal-text: var(--gray12);\n\n		--success-bg: hsl(143, 85%, 96%);\n		--success-border: hsl(145, 92%, 87%);\n		--success-text: hsl(140, 100%, 27%);\n\n		--info-bg: hsl(208, 100%, 97%);\n		--info-border: hsl(221, 91%, 93%);\n		--info-text: hsl(210, 92%, 45%);\n\n		--warning-bg: hsl(49, 100%, 97%);\n		--warning-border: hsl(49, 91%, 84%);\n		--warning-text: hsl(31, 92%, 45%);\n\n		--error-bg: hsl(359, 100%, 97%);\n		--error-border: hsl(359, 100%, 94%);\n		--error-text: hsl(360, 100%, 45%);\n	}\n\n	:where([data-sonner-toaster][data-sonner-theme='light'])\n		:where([data-sonner-toast][data-invert='true']) {\n		--normal-bg: #000;\n		--normal-border: hsl(0, 0%, 20%);\n		--normal-text: var(--gray1);\n	}\n\n	:where([data-sonner-toaster][data-sonner-theme='dark'])\n		:where([data-sonner-toast][data-invert='true']) {\n		--normal-bg: #fff;\n		--normal-border: var(--gray3);\n		--normal-text: var(--gray12);\n	}\n\n	:where([data-sonner-toaster][data-sonner-theme='dark']) {\n		--normal-bg: #000;\n		--normal-bg-hover: hsl(0, 0%, 12%);\n		--normal-border: hsl(0, 0%, 20%);\n		--normal-border-hover: hsl(0, 0%, 25%);\n		--normal-text: var(--gray1);\n\n		--success-bg: hsl(150, 100%, 6%);\n		--success-border: hsl(147, 100%, 12%);\n		--success-text: hsl(150, 86%, 65%);\n\n		--info-bg: hsl(215, 100%, 6%);\n		--info-border: hsl(223, 43%, 17%);\n		--info-text: hsl(216, 87%, 65%);\n\n		--warning-bg: hsl(64, 100%, 6%);\n		--warning-border: hsl(60, 100%, 9%);\n		--warning-text: hsl(46, 87%, 65%);\n\n		--error-bg: hsl(358, 76%, 10%);\n		--error-border: hsl(357, 89%, 16%);\n		--error-text: hsl(358, 100%, 81%);\n	}\n\n	:where([data-sonner-toaster][data-sonner-theme='dark'])\n		:where([data-sonner-toast])\n		:where([data-close-button]) {\n		background: var(--normal-bg);\n		border-color: var(--normal-border);\n		color: var(--normal-text);\n	}\n\n	:where([data-sonner-toaster][data-sonner-theme='dark'])\n		:where([data-sonner-toast])\n		:where([data-close-button]:hover) {\n		background: var(--normal-bg-hover);\n		border-color: var(--normal-border-hover);\n	}\n\n	:where([data-rich-colors='true'])[data-sonner-toast][data-type='success'] {\n		background: var(--success-bg);\n		border-color: var(--success-border);\n		color: var(--success-text);\n	}\n\n	:where([data-rich-colors='true'])[data-sonner-toast][data-type='success']\n		:where([data-close-button]) {\n		background: var(--success-bg);\n		border-color: var(--success-border);\n		color: var(--success-text);\n	}\n\n	:where([data-rich-colors='true'])[data-sonner-toast][data-type='info'] {\n		background: var(--info-bg);\n		border-color: var(--info-border);\n		color: var(--info-text);\n	}\n\n	:where([data-rich-colors='true'])[data-sonner-toast][data-type='info']\n		:where([data-close-button]) {\n		background: var(--info-bg);\n		border-color: var(--info-border);\n		color: var(--info-text);\n	}\n\n	:where([data-rich-colors='true'])[data-sonner-toast][data-type='warning'] {\n		background: var(--warning-bg);\n		border-color: var(--warning-border);\n		color: var(--warning-text);\n	}\n\n	:where([data-rich-colors='true'])[data-sonner-toast][data-type='warning']\n		:where([data-close-button]) {\n		background: var(--warning-bg);\n		border-color: var(--warning-border);\n		color: var(--warning-text);\n	}\n\n	:where([data-rich-colors='true'])[data-sonner-toast][data-type='error'] {\n		background: var(--error-bg);\n		border-color: var(--error-border);\n		color: var(--error-text);\n	}\n\n	:where([data-rich-colors='true'])[data-sonner-toast][data-type='error']\n		:where([data-close-button]) {\n		background: var(--error-bg);\n		border-color: var(--error-border);\n		color: var(--error-text);\n	}\n\n	:where(.sonner-loading-wrapper) {\n		--size: 16px;\n		height: var(--size);\n		width: var(--size);\n		position: absolute;\n		inset: 0;\n		z-index: 10;\n	}\n\n	:where(.sonner-loading-wrapper[data-visible='false']) {\n		transform-origin: center;\n		animation: sonner-fade-out 0.2s ease forwards;\n	}\n\n	:where(.sonner-spinner) {\n		position: relative;\n		top: 50%;\n		left: 50%;\n		height: var(--size);\n		width: var(--size);\n	}\n\n	:where(.sonner-loading-bar) {\n		animation: sonner-spin 1.2s linear infinite;\n		background: var(--gray11);\n		border-radius: 6px;\n		height: 8%;\n		left: -10%;\n		position: absolute;\n		top: -3.9%;\n		width: 24%;\n	}\n\n	:where(.sonner-loading-bar:nth-child(1)) {\n		animation-delay: -1.2s;\n		transform: rotate(0.0001deg) translate(146%);\n	}\n\n	:where(.sonner-loading-bar:nth-child(2)) {\n		animation-delay: -1.1s;\n		transform: rotate(30deg) translate(146%);\n	}\n\n	:where(.sonner-loading-bar:nth-child(3)) {\n		animation-delay: -1s;\n		transform: rotate(60deg) translate(146%);\n	}\n\n	:where(.sonner-loading-bar:nth-child(4)) {\n		animation-delay: -0.9s;\n		transform: rotate(90deg) translate(146%);\n	}\n\n	:where(.sonner-loading-bar:nth-child(5)) {\n		animation-delay: -0.8s;\n		transform: rotate(120deg) translate(146%);\n	}\n\n	:where(.sonner-loading-bar:nth-child(6)) {\n		animation-delay: -0.7s;\n		transform: rotate(150deg) translate(146%);\n	}\n\n	:where(.sonner-loading-bar:nth-child(7)) {\n		animation-delay: -0.6s;\n		transform: rotate(180deg) translate(146%);\n	}\n\n	:where(.sonner-loading-bar:nth-child(8)) {\n		animation-delay: -0.5s;\n		transform: rotate(210deg) translate(146%);\n	}\n\n	:where(.sonner-loading-bar:nth-child(9)) {\n		animation-delay: -0.4s;\n		transform: rotate(240deg) translate(146%);\n	}\n\n	:where(.sonner-loading-bar:nth-child(10)) {\n		animation-delay: -0.3s;\n		transform: rotate(270deg) translate(146%);\n	}\n\n	:where(.sonner-loading-bar:nth-child(11)) {\n		animation-delay: -0.2s;\n		transform: rotate(300deg) translate(146%);\n	}\n\n	:where(.sonner-loading-bar:nth-child(12)) {\n		animation-delay: -0.1s;\n		transform: rotate(330deg) translate(146%);\n	}\n\n	@keyframes sonner-fade-in {\n		0% {\n			opacity: 0;\n			transform: scale(0.8);\n		}\n		100% {\n			opacity: 1;\n			transform: scale(1);\n		}\n	}\n\n	@keyframes sonner-fade-out {\n		0% {\n			opacity: 1;\n			transform: scale(1);\n		}\n		100% {\n			opacity: 0;\n			transform: scale(0.8);\n		}\n	}\n\n	@keyframes sonner-spin {\n		0% {\n			opacity: 1;\n		}\n		100% {\n			opacity: 0.15;\n		}\n	}\n\n	@media (prefers-reduced-motion) {\n		[data-sonner-toast],\n		[data-sonner-toast] > *,\n		.sonner-loading-bar {\n			transition: none !important;\n			animation: none !important;\n		}\n	}\n\n	:where(.sonner-loader) {\n		position: absolute;\n		top: 50%;\n		left: 50%;\n		transform: translate(-50%, -50%);\n		transform-origin: center;\n		transition:\n			opacity 200ms,\n			transform 200ms;\n	}\n\n	:where(.sonner-loader[data-visible='false']) {\n		opacity: 0;\n		transform: scale(0.8) translate(-50%, -50%);\n	}\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9hc3Rlci5zdmVsdGUiLCJtYXBwaW5ncyI6IiIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiVG9hc3Rlci5zdmVsdGUiXX0= */"
};
function Toaster($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Toaster);
  append_styles($$anchor, $$css);
  function getInitialTheme(t) {
    if (strict_equals(t, "system", false)) return t;
    if (strict_equals(typeof window, "undefined", false)) {
      if (window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches) {
        return DARK;
      }
      return LIGHT;
    }
    return LIGHT;
  }
  function getDocumentDirection() {
    if (strict_equals(typeof window, "undefined")) return "ltr";
    if (strict_equals(typeof document, "undefined")) return "ltr";
    const dirAttribute = document.documentElement.getAttribute("dir");
    if (strict_equals(dirAttribute, "auto") || !dirAttribute) {
      return window.getComputedStyle(document.documentElement).direction;
    }
    return dirAttribute;
  }
  let invert = prop($$props, "invert", 3, false), position = prop($$props, "position", 3, "bottom-right"), hotkey = prop($$props, "hotkey", 19, () => ["altKey", "KeyT"]), expand = prop($$props, "expand", 3, false), closeButton = prop($$props, "closeButton", 3, false), offset = prop($$props, "offset", 3, VIEWPORT_OFFSET), mobileOffset = prop($$props, "mobileOffset", 3, MOBILE_VIEWPORT_OFFSET), theme = prop($$props, "theme", 3, "light"), richColors = prop($$props, "richColors", 3, false), duration = prop($$props, "duration", 3, TOAST_LIFETIME2), visibleToasts = prop($$props, "visibleToasts", 3, VISIBLE_TOASTS_AMOUNT), toastOptions = prop($$props, "toastOptions", 19, () => ({})), dir = prop($$props, "dir", 19, getDocumentDirection), gap = prop($$props, "gap", 3, GAP2), containerAriaLabel = prop($$props, "containerAriaLabel", 3, "Notifications"), closeButtonAriaLabel = prop($$props, "closeButtonAriaLabel", 3, "Close toast"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "invert",
      "position",
      "hotkey",
      "expand",
      "closeButton",
      "offset",
      "mobileOffset",
      "theme",
      "richColors",
      "duration",
      "visibleToasts",
      "toastOptions",
      "dir",
      "gap",
      "loadingIcon",
      "successIcon",
      "errorIcon",
      "warningIcon",
      "closeIcon",
      "infoIcon",
      "containerAriaLabel",
      "class",
      "closeButtonAriaLabel"
    ],
    "restProps"
  );
  const possiblePositions = user_derived(() => Array.from(new Set([
    position(),
    ...toastState.toasts.filter((toast2) => toast2.position).map((toast2) => toast2.position)
  ].filter(Boolean))));
  let expanded = state(false);
  let interacting = state(false);
  let actualTheme = state(proxy(getInitialTheme(theme())));
  let listRef = state(void 0);
  let lastFocusedElementRef = state(null);
  let isFocusWithin = state(false);
  const hotkeyLabel = user_derived(() => hotkey().join("+").replace(/Key/g, "").replace(/Digit/g, ""));
  user_effect(() => {
    if (toastState.toasts.length <= 1) {
      set(expanded, false);
    }
  });
  user_effect(() => {
    const toastsToDismiss = toastState.toasts.filter((toast2) => toast2.dismiss && !toast2.delete);
    if (toastsToDismiss.length > 0) {
      const updatedToasts = toastState.toasts.map((toast2) => {
        const matchingToast = toastsToDismiss.find((dismissToast) => strict_equals(dismissToast.id, toast2.id));
        if (matchingToast) {
          return { ...toast2, delete: true };
        }
        return toast2;
      });
      toastState.toasts = updatedToasts;
    }
  });
  user_effect(() => {
    return () => {
      if (get(listRef) && get(lastFocusedElementRef)) {
        get(lastFocusedElementRef).focus({ preventScroll: true });
        set(lastFocusedElementRef, null);
        set(isFocusWithin, false);
      }
    };
  });
  onMount(() => {
    toastState.reset();
    const handleKeydown = (event2) => {
      var _a, _b;
      const isHotkeyPressed = hotkey().every((key) => (
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        event2[key] || strict_equals(event2.code, key)
      ));
      if (isHotkeyPressed) {
        set(expanded, true);
        (_a = get(listRef)) == null ? void 0 : _a.focus();
      }
      if (strict_equals(event2.code, "Escape") && (strict_equals(document.activeElement, get(listRef)) || ((_b = get(listRef)) == null ? void 0 : _b.contains(document.activeElement)))) {
        set(expanded, false);
      }
    };
    document.addEventListener("keydown", handleKeydown);
    return () => {
      document.removeEventListener("keydown", handleKeydown);
    };
  });
  user_effect(() => {
    if (strict_equals(theme(), "system", false)) {
      set(actualTheme, theme());
    }
    if (strict_equals(typeof window, "undefined", false)) {
      if (strict_equals(theme(), "system")) {
        if (window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches) {
          set(actualTheme, DARK);
        } else {
          set(actualTheme, LIGHT);
        }
      }
      const mediaQueryList = window.matchMedia("(prefers-color-scheme: dark)");
      const changeHandler = ({ matches }) => {
        set(actualTheme, matches ? DARK : LIGHT, true);
      };
      if ("addEventListener" in mediaQueryList) {
        mediaQueryList.addEventListener("change", changeHandler);
      } else {
        mediaQueryList.addListener(changeHandler);
      }
    }
  });
  const handleBlur = (event2) => {
    if (get(isFocusWithin) && !event2.currentTarget.contains(event2.relatedTarget)) {
      set(isFocusWithin, false);
      if (get(lastFocusedElementRef)) {
        get(lastFocusedElementRef).focus({ preventScroll: true });
        set(lastFocusedElementRef, null);
      }
    }
  };
  const handleFocus = (event2) => {
    const isNotDismissable = event2.target instanceof HTMLElement && strict_equals(event2.target.dataset.dismissable, "false");
    if (isNotDismissable) return;
    if (!get(isFocusWithin)) {
      set(isFocusWithin, true);
      set(lastFocusedElementRef, event2.relatedTarget, true);
    }
  };
  const handlePointerDown = (event2) => {
    const isNotDismissable = event2.target instanceof HTMLElement && strict_equals(event2.target.dataset.dismissable, "false");
    if (isNotDismissable) return;
    set(interacting, true);
  };
  const handleMouseEnter = () => {
    set(expanded, true);
  };
  const handleMouseLeave = () => {
    if (!get(interacting)) {
      set(expanded, false);
    }
  };
  const handleMouseMove = () => {
    set(expanded, true);
  };
  const handleDragEnd = () => {
    set(expanded, false);
  };
  const handlePointerUp = () => {
    set(interacting, false);
  };
  sonnerContext.set(new SonnerState());
  var section = root8();
  set_attribute(section, "tabindex", -1);
  var node = child(section);
  {
    var consequent_10 = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      validate_each_keys(() => get(possiblePositions), (position2) => position2);
      each(node_1, 18, () => get(possiblePositions), (position2) => position2, ($$anchor3, position2, index, $$array) => {
        var ol = root_22();
        const computed_const = user_derived(() => {
          const [y, x] = position2.split("-");
          return { y, x };
        });
        get(computed_const);
        const isLifted = user_derived(() => get(expanded) && toastState.toasts.length > 1 && !expand());
        get(isLifted);
        const offsetObject = user_derived(() => getOffsetObject(offset(), mobileOffset()));
        get(offsetObject);
        let attributes;
        validate_each_keys(() => toastState.toasts.filter((toast2) => !toast2.position && strict_equals(get(index), 0) || strict_equals(toast2.position, position2)), (toast2) => toast2.id);
        each(ol, 23, () => toastState.toasts.filter((toast2) => !toast2.position && strict_equals(get(index), 0) || strict_equals(toast2.position, position2)), (toast2) => toast2.id, ($$anchor4, toast2, index2, $$array_1) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          const expression = user_derived(() => {
            var _a;
            return ((_a = toastOptions()) == null ? void 0 : _a.duration) ?? duration();
          });
          const expression_1 = user_derived(() => {
            var _a;
            return ((_a = toastOptions()) == null ? void 0 : _a.class) ?? "";
          });
          const expression_2 = user_derived(() => {
            var _a;
            return ((_a = toastOptions()) == null ? void 0 : _a.descriptionClass) || "";
          });
          const expression_3 = user_derived(() => {
            var _a;
            return ((_a = toastOptions()) == null ? void 0 : _a.style) ?? "";
          });
          const expression_4 = user_derived(() => toastOptions().classes || {});
          const expression_5 = user_derived(() => toastOptions().unstyled ?? false);
          const expression_6 = user_derived(() => {
            var _a;
            return ((_a = toastOptions()) == null ? void 0 : _a.cancelButtonStyle) ?? "";
          });
          const expression_7 = user_derived(() => {
            var _a;
            return ((_a = toastOptions()) == null ? void 0 : _a.actionButtonStyle) ?? "";
          });
          const expression_8 = user_derived(() => {
            var _a;
            return ((_a = toastOptions()) == null ? void 0 : _a.closeButtonAriaLabel) ?? closeButtonAriaLabel();
          });
          {
            const successIcon = wrap_snippet(Toaster, function($$anchor5) {
              validate_snippet_args(...arguments);
              var fragment_2 = comment();
              var node_3 = first_child(fragment_2);
              {
                var consequent = ($$anchor6) => {
                  var fragment_3 = comment();
                  var node_4 = first_child(fragment_3);
                  snippet(node_4, () => $$props.successIcon ?? noop);
                  append($$anchor6, fragment_3);
                };
                var alternate = ($$anchor6, $$elseif) => {
                  {
                    var consequent_1 = ($$anchor7) => {
                      var fragment_4 = comment();
                      var node_5 = first_child(fragment_4);
                      SuccessIcon_default(node_5, {});
                      append($$anchor7, fragment_4);
                    };
                    if_block(
                      $$anchor6,
                      ($$render) => {
                        if (strict_equals($$props.successIcon, null, false)) $$render(consequent_1);
                      },
                      $$elseif
                    );
                  }
                };
                if_block(node_3, ($$render) => {
                  if ($$props.successIcon) $$render(consequent);
                  else $$render(alternate, false);
                });
              }
              append($$anchor5, fragment_2);
            });
            const errorIcon = wrap_snippet(Toaster, function($$anchor5) {
              validate_snippet_args(...arguments);
              var fragment_5 = comment();
              var node_6 = first_child(fragment_5);
              {
                var consequent_2 = ($$anchor6) => {
                  var fragment_6 = comment();
                  var node_7 = first_child(fragment_6);
                  snippet(node_7, () => $$props.errorIcon ?? noop);
                  append($$anchor6, fragment_6);
                };
                var alternate_1 = ($$anchor6, $$elseif) => {
                  {
                    var consequent_3 = ($$anchor7) => {
                      var fragment_7 = comment();
                      var node_8 = first_child(fragment_7);
                      ErrorIcon_default(node_8, {});
                      append($$anchor7, fragment_7);
                    };
                    if_block(
                      $$anchor6,
                      ($$render) => {
                        if (strict_equals($$props.errorIcon, null, false)) $$render(consequent_3);
                      },
                      $$elseif
                    );
                  }
                };
                if_block(node_6, ($$render) => {
                  if ($$props.errorIcon) $$render(consequent_2);
                  else $$render(alternate_1, false);
                });
              }
              append($$anchor5, fragment_5);
            });
            const warningIcon = wrap_snippet(Toaster, function($$anchor5) {
              validate_snippet_args(...arguments);
              var fragment_8 = comment();
              var node_9 = first_child(fragment_8);
              {
                var consequent_4 = ($$anchor6) => {
                  var fragment_9 = comment();
                  var node_10 = first_child(fragment_9);
                  snippet(node_10, () => $$props.warningIcon ?? noop);
                  append($$anchor6, fragment_9);
                };
                var alternate_2 = ($$anchor6, $$elseif) => {
                  {
                    var consequent_5 = ($$anchor7) => {
                      var fragment_10 = comment();
                      var node_11 = first_child(fragment_10);
                      WarningIcon_default(node_11, {});
                      append($$anchor7, fragment_10);
                    };
                    if_block(
                      $$anchor6,
                      ($$render) => {
                        if (strict_equals($$props.warningIcon, null, false)) $$render(consequent_5);
                      },
                      $$elseif
                    );
                  }
                };
                if_block(node_9, ($$render) => {
                  if ($$props.warningIcon) $$render(consequent_4);
                  else $$render(alternate_2, false);
                });
              }
              append($$anchor5, fragment_8);
            });
            const infoIcon = wrap_snippet(Toaster, function($$anchor5) {
              validate_snippet_args(...arguments);
              var fragment_11 = comment();
              var node_12 = first_child(fragment_11);
              {
                var consequent_6 = ($$anchor6) => {
                  var fragment_12 = comment();
                  var node_13 = first_child(fragment_12);
                  snippet(node_13, () => $$props.infoIcon ?? noop);
                  append($$anchor6, fragment_12);
                };
                var alternate_3 = ($$anchor6, $$elseif) => {
                  {
                    var consequent_7 = ($$anchor7) => {
                      var fragment_13 = comment();
                      var node_14 = first_child(fragment_13);
                      InfoIcon_default(node_14, {});
                      append($$anchor7, fragment_13);
                    };
                    if_block(
                      $$anchor6,
                      ($$render) => {
                        if (strict_equals($$props.infoIcon, null, false)) $$render(consequent_7);
                      },
                      $$elseif
                    );
                  }
                };
                if_block(node_12, ($$render) => {
                  if ($$props.infoIcon) $$render(consequent_6);
                  else $$render(alternate_3, false);
                });
              }
              append($$anchor5, fragment_11);
            });
            const closeIcon = wrap_snippet(Toaster, function($$anchor5) {
              validate_snippet_args(...arguments);
              var fragment_14 = comment();
              var node_15 = first_child(fragment_14);
              {
                var consequent_8 = ($$anchor6) => {
                  var fragment_15 = comment();
                  var node_16 = first_child(fragment_15);
                  snippet(node_16, () => $$props.closeIcon ?? noop);
                  append($$anchor6, fragment_15);
                };
                var alternate_4 = ($$anchor6, $$elseif) => {
                  {
                    var consequent_9 = ($$anchor7) => {
                      var fragment_16 = comment();
                      var node_17 = first_child(fragment_16);
                      CloseIcon_default(node_17, {});
                      append($$anchor7, fragment_16);
                    };
                    if_block(
                      $$anchor6,
                      ($$render) => {
                        if (strict_equals($$props.closeIcon, null, false)) $$render(consequent_9);
                      },
                      $$elseif
                    );
                  }
                };
                if_block(node_15, ($$render) => {
                  if ($$props.closeIcon) $$render(consequent_8);
                  else $$render(alternate_4, false);
                });
              }
              append($$anchor5, fragment_14);
            });
            Toast_default(node_2, {
              get index() {
                return get(index2);
              },
              get toast() {
                return get(toast2);
              },
              get defaultRichColors() {
                return richColors();
              },
              get duration() {
                return get(expression);
              },
              get class() {
                return get(expression_1);
              },
              get descriptionClass() {
                return get(expression_2);
              },
              get invert() {
                return invert();
              },
              get visibleToasts() {
                return visibleToasts();
              },
              get closeButton() {
                return closeButton();
              },
              get interacting() {
                return get(interacting);
              },
              get position() {
                return position2;
              },
              get style() {
                return get(expression_3);
              },
              get classes() {
                return get(expression_4);
              },
              get unstyled() {
                return get(expression_5);
              },
              get cancelButtonStyle() {
                return get(expression_6);
              },
              get actionButtonStyle() {
                return get(expression_7);
              },
              get closeButtonAriaLabel() {
                return get(expression_8);
              },
              get expandByDefault() {
                return expand();
              },
              get expanded() {
                return get(expanded);
              },
              get loadingIcon() {
                return $$props.loadingIcon;
              },
              successIcon,
              errorIcon,
              warningIcon,
              infoIcon,
              closeIcon,
              $$slots: {
                successIcon: true,
                errorIcon: true,
                warningIcon: true,
                infoIcon: true,
                closeIcon: true
              }
            });
          }
          append($$anchor4, fragment_1);
        });
        reset(ol);
        bind_this(ol, ($$value) => set(listRef, $$value), () => get(listRef));
        template_effect(
          ($0) => {
            var _a;
            attributes = set_attributes(
              ol,
              attributes,
              {
                tabindex: -1,
                dir: $0,
                class: $$props.class,
                "data-sonner-toaster": true,
                "data-sonner-theme": get(actualTheme),
                "data-y-position": get(computed_const).y,
                "data-lifted": get(isLifted),
                "data-x-position": get(computed_const).x,
                style: $$props.style,
                onblur: handleBlur,
                onfocus: handleFocus,
                onmouseenter: handleMouseEnter,
                onmousemove: handleMouseMove,
                onmouseleave: handleMouseLeave,
                ondragend: handleDragEnd,
                onpointerdown: handlePointerDown,
                onpointerup: handlePointerUp,
                ...restProps,
                [STYLE]: {
                  "--front-toast-height": `${(_a = toastState.heights[0]) == null ? void 0 : _a.height}px`,
                  "--width": `${TOAST_WIDTH}px`,
                  "--gap": `${gap()}px`,
                  "--offset-top": get(offsetObject)["--offset-top"],
                  "--offset-right": get(offsetObject)["--offset-right"],
                  "--offset-bottom": get(offsetObject)["--offset-bottom"],
                  "--offset-left": get(offsetObject)["--offset-left"],
                  "--mobile-offset-top": get(offsetObject)["--mobile-offset-top"],
                  "--mobile-offset-right": get(offsetObject)["--mobile-offset-right"],
                  "--mobile-offset-bottom": get(offsetObject)["--mobile-offset-bottom"],
                  "--mobile-offset-left": get(offsetObject)["--mobile-offset-left"]
                }
              },
              "s-KjATBeAaNTDC"
            );
            ol.dir = ol.dir;
          },
          [
            () => strict_equals(dir(), "auto") ? getDocumentDirection() : dir()
          ]
        );
        append($$anchor3, ol);
      });
      append($$anchor2, fragment);
    };
    if_block(node, ($$render) => {
      if (toastState.toasts.length > 0) $$render(consequent_10);
    });
  }
  reset(section);
  template_effect(() => set_attribute(section, "aria-label", `${containerAriaLabel() ?? ""} ${get(hotkeyLabel) ?? ""}`));
  append($$anchor, section);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Toaster = hmr(Toaster, () => Toaster[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-KjATBeAaNTDC");
    module.default[HMR].source = Toaster[HMR].source;
    set(Toaster[HMR].source, module.default[HMR].original);
  });
}
var Toaster_default = Toaster;
export {
  Icon_default as Icon,
  Loader_default as Loader,
  Toaster_default as Toaster,
  toast,
  useSonner
};
//# sourceMappingURL=svelte-sonner.js.map
